export default XRLayer;
export type LayerProps = {
    /**
     * List of [begin, end] values to control each channel's ramp function.
     */
    contrastLimits: Array<Array<number>>;
    /**
     * List of [r, g, b] values for each channel.
     */
    colors: Array<Array<number>>;
    /**
     * List of boolean values for each channel for whether or not it is visible.
     */
    channelsVisible: Array<boolean>;
    /**
     * Dtype for the layer.
     */
    dtype: string;
    /**
     * Opacity of the layer.
     */
    opacity?: number | undefined;
    /**
     * String indicating a colormap (default: '').  The full list of options is here: https://github.com/glslify/glsl-colormap#glsl-colormap
     */
    colormap?: string | undefined;
    /**
     * Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
     */
    domain?: Array<number> | undefined;
    /**
     * Unique identifier for this layer.
     */
    id?: string | undefined;
    /**
     * Hook function from deck.gl to handle hover objects.
     */
    onHover?: Function | undefined;
    /**
     * Whether or not to use the lens.
     */
    isLensOn?: boolean | undefined;
    /**
     * Numeric index of the channel to be focused on by the lens.
     */
    lensSelection?: number | undefined;
    /**
     * Pixel radius of the lens (default: 100).
     */
    lensRadius?: number | undefined;
    /**
     * RGB color of the border of the lens (default [255, 255, 255]).
     */
    lensBorderColor?: Array<number> | undefined;
    /**
     * Percentage of the radius of the lens for a border (default 0.02).
     */
    lensBorderRadius?: number | undefined;
    /**
     * Hook function from deck.gl to handle clicked-on objects.
     */
    onClick?: Function | undefined;
    /**
     * Math.gl Matrix4 object containing an affine transformation to be applied to the image.
     */
    modelMatrix?: Object | undefined;
    /**
     * An RGB (0-255 range) color to be considered "transparent" if provided.
     * In other words, any fragment shader output equal transparentColor (before applying opacity) will have opacity 0.
     * This parameter only needs to be a truthy value when using colormaps because each colormap has its own transparent color that is calculated on the shader.
     * Thus setting this to a truthy value (with a colormap set) indicates that the shader should make that color transparent.
     */
    transparentColor?: Array<number> | undefined;
    /**
     * The TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER for WebGL rendering (see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter) - default is GL.NEAREST
     */
    interpolation?: number | undefined;
};
/**
 * @typedef LayerProps
 * @type {object}
 * @property {Array.<Array.<number>>} contrastLimits List of [begin, end] values to control each channel's ramp function.
 * @property {Array.<Array.<number>>} colors List of [r, g, b] values for each channel.
 * @property {Array.<boolean>} channelsVisible List of boolean values for each channel for whether or not it is visible.
 * @property {string} dtype Dtype for the layer.
 * @property {number=} opacity Opacity of the layer.
 * @property {string=} colormap String indicating a colormap (default: '').  The full list of options is here: https://github.com/glslify/glsl-colormap#glsl-colormap
 * @property {Array.<number>=} domain Override for the possible max/min values (i.e something different than 65535 for uint16/'<u2').
 * @property {String=} id Unique identifier for this layer.
 * @property {function=} onHover Hook function from deck.gl to handle hover objects.
 * @property {boolean=} isLensOn Whether or not to use the lens.
 * @property {number=} lensSelection Numeric index of the channel to be focused on by the lens.
 * @property {number=} lensRadius Pixel radius of the lens (default: 100).
 * @property {Array.<number>=} lensBorderColor RGB color of the border of the lens (default [255, 255, 255]).
 * @property {number=} lensBorderRadius Percentage of the radius of the lens for a border (default 0.02).
 * @property {function=} onClick Hook function from deck.gl to handle clicked-on objects.
 * @property {Object=} modelMatrix Math.gl Matrix4 object containing an affine transformation to be applied to the image.
 * @property {Array.<number>=} transparentColor An RGB (0-255 range) color to be considered "transparent" if provided.
 * In other words, any fragment shader output equal transparentColor (before applying opacity) will have opacity 0.
 * This parameter only needs to be a truthy value when using colormaps because each colormap has its own transparent color that is calculated on the shader.
 * Thus setting this to a truthy value (with a colormap set) indicates that the shader should make that color transparent.
 * @property {number=} interpolation The TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER for WebGL rendering (see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter) - default is GL.NEAREST
 */
/**
 * @type {{ new (...props: import('../../types').Viv<LayerProps>[]) }}
 * @ignore
 */
declare const XRLayer: new (...props: import('../../types').Viv<LayerProps>[]) => any;
