/// <reference types="deck.gl" />
/**
 * This layer serves as a proxy of sorts to the rendering done in renderSubLayers, reacting to viewport changes in a custom manner.
 */
declare class MultiscaleImageLayerBase extends TileLayer<any> {
    constructor(props: import("@deck.gl/geo-layers/tile-layer/tile-layer").TileLayerProps<any>);
    /**
     * This function allows us to controls which viewport gets to update the Tileset2D.
     * This is a uniquely TileLayer issue since it updates based on viewport updates thanks
     * to its ability to handle zoom-pan loading.  Essentially, with a picture-in-picture,
     * this prevents it from detecting the update of some other viewport that is unwanted.
     */
    _updateTileset(): void;
}
declare namespace MultiscaleImageLayerBase {
    export const layerName: string;
    export { defaultProps };
}
export default MultiscaleImageLayerBase;
import { TileLayer } from "@deck.gl/geo-layers";
declare namespace defaultProps {
    namespace pickable {
        const type: string;
        const value: boolean;
        const compare: boolean;
    }
    const coordinateSystem: any;
    namespace contrastLimits {
        const type_1: string;
        export { type_1 as type };
        const value_1: never[];
        export { value_1 as value };
        const compare_1: boolean;
        export { compare_1 as compare };
    }
    namespace colors {
        const type_2: string;
        export { type_2 as type };
        const value_2: never[];
        export { value_2 as value };
        const compare_2: boolean;
        export { compare_2 as compare };
    }
    namespace channelsVisible {
        const type_3: string;
        export { type_3 as type };
        const value_3: never[];
        export { value_3 as value };
        const compare_3: boolean;
        export { compare_3 as compare };
    }
    namespace renderSubLayers {
        const type_4: string;
        export { type_4 as type };
        export { renderSubLayers as value };
        const compare_4: boolean;
        export { compare_4 as compare };
    }
    namespace colormap {
        const type_5: string;
        export { type_5 as type };
        const value_4: string;
        export { value_4 as value };
        const compare_5: boolean;
        export { compare_5 as compare };
    }
    namespace dtype {
        const type_6: string;
        export { type_6 as type };
        const value_5: string;
        export { value_5 as value };
        const compare_6: boolean;
        export { compare_6 as compare };
    }
    namespace domain {
        const type_7: string;
        export { type_7 as type };
        const value_6: never[];
        export { value_6 as value };
        const compare_7: boolean;
        export { compare_7 as compare };
    }
    namespace viewportId {
        const type_8: string;
        export { type_8 as type };
        const value_7: string;
        export { value_7 as value };
        const compare_8: boolean;
        export { compare_8 as compare };
    }
    namespace unprojectLensBounds {
        const type_9: string;
        export { type_9 as type };
        const value_8: number[];
        export { value_8 as value };
        const compare_9: boolean;
        export { compare_9 as compare };
    }
    namespace isLensOn {
        const type_10: string;
        export { type_10 as type };
        const value_9: boolean;
        export { value_9 as value };
        const compare_10: boolean;
        export { compare_10 as compare };
    }
    namespace lensSelection {
        const type_11: string;
        export { type_11 as type };
        const value_10: number;
        export { value_10 as value };
        const compare_11: boolean;
        export { compare_11 as compare };
    }
    namespace lensRadius {
        const type_12: string;
        export { type_12 as type };
        const value_11: number;
        export { value_11 as value };
        const compare_12: boolean;
        export { compare_12 as compare };
    }
    namespace lensBorderColor {
        const type_13: string;
        export { type_13 as type };
        const value_12: number[];
        export { value_12 as value };
        const compare_13: boolean;
        export { compare_13 as compare };
    }
    namespace lensBorderRadius {
        const type_14: string;
        export { type_14 as type };
        const value_13: number;
        export { value_13 as value };
        const compare_14: boolean;
        export { compare_14 as compare };
    }
    namespace transparentColor {
        const type_15: string;
        export { type_15 as type };
        const value_14: null;
        export { value_14 as value };
        const compare_15: boolean;
        export { compare_15 as compare };
    }
    namespace interpolation {
        const type_16: string;
        export { type_16 as type };
        const value_15: null;
        export { value_15 as value };
        const compare_16: boolean;
        export { compare_16 as compare };
    }
}
import { renderSubLayers as renderSubLayers_1 } from "./utils";
