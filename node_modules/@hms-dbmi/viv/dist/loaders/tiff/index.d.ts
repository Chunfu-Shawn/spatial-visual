interface TiffOptions {
    headers?: object;
    offsets?: number[];
    pool?: boolean;
}
/**
 * Opens an OME-TIFF via URL and returns data source and associated metadata for first image.
 *
 * @param {(string | File)} source url or File object.
 * @param {{ headers: (undefined | Headers), offsets: (undefined | number[]), pool: (undefined | boolean ) }} opts
 * Options for initializing a tiff pixel source. Headers are passed to each underlying fetch request. Offests are
 * a performance enhancment to index the remote tiff source using pre-computed byte-offsets. Pool indicates whether a
 * multi-threaded pool of image decoders should be used to decode tiles (default = true).
 * @return {Promise<{ data: TiffPixelSource[], metadata: ImageMeta }>} data source and associated OME-Zarr metadata.
 */
export declare function loadOmeTiff(source: string | File, opts?: TiffOptions): Promise<{
    data: import("./pixel-source").default<["t", "c", "z"] | ["c", "t", "z"] | ["z", "t", "c"] | ["t", "z", "c"] | ["z", "c", "t"] | ["c", "z", "t"]>[];
    metadata: {
        format(): {
            'Acquisition Date': string;
            'Dimensions (XY)': string;
            'Pixels Type': "int8" | "int16" | "int32" | "uint8" | "uint16" | "uint32" | "float" | "bit" | "double" | "complex" | "double-complex";
            'Pixels Size (XYZ)': string;
            'Z-sections/Timepoints': string;
            Channels: number;
        };
        AquisitionDate: string;
        Description: string;
        Pixels: {
            Channels: ({
                Color: [number, number, number, number];
                ID: string;
                SamplesPerPixel: number;
                Name?: string | undefined;
            } | {
                ID: string;
                SamplesPerPixel: number;
                Name?: string | undefined;
            })[];
            PhysicalSizeX: number;
            PhysicalSizeY: number;
            PhysicalSizeZ: number;
            SignificantBits: number;
            SizeX: number;
            SizeY: number;
            SizeZ: number;
            SizeT: number;
            SizeC: number;
            PhysicalSizeXUnit: import("../omexml").UnitsLength;
            PhysicalSizeYUnit: import("../omexml").UnitsLength;
            PhysicalSizeZUnit: import("../omexml").UnitsLength;
            BigEndian: boolean;
            Interleaved: boolean;
            ID: string;
            DimensionOrder: import("../omexml").DimensionOrder;
            Type: "int8" | "int16" | "int32" | "uint8" | "uint16" | "uint32" | "float" | "bit" | "double" | "complex" | "double-complex";
        };
        ID: string;
        Name: string;
    };
}>;
export {};
