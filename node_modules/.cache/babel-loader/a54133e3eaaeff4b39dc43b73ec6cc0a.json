{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { selector as parseSelector } from 'vega-event-selector';\nimport { array, isString } from 'vega-util';\nimport { forEachSelection, TUPLE } from '..';\nimport * as log from '../../../log';\nimport { isLegendBinding, isLegendStreamBinding, SELECTION_ID } from '../../../selection';\nimport { duplicate, varName } from '../../../util';\nimport { TUPLE_FIELDS } from './project';\nimport { TOGGLE } from './toggle';\nvar legendBindings = {\n  has: function has(selCmpt) {\n    var spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n    var projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n\n    if (spec && !projLen) {\n      log.warn(log.message.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\n    }\n\n    return spec && projLen;\n  },\n  parse: function parse(model, selCmpt, selDef, origDef) {\n    var _a; // Binding a selection to a legend disables default direct manipulation interaction.\n    // A user can choose to re-enable it by explicitly specifying triggering input events.\n\n\n    if (!origDef.on) delete selCmpt.events;\n    if (!origDef.clear) delete selCmpt.clear;\n\n    if (origDef.on || origDef.clear) {\n      var legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n\n      var _iterator = _createForOfIteratorHelper(selCmpt.events),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _evt = _step.value;\n          _evt.filter = array((_a = _evt.filter) !== null && _a !== void 0 ? _a : []);\n\n          if (_evt.filter.indexOf(legendFilter) < 0) {\n            _evt.filter.push(legendFilter);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    var evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n    var stream = isString(evt) ? parseSelector(evt, 'view') : array(evt);\n    selCmpt.bind = {\n      legend: {\n        merge: stream\n      }\n    };\n  },\n  topLevelSignals: function topLevelSignals(model, selCmpt, signals) {\n    var selName = selCmpt.name;\n    var stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n\n    var markName = function markName(name) {\n      return function (s) {\n        var ds = duplicate(s);\n        ds.markname = name;\n        return ds;\n      };\n    };\n\n    var _iterator2 = _createForOfIteratorHelper(selCmpt.project.items),\n        _step2;\n\n    try {\n      var _loop = function _loop() {\n        var proj = _step2.value;\n        if (!proj.hasLegend) return \"continue\";\n        var prefix = \"\".concat(varName(proj.field), \"_legend\");\n        var sgName = \"\".concat(selName, \"_\").concat(prefix);\n        var hasSignal = signals.filter(function (s) {\n          return s.name === sgName;\n        });\n\n        if (hasSignal.length === 0) {\n          var events = stream.merge.map(markName(\"\".concat(prefix, \"_symbols\"))).concat(stream.merge.map(markName(\"\".concat(prefix, \"_labels\")))).concat(stream.merge.map(markName(\"\".concat(prefix, \"_entries\"))));\n          signals.unshift(Object.assign(Object.assign({\n            name: sgName\n          }, !selCmpt.init ? {\n            value: null\n          } : {}), {\n            on: [// Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n            {\n              events: events,\n              update: 'datum.value || item().items[0].items[0].datum.value',\n              force: true\n            }, {\n              events: stream.merge,\n              update: \"!event.item || !datum ? null : \".concat(sgName),\n              force: true\n            }]\n          }));\n        }\n      };\n\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _ret = _loop();\n\n        if (_ret === \"continue\") continue;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return signals;\n  },\n  signals: function signals(model, selCmpt, _signals) {\n    var name = selCmpt.name;\n    var proj = selCmpt.project;\n\n    var tuple = _signals.find(function (s) {\n      return s.name === name + TUPLE;\n    });\n\n    var fields = name + TUPLE_FIELDS;\n    var values = proj.items.filter(function (p) {\n      return p.hasLegend;\n    }).map(function (p) {\n      return varName(\"\".concat(name, \"_\").concat(varName(p.field), \"_legend\"));\n    });\n    var valid = values.map(function (v) {\n      return \"\".concat(v, \" !== null\");\n    }).join(' && ');\n    var update = \"\".concat(valid, \" ? {fields: \").concat(fields, \", values: [\").concat(values.join(', '), \"]} : null\");\n\n    if (selCmpt.events && values.length > 0) {\n      tuple.on.push({\n        events: values.map(function (signal) {\n          return {\n            signal: signal\n          };\n        }),\n        update: update\n      });\n    } else if (values.length > 0) {\n      tuple.update = update;\n      delete tuple.value;\n      delete tuple.on;\n    }\n\n    var toggle = _signals.find(function (s) {\n      return s.name === name + TOGGLE;\n    });\n\n    var events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n\n    if (toggle) {\n      if (!selCmpt.events) toggle.on[0].events = events;else toggle.on.push(Object.assign(Object.assign({}, toggle.on[0]), {\n        events: events\n      }));\n    }\n\n    return _signals;\n  }\n};\nexport default legendBindings;\nexport function parseInteractiveLegend(model, channel, legendCmpt) {\n  var _a;\n\n  var field = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.field;\n  forEachSelection(model, function (selCmpt) {\n    var _a, _b;\n\n    var proj = (_a = selCmpt.project.hasField[field]) !== null && _a !== void 0 ? _a : selCmpt.project.hasChannel[channel];\n\n    if (proj && legendBindings.has(selCmpt)) {\n      var legendSelections = (_b = legendCmpt.get('selections')) !== null && _b !== void 0 ? _b : [];\n      legendSelections.push(selCmpt.name);\n      legendCmpt.set('selections', legendSelections, false);\n      proj.hasLegend = true;\n    }\n  });\n}","map":{"version":3,"sources":["../../../../../src/compile/selection/transforms/legends.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { selector as parseSelector } from 'vega-event-selector';\nimport { array, isString } from 'vega-util';\nimport { forEachSelection, TUPLE } from '..';\nimport * as log from '../../../log';\nimport { isLegendBinding, isLegendStreamBinding, SELECTION_ID } from '../../../selection';\nimport { duplicate, varName } from '../../../util';\nimport { TUPLE_FIELDS } from './project';\nimport { TOGGLE } from './toggle';\nconst legendBindings = {\n    has: (selCmpt) => {\n        const spec = selCmpt.resolve === 'global' && selCmpt.bind && isLegendBinding(selCmpt.bind);\n        const projLen = selCmpt.project.items.length === 1 && selCmpt.project.items[0].field !== SELECTION_ID;\n        if (spec && !projLen) {\n            log.warn(log.message.LEGEND_BINDINGS_MUST_HAVE_PROJECTION);\n        }\n        return spec && projLen;\n    },\n    parse: (model, selCmpt, selDef, origDef) => {\n        var _a;\n        // Binding a selection to a legend disables default direct manipulation interaction.\n        // A user can choose to re-enable it by explicitly specifying triggering input events.\n        if (!origDef.on)\n            delete selCmpt.events;\n        if (!origDef.clear)\n            delete selCmpt.clear;\n        if (origDef.on || origDef.clear) {\n            const legendFilter = 'event.item && indexof(event.item.mark.role, \"legend\") < 0';\n            for (const evt of selCmpt.events) {\n                evt.filter = array((_a = evt.filter) !== null && _a !== void 0 ? _a : []);\n                if (evt.filter.indexOf(legendFilter) < 0) {\n                    evt.filter.push(legendFilter);\n                }\n            }\n        }\n        const evt = isLegendStreamBinding(selCmpt.bind) ? selCmpt.bind.legend : 'click';\n        const stream = isString(evt) ? parseSelector(evt, 'view') : array(evt);\n        selCmpt.bind = { legend: { merge: stream } };\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n        const selName = selCmpt.name;\n        const stream = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n        const markName = (name) => (s) => {\n            const ds = duplicate(s);\n            ds.markname = name;\n            return ds;\n        };\n        for (const proj of selCmpt.project.items) {\n            if (!proj.hasLegend)\n                continue;\n            const prefix = `${varName(proj.field)}_legend`;\n            const sgName = `${selName}_${prefix}`;\n            const hasSignal = signals.filter(s => s.name === sgName);\n            if (hasSignal.length === 0) {\n                const events = stream.merge\n                    .map(markName(`${prefix}_symbols`))\n                    .concat(stream.merge.map(markName(`${prefix}_labels`)))\n                    .concat(stream.merge.map(markName(`${prefix}_entries`)));\n                signals.unshift(Object.assign(Object.assign({ name: sgName }, (!selCmpt.init ? { value: null } : {})), { on: [\n                        // Legend entries do not store values, so we need to walk the scenegraph to the symbol datum.\n                        { events, update: 'datum.value || item().items[0].items[0].datum.value', force: true },\n                        { events: stream.merge, update: `!event.item || !datum ? null : ${sgName}`, force: true }\n                    ] }));\n            }\n        }\n        return signals;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const proj = selCmpt.project;\n        const tuple = signals.find(s => s.name === name + TUPLE);\n        const fields = name + TUPLE_FIELDS;\n        const values = proj.items.filter(p => p.hasLegend).map(p => varName(`${name}_${varName(p.field)}_legend`));\n        const valid = values.map(v => `${v} !== null`).join(' && ');\n        const update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n        if (selCmpt.events && values.length > 0) {\n            tuple.on.push({\n                events: values.map(signal => ({ signal })),\n                update\n            });\n        }\n        else if (values.length > 0) {\n            tuple.update = update;\n            delete tuple.value;\n            delete tuple.on;\n        }\n        const toggle = signals.find(s => s.name === name + TOGGLE);\n        const events = isLegendStreamBinding(selCmpt.bind) && selCmpt.bind.legend;\n        if (toggle) {\n            if (!selCmpt.events)\n                toggle.on[0].events = events;\n            else\n                toggle.on.push(Object.assign(Object.assign({}, toggle.on[0]), { events }));\n        }\n        return signals;\n    }\n};\nexport default legendBindings;\nexport function parseInteractiveLegend(model, channel, legendCmpt) {\n    var _a;\n    const field = (_a = model.fieldDef(channel)) === null || _a === void 0 ? void 0 : _a.field;\n    forEachSelection(model, selCmpt => {\n        var _a, _b;\n        const proj = (_a = selCmpt.project.hasField[field]) !== null && _a !== void 0 ? _a : selCmpt.project.hasChannel[channel];\n        if (proj && legendBindings.has(selCmpt)) {\n            const legendSelections = (_b = legendCmpt.get('selections')) !== null && _b !== void 0 ? _b : [];\n            legendSelections.push(selCmpt.name);\n            legendCmpt.set('selections', legendSelections, false);\n            proj.hasLegend = true;\n        }\n    });\n}\n//# sourceMappingURL=legends.js.map"]},"metadata":{},"sourceType":"module"}