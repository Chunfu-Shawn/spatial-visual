{"ast":null,"code":"import _objectSpread from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from 'math.gl';\nimport { pixelsToWorld } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\nvar viewMatrix = new Matrix4().lookAt({\n  eye: [0, 0, 1]\n});\n\nfunction getProjectionMatrix(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      near = _ref.near,\n      far = _ref.far;\n  width = width || 1;\n  height = height || 1;\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near: near,\n    far: far\n  });\n}\n\nvar OrthographicViewport = /*#__PURE__*/function (_Viewport) {\n  _inherits(OrthographicViewport, _Viewport);\n\n  var _super = _createSuper(OrthographicViewport);\n\n  function OrthographicViewport(props) {\n    _classCallCheck(this, OrthographicViewport);\n\n    var width = props.width,\n        height = props.height,\n        _props$near = props.near,\n        near = _props$near === void 0 ? 0.1 : _props$near,\n        _props$far = props.far,\n        far = _props$far === void 0 ? 1000 : _props$far,\n        _props$zoom = props.zoom,\n        zoom = _props$zoom === void 0 ? 0 : _props$zoom,\n        _props$target = props.target,\n        target = _props$target === void 0 ? [0, 0, 0] : _props$target,\n        _props$flipY = props.flipY,\n        flipY = _props$flipY === void 0 ? true : _props$flipY;\n    var scale = Math.pow(2, zoom);\n    return _super.call(this, _objectSpread(_objectSpread({}, props), {}, {\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({\n        width: width,\n        height: height,\n        near: near,\n        far: far\n      }),\n      zoom: zoom\n    }));\n  }\n\n  _createClass(OrthographicViewport, [{\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      var fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n      var translate = vec2.add([], coords, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return {\n        target: newCenter\n      };\n    }\n  }]);\n\n  return OrthographicViewport;\n}(Viewport);\n\nvar OrthographicView = /*#__PURE__*/function (_View) {\n  _inherits(OrthographicView, _View);\n\n  var _super2 = _createSuper(OrthographicView);\n\n  function OrthographicView(props) {\n    _classCallCheck(this, OrthographicView);\n\n    return _super2.call(this, _objectSpread(_objectSpread({}, props), {}, {\n      type: OrthographicViewport\n    }));\n  }\n\n  _createClass(OrthographicView, [{\n    key: \"controller\",\n    get: function get() {\n      return this._getControllerProps({\n        type: OrthographicController\n      });\n    }\n  }]);\n\n  return OrthographicView;\n}(View);\n\nexport { OrthographicView as default };\nOrthographicView.displayName = 'OrthographicView';","map":{"version":3,"sources":["../../../src/views/orthographic-view.js"],"names":["viewMatrix","eye","far","width","height","left","right","bottom","top","near","constructor","zoom","target","flipY","scale","Math","longitude","position","projectionMatrix","getProjectionMatrix","panByPosition","fromLocation","pixelsToWorld","translate","vec2","newCenter","type","OrthographicViewport","OrthographicController","OrthographicView"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\n\nconst viewMatrix = new Matrix4().lookAt({eye: [0, 0, 1]});\n\nfunction getProjectionMatrix({width, height, near, far}) {\n  // Make sure Matrix4.ortho doesn't crash on 0 width/height\n  width = width || 1;\n  height = height || 1;\n\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near,\n    far\n  });\n}\n\nclass OrthographicViewport extends Viewport {\n  constructor(props) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      flipY = true\n    } = props;\n    const scale = Math.pow(2, zoom);\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({width, height, near, far}),\n      zoom\n    });\n  }\n\n  /* Needed by LinearInterpolator */\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n\n    const translate = vec2.add([], coords, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return {target: newCenter};\n  }\n}\n\nexport default class OrthographicView extends View {\n  constructor(props) {\n    super({\n      ...props,\n      type: OrthographicViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrthographicController\n    });\n  }\n}\n\nOrthographicView.displayName = 'OrthographicView';\n"]},"metadata":{},"sourceType":"module"}