{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nexport var BaseResponse = /*#__PURE__*/function () {\n  function BaseResponse() {\n    _classCallCheck(this, BaseResponse);\n  }\n\n  _createClass(BaseResponse, [{\n    key: \"ok\",\n    get:\n    /**\n     * Returns whether the response has an ok'ish status code\n     */\n    function get() {\n      return this.status >= 200 && this.status <= 299;\n    }\n    /**\n     * Returns the status code of the response\n     */\n\n  }, {\n    key: \"status\",\n    get: function get() {\n      throw new Error('not implemented');\n    }\n    /**\n     * Returns the value of the specified header\n     * @param {string} headerName the header name\n     * @returns {string} the header value\n     */\n\n  }, {\n    key: \"getHeader\",\n    value: function getHeader(headerName) {\n      throw new Error('not implemented');\n    }\n    /**\n     * @returns {ArrayBuffer} the response data of the request\n     */\n\n  }, {\n    key: \"getData\",\n    value: function () {\n      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                throw new Error('not implemented');\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getData() {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  }]);\n\n  return BaseResponse;\n}();\nexport var BaseClient = /*#__PURE__*/function () {\n  function BaseClient(url) {\n    _classCallCheck(this, BaseClient);\n\n    this.url = url;\n  }\n  /**\n   * Send a request with the options\n   * @param {object} [options]\n   */\n\n\n  _createClass(BaseClient, [{\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _ref,\n            headers,\n            credentials,\n            signal,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _ref = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, headers = _ref.headers, credentials = _ref.credentials, signal = _ref.signal;\n                throw new Error(\"request is not implemented\");\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function request() {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n  }]);\n\n  return BaseClient;\n}();","map":{"version":3,"sources":["/Users/chunfu/IdeaProjects/spatial-visual/node_modules/geotiff/src/source/client/base.js"],"names":["BaseResponse","status","Error","headerName","BaseClient","url","headers","credentials","signal"],"mappings":";;;;AAAA,WAAaA,YAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACE;AACF;AACA;AACE,mBAAS;AACP,aAAO,KAAKC,MAAL,IAAe,GAAf,IAAsB,KAAKA,MAAL,IAAe,GAA5C;AACD;AAED;AACF;AACA;;AAVA;AAAA;AAAA,SAWE,eAAa;AACX,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;;AAnBA;AAAA;AAAA,WAoBE,mBAAUC,UAAV,EAAsB;AACpB,YAAM,IAAID,KAAJ,CAAU,iBAAV,CAAN;AACD;AAED;AACF;AACA;;AA1BA;AAAA;AAAA;AAAA,8EA2BE;AAAA;AAAA;AAAA;AAAA;AAAA,sBACQ,IAAIA,KAAJ,CAAU,iBAAV,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA3BF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgCA,WAAaE,UAAb;AACE,sBAAYC,GAAZ,EAAiB;AAAA;;AACf,SAAKA,GAAL,GAAWA,GAAX;AACD;AAED;AACF;AACA;AACA;;;AARA;AAAA;AAAA;AAAA,8EASE;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kFAAiD,EAAjD,EAAgBC,OAAhB,QAAgBA,OAAhB,EAAyBC,WAAzB,QAAyBA,WAAzB,EAAsCC,MAAtC,QAAsCA,MAAtC;AAAA,sBACQ,IAAIN,KAAJ,8BADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OATF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["export class BaseResponse {\n  /**\n   * Returns whether the response has an ok'ish status code\n   */\n  get ok() {\n    return this.status >= 200 && this.status <= 299;\n  }\n\n  /**\n   * Returns the status code of the response\n   */\n  get status() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns the value of the specified header\n   * @param {string} headerName the header name\n   * @returns {string} the header value\n   */\n  getHeader(headerName) {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * @returns {ArrayBuffer} the response data of the request\n   */\n  async getData() {\n    throw new Error('not implemented');\n  }\n}\n\nexport class BaseClient {\n  constructor(url) {\n    this.url = url;\n  }\n\n  /**\n   * Send a request with the options\n   * @param {object} [options]\n   */\n  async request({ headers, credentials, signal } = {}) {\n    throw new Error(`request is not implemented`);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}