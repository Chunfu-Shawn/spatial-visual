{"ast":null,"code":"import _slicedToArray from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport Viewport from './viewport';\nimport { pixelsToWorld, getViewMatrix, addMetersToLngLat as _addMetersToLngLat, getProjectionParameters, fitBounds as _fitBounds, getBounds as _getBounds } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport { Matrix4 } from 'math.gl';\n\nvar WebMercatorViewport = /*#__PURE__*/function (_Viewport) {\n  _inherits(WebMercatorViewport, _Viewport);\n\n  var _super = _createSuper(WebMercatorViewport);\n\n  function WebMercatorViewport() {\n    var _this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, WebMercatorViewport);\n\n    var _opts$latitude = opts.latitude,\n        latitude = _opts$latitude === void 0 ? 0 : _opts$latitude,\n        _opts$longitude = opts.longitude,\n        longitude = _opts$longitude === void 0 ? 0 : _opts$longitude,\n        _opts$zoom = opts.zoom,\n        zoom = _opts$zoom === void 0 ? 11 : _opts$zoom,\n        _opts$pitch = opts.pitch,\n        pitch = _opts$pitch === void 0 ? 0 : _opts$pitch,\n        _opts$bearing = opts.bearing,\n        bearing = _opts$bearing === void 0 ? 0 : _opts$bearing,\n        _opts$nearZMultiplier = opts.nearZMultiplier,\n        nearZMultiplier = _opts$nearZMultiplier === void 0 ? 0.1 : _opts$nearZMultiplier,\n        _opts$farZMultiplier = opts.farZMultiplier,\n        farZMultiplier = _opts$farZMultiplier === void 0 ? 1.01 : _opts$farZMultiplier,\n        _opts$orthographic = opts.orthographic,\n        orthographic = _opts$orthographic === void 0 ? false : _opts$orthographic,\n        _opts$repeat = opts.repeat,\n        repeat = _opts$repeat === void 0 ? false : _opts$repeat,\n        _opts$worldOffset = opts.worldOffset,\n        worldOffset = _opts$worldOffset === void 0 ? 0 : _opts$worldOffset;\n    var width = opts.width,\n        height = opts.height,\n        _opts$altitude = opts.altitude,\n        altitude = _opts$altitude === void 0 ? 1.5 : _opts$altitude;\n    var scale = Math.pow(2, zoom);\n    width = width || 1;\n    height = height || 1;\n    altitude = Math.max(0.75, altitude);\n\n    var _getProjectionParamet = getProjectionParameters({\n      width: width,\n      height: height,\n      pitch: pitch,\n      altitude: altitude,\n      nearZMultiplier: nearZMultiplier,\n      farZMultiplier: farZMultiplier\n    }),\n        fov = _getProjectionParamet.fov,\n        aspect = _getProjectionParamet.aspect,\n        focalDistance = _getProjectionParamet.focalDistance,\n        near = _getProjectionParamet.near,\n        far = _getProjectionParamet.far;\n\n    var viewMatrixUncentered = getViewMatrix({\n      height: height,\n      pitch: pitch,\n      bearing: bearing,\n      scale: scale,\n      altitude: altitude\n    });\n\n    if (worldOffset) {\n      var viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    _this = _super.call(this, _objectSpread(_objectSpread({}, opts), {}, {\n      width: width,\n      height: height,\n      viewMatrix: viewMatrixUncentered,\n      longitude: longitude,\n      latitude: latitude,\n      zoom: zoom,\n      orthographic: orthographic,\n      fovyRadians: fov,\n      aspect: aspect,\n      focalDistance: focalDistance,\n      near: near,\n      far: far\n    }));\n    _this.latitude = latitude;\n    _this.longitude = longitude;\n    _this.zoom = zoom;\n    _this.pitch = pitch;\n    _this.bearing = bearing;\n    _this.altitude = altitude;\n    _this.orthographic = orthographic;\n    _this._subViewports = repeat ? [] : null;\n    Object.freeze(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(WebMercatorViewport, [{\n    key: \"subViewports\",\n    get: function get() {\n      if (this._subViewports && !this._subViewports.length) {\n        var bounds = this.getBounds();\n        var minOffset = Math.floor((bounds[0] + 180) / 360);\n        var maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n        for (var x = minOffset; x <= maxOffset; x++) {\n          var offsetViewport = x ? new WebMercatorViewport(_objectSpread(_objectSpread({}, this), {}, {\n            worldOffset: x\n          })) : this;\n\n          this._subViewports.push(offsetViewport);\n        }\n      }\n\n      return this._subViewports;\n    }\n  }, {\n    key: \"addMetersToLngLat\",\n    value: function addMetersToLngLat(lngLatZ, xyz) {\n      return _addMetersToLngLat(lngLatZ, xyz);\n    }\n  }, {\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      var fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n      var toLocation = this.projectFlat(coords);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n\n      var _this$unprojectFlat = this.unprojectFlat(newCenter),\n          _this$unprojectFlat2 = _slicedToArray(_this$unprojectFlat, 2),\n          longitude = _this$unprojectFlat2[0],\n          latitude = _this$unprojectFlat2[1];\n\n      return {\n        longitude: longitude,\n        latitude: latitude\n      };\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var corners = _getBounds(this, options.z || 0);\n\n      return [Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]), Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]), Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])];\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = this.width,\n          height = this.height;\n\n      var _fitBounds2 = _fitBounds(_objectSpread({\n        width: width,\n        height: height,\n        bounds: bounds\n      }, options)),\n          longitude = _fitBounds2.longitude,\n          latitude = _fitBounds2.latitude,\n          zoom = _fitBounds2.zoom;\n\n      return new WebMercatorViewport({\n        width: width,\n        height: height,\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n    }\n  }]);\n\n  return WebMercatorViewport;\n}(Viewport);\n\nexport { WebMercatorViewport as default };\nWebMercatorViewport.displayName = 'WebMercatorViewport';","map":{"version":3,"sources":["../../../src/viewports/web-mercator-viewport.js"],"names":["addMetersToLngLat","fitBounds","getBounds","constructor","opts","latitude","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","repeat","worldOffset","altitude","scale","Math","width","height","far","getProjectionParameters","viewMatrixUncentered","getViewMatrix","viewOffset","viewMatrix","fovyRadians","aspect","focalDistance","near","Object","bounds","minOffset","maxOffset","x","offsetViewport","panByPosition","fromLocation","pixelsToWorld","toLocation","translate","vec2","newCenter","options","corners","WebMercatorViewport"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  getProjectionParameters,\n  fitBounds,\n  getBounds\n} from '@math.gl/web-mercator';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\nimport {Matrix4} from 'math.gl';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n\n      repeat = false,\n      worldOffset = 0\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const {fov, aspect, focalDistance, near, far} = getProjectionParameters({\n      width,\n      height,\n      pitch,\n      altitude,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({\n      ...opts,\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      orthographic,\n      fovyRadians: fov,\n      aspect,\n      focalDistance,\n      near,\n      far\n    });\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.orthographic = orthographic;\n\n    this._subViewports = repeat ? [] : null;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  get subViewports() {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const bounds = this.getBounds();\n\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x\n          ? new WebMercatorViewport({\n              ...this,\n              worldOffset: x\n            })\n          : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {longitude, latitude};\n  }\n\n  getBounds(options = {}) {\n    const corners = getBounds(this, options.z || 0);\n\n    return [\n      Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n      Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n    ];\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds({width, height, bounds, ...options});\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n\nWebMercatorViewport.displayName = 'WebMercatorViewport';\n"]},"metadata":{},"sourceType":"module"}