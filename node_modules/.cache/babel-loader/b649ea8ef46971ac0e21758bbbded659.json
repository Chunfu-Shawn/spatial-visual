{"ast":null,"code":"import _objectSpread from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { CompositeLayer, _flatten as flatten } from '@deck.gl/core';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport Tileset2D, { STRATEGY_DEFAULT } from './tileset-2d';\nimport { urlType, getURLFromTemplate } from './utils';\nvar defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {\n    type: 'function',\n    value: function value(props) {\n      return new GeoJsonLayer(props);\n    },\n    compare: false\n  },\n  getTileData: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onViewportLoad: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onTileLoad: {\n    type: 'function',\n    value: function value(tile) {},\n    compare: false\n  },\n  onTileUnload: {\n    type: 'function',\n    value: function value(tile) {},\n    compare: false\n  },\n  onTileError: {\n    type: 'function',\n    value: function value(err) {\n      return console.error(err);\n    },\n    compare: false\n  },\n  extent: {\n    type: 'array',\n    optional: true,\n    value: null,\n    compare: true\n  },\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\n\nvar TileLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(TileLayer, _CompositeLayer);\n\n  var _super = _createSuper(TileLayer);\n\n  function TileLayer() {\n    _classCallCheck(this, TileLayer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TileLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        tileset: null,\n        isLoaded: false\n      };\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state$tileset;\n\n      (_this$state$tileset = this.state.tileset) === null || _this$state$tileset === void 0 ? void 0 : _this$state$tileset.finalize();\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      var tileset = this.state.tileset;\n      return tileset.selectedTiles.every(function (tile) {\n        return tile.layers && tile.layers.every(function (layer) {\n          return layer.isLoaded;\n        });\n      });\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var props = _ref2.props,\n          changeFlags = _ref2.changeFlags;\n      var tileset = this.state.tileset;\n      var createTileCache = !tileset || changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData);\n\n      if (createTileCache) {\n        if (tileset) {\n          tileset.finalize();\n        }\n\n        tileset = new Tileset2D(_objectSpread(_objectSpread({}, this._getTilesetOptions(props)), {}, {\n          getTileData: this.getTileData.bind(this),\n          onTileLoad: this._onTileLoad.bind(this),\n          onTileError: this._onTileError.bind(this),\n          onTileUnload: this._onTileUnload.bind(this)\n        }));\n        this.setState({\n          tileset: tileset\n        });\n      } else if (changeFlags.propsChanged || changeFlags.updateTriggersChanged) {\n        tileset.setOptions(this._getTilesetOptions(props));\n        this.state.tileset.tiles.forEach(function (tile) {\n          tile.layers = null;\n        });\n      }\n\n      this._updateTileset();\n    }\n  }, {\n    key: \"_getTilesetOptions\",\n    value: function _getTilesetOptions(props) {\n      var tileSize = props.tileSize,\n          maxCacheSize = props.maxCacheSize,\n          maxCacheByteSize = props.maxCacheByteSize,\n          refinementStrategy = props.refinementStrategy,\n          extent = props.extent,\n          maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          maxRequests = props.maxRequests,\n          zoomOffset = props.zoomOffset;\n      return {\n        maxCacheSize: maxCacheSize,\n        maxCacheByteSize: maxCacheByteSize,\n        maxZoom: maxZoom,\n        minZoom: minZoom,\n        tileSize: tileSize,\n        refinementStrategy: refinementStrategy,\n        extent: extent,\n        maxRequests: maxRequests,\n        zoomOffset: zoomOffset\n      };\n    }\n  }, {\n    key: \"_updateTileset\",\n    value: function _updateTileset() {\n      var tileset = this.state.tileset;\n      var _this$props = this.props,\n          zRange = _this$props.zRange,\n          modelMatrix = _this$props.modelMatrix;\n      var frameNumber = tileset.update(this.context.viewport, {\n        zRange: zRange,\n        modelMatrix: modelMatrix\n      });\n      var isLoaded = tileset.isLoaded;\n      var loadingStateChanged = this.state.isLoaded !== isLoaded;\n      var tilesetChanged = this.state.frameNumber !== frameNumber;\n\n      if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n        this._onViewportLoad();\n      }\n\n      if (tilesetChanged) {\n        this.setState({\n          frameNumber: frameNumber\n        });\n      }\n\n      this.state.isLoaded = isLoaded;\n    }\n  }, {\n    key: \"_onViewportLoad\",\n    value: function _onViewportLoad() {\n      var tileset = this.state.tileset;\n      var onViewportLoad = this.props.onViewportLoad;\n\n      if (onViewportLoad) {\n        onViewportLoad(tileset.selectedTiles);\n      }\n    }\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(tile) {\n      var layer = this.getCurrentLayer();\n      layer.props.onTileLoad(tile);\n\n      if (tile.isVisible) {\n        this.setNeedsUpdate();\n      }\n    }\n  }, {\n    key: \"_onTileError\",\n    value: function _onTileError(error, tile) {\n      var layer = this.getCurrentLayer();\n      layer.props.onTileError(error);\n\n      layer._updateTileset();\n\n      if (tile.isVisible) {\n        this.setNeedsUpdate();\n      }\n    }\n  }, {\n    key: \"_onTileUnload\",\n    value: function _onTileUnload(tile) {\n      var layer = this.getCurrentLayer();\n      layer.props.onTileUnload(tile);\n    }\n  }, {\n    key: \"getTileData\",\n    value: function getTileData(tile) {\n      var layer = this.getCurrentLayer();\n      var _layer$props = layer.props,\n          data = _layer$props.data,\n          getTileData = _layer$props.getTileData,\n          fetch = _layer$props.fetch;\n      var signal = tile.signal;\n      tile.url = getURLFromTemplate(data, tile);\n\n      if (getTileData) {\n        return getTileData(tile);\n      }\n\n      if (tile.url) {\n        return fetch(tile.url, {\n          propName: 'data',\n          layer: layer,\n          signal: signal\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      return this.props.renderSubLayers(props);\n    }\n  }, {\n    key: \"getHighlightedObjectIndex\",\n    value: function getHighlightedObjectIndex() {\n      return -1;\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref3) {\n      var info = _ref3.info,\n          sourceLayer = _ref3.sourceLayer;\n      info.tile = sourceLayer.props.tile;\n      return info;\n    }\n  }, {\n    key: \"_updateAutoHighlight\",\n    value: function _updateAutoHighlight(info) {\n      if (info.sourceLayer) {\n        info.sourceLayer.updateAutoHighlight(info);\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this = this;\n\n      return this.state.tileset.tiles.map(function (tile) {\n        var highlightedObjectIndex = _this.getHighlightedObjectIndex(tile);\n\n        if (!tile.isLoaded) {} else if (!tile.layers) {\n          var layers = _this.renderSubLayers(_objectSpread(_objectSpread({}, _this.props), {}, {\n            id: \"\".concat(_this.id, \"-\").concat(tile.x, \"-\").concat(tile.y, \"-\").concat(tile.z),\n            data: tile.data,\n            _offset: 0,\n            tile: tile\n          }));\n\n          tile.layers = flatten(layers, Boolean).map(function (layer) {\n            return layer.clone({\n              tile: tile,\n              highlightedObjectIndex: highlightedObjectIndex\n            });\n          });\n        } else if (tile.layers[0] && tile.layers[0].props.highlightedObjectIndex !== highlightedObjectIndex) {\n          tile.layers = tile.layers.map(function (layer) {\n            return layer.clone({\n              highlightedObjectIndex: highlightedObjectIndex\n            });\n          });\n        }\n\n        return tile.layers;\n      });\n    }\n  }, {\n    key: \"filterSubLayer\",\n    value: function filterSubLayer(_ref4) {\n      var layer = _ref4.layer;\n      return this.props.visible && layer.props.tile.isVisible;\n    }\n  }]);\n\n  return TileLayer;\n}(CompositeLayer);\n\nexport { TileLayer as default };\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["_flatten","defaultProps","data","dataComparator","urlType","renderSubLayers","type","value","props","compare","getTileData","optional","onViewportLoad","onTileLoad","tile","onTileUnload","onTileError","err","console","extent","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","zRange","maxRequests","zoomOffset","initializeState","tileset","isLoaded","finalizeState","layer","shouldUpdateState","changeFlags","updateState","createTileCache","_getTilesetOptions","_updateTileset","modelMatrix","frameNumber","loadingStateChanged","tilesetChanged","_onViewportLoad","_onTileLoad","_onTileError","_onTileUnload","fetch","signal","getURLFromTemplate","propName","getHighlightedObjectIndex","getPickingInfo","sourceLayer","info","_updateAutoHighlight","renderLayers","highlightedObjectIndex","layers","id","_offset","filterSubLayer","TileLayer"],"mappings":";;;;;AAAA,SAAA,cAAA,EAAwBA,QAAQ,IAAhC,OAAA,QAAA,eAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AAEA,OAAA,SAAA,IAAA,gBAAA,QAAA,cAAA;AACA,SAAA,OAAA,EAAA,kBAAA,QAAA,SAAA;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EADe,EAAA;AAEnBC,EAAAA,cAAc,EAAEC,OAAO,CAFJ,MAAA;AAGnBC,EAAAA,eAAe,EAAE;AAACC,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAEC,eAAAA,KAAK;AAAA,aAAI,IAAA,YAAA,CAAnC,KAAmC,CAAJ;AAAA,KAA/B;AAA4DC,IAAAA,OAAO,EAAE;AAArE,GAHE;AAInBC,EAAAA,WAAW,EAAE;AAACJ,IAAAA,IAAI,EAAL,UAAA;AAAmBK,IAAAA,QAAQ,EAA3B,IAAA;AAAmCJ,IAAAA,KAAK,EAAxC,IAAA;AAAgDE,IAAAA,OAAO,EAAE;AAAzD,GAJM;AAMnBG,EAAAA,cAAc,EAAE;AAACN,IAAAA,IAAI,EAAL,UAAA;AAAmBK,IAAAA,QAAQ,EAA3B,IAAA;AAAmCJ,IAAAA,KAAK,EAAxC,IAAA;AAAgDE,IAAAA,OAAO,EAAE;AAAzD,GANG;AAOnBI,EAAAA,UAAU,EAAE;AAACP,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAEO,eAAAA,IAAI,EAAI,CAAlC,CAAA;AAAsCL,IAAAA,OAAO,EAAE;AAA/C,GAPO;AAQnBM,EAAAA,YAAY,EAAE;AAACT,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAEO,eAAAA,IAAI,EAAI,CAAlC,CAAA;AAAsCL,IAAAA,OAAO,EAAE;AAA/C,GARK;AAUnBO,EAAAA,WAAW,EAAE;AAACV,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAEU,eAAAA,GAAG;AAAA,aAAIC,OAAO,CAAPA,KAAAA,CAAjC,GAAiCA,CAAJ;AAAA,KAA7B;AAAqDT,IAAAA,OAAO,EAAE;AAA9D,GAVM;AAWnBU,EAAAA,MAAM,EAAE;AAACb,IAAAA,IAAI,EAAL,OAAA;AAAgBK,IAAAA,QAAQ,EAAxB,IAAA;AAAgCJ,IAAAA,KAAK,EAArC,IAAA;AAA6CE,IAAAA,OAAO,EAAE;AAAtD,GAXW;AAYnBW,EAAAA,QAAQ,EAZW,GAAA;AAanBC,EAAAA,OAAO,EAbY,IAAA;AAcnBC,EAAAA,OAAO,EAdY,CAAA;AAenBC,EAAAA,YAAY,EAfO,IAAA;AAgBnBC,EAAAA,gBAAgB,EAhBG,IAAA;AAiBnBC,EAAAA,kBAAkB,EAjBC,gBAAA;AAkBnBC,EAAAA,MAAM,EAlBa,IAAA;AAmBnBC,EAAAA,WAAW,EAnBQ,CAAA;AAoBnBC,EAAAA,UAAU,EAAE;AApBO,CAArB;;IAuBe,S;;;;;;;;;;;;;WACbC,2BAAkB;AAChB,WAAA,KAAA,GAAa;AACXC,QAAAA,OAAO,EADI,IAAA;AAEXC,QAAAA,QAAQ,EAAE;AAFC,OAAb;AAID;;;WAEDC,yBAAgB;AAAA,UAAA,mBAAA;;AACd,OAAA,mBAAA,GAAA,KAAA,KAAA,CAAA,OAAA,MAAA,IAAA,IAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,mBAAA,CAAA,QAAA,EAAA;AACD;;;SAED,eAAe;AACb,UAAOF,OAAP,GAAkB,KAAlB,KAAA,CAAOA,OAAP;AACA,aAAOA,OAAO,CAAPA,aAAAA,CAAAA,KAAAA,CACLhB,UAAAA,IAAI;AAAA,eAAIA,IAAI,CAAJA,MAAAA,IAAeA,IAAI,CAAJA,MAAAA,CAAAA,KAAAA,CAAkBmB,UAAAA,KAAK;AAAA,iBAAIA,KAAK,CADzD,QACgD;AAAA,SAAvBnB,CAAnB;AAAA,OADCgB,CAAP;AAGD;;;WAEDI,iCAAiC;AAAA,UAAdC,WAAc,QAAdA,WAAc;AAC/B,aAAOA,WAAW,CAAlB,gBAAA;AACD;;;WAEDC,4BAAkC;AAAA,UAAtB,KAAsB,SAAtB,KAAsB;AAAA,UAAdD,WAAc,SAAdA,WAAc;AAChC,UAAKL,OAAL,GAAgB,KAAhB,KAAA,CAAKA,OAAL;AACA,UAAMO,eAAe,GACnB,CAAA,OAAA,IACAF,WAAW,CADX,WAAA,IAECA,WAAW,CAAXA,qBAAAA,KACEA,WAAW,CAAXA,qBAAAA,CAAAA,GAAAA,IAAyCA,WAAW,CAAXA,qBAAAA,CAJ9C,WAGGA,CAHH;;AAMA,UAAA,eAAA,EAAqB;AACnB,YAAA,OAAA,EAAa;AACXL,UAAAA,OAAO,CAAPA,QAAAA;AACD;;AACDA,QAAAA,OAAO,GAAG,IAAA,SAAA,iCACL,KAAA,kBAAA,CADmB,KACnB,CADK;AAERpB,UAAAA,WAAW,EAAE,KAAA,WAAA,CAAA,IAAA,CAFS,IAET,CAFL;AAGRG,UAAAA,UAAU,EAAE,KAAA,WAAA,CAAA,IAAA,CAHU,IAGV,CAHJ;AAIRG,UAAAA,WAAW,EAAE,KAAA,YAAA,CAAA,IAAA,CAJS,IAIT,CAJL;AAKRD,UAAAA,YAAY,EAAE,KAAA,aAAA,CAAA,IAAA,CAAA,IAAA;AALN,WAAVe;AAOA,aAAA,QAAA,CAAc;AAACA,UAAAA,OAAAA,EAAAA;AAAD,SAAd;AAXF,OAAA,MAYO,IAAIK,WAAW,CAAXA,YAAAA,IAA4BA,WAAW,CAA3C,qBAAA,EAAmE;AACxEL,QAAAA,OAAO,CAAPA,UAAAA,CAAmB,KAAA,kBAAA,CAAnBA,KAAmB,CAAnBA;AAEA,aAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,OAAA,CAAiChB,UAAAA,IAAI,EAAI;AACvCA,UAAAA,IAAI,CAAJA,MAAAA,GAAAA,IAAAA;AADF,SAAA;AAGD;;AAED,WAAA,cAAA;AACD;;;WAEDwB,4BAAkB,KAAlBA,EAA0B;AACxB,UAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,UAAM,YAAN,GAAA,KAAA,CAAM,YAAN;AAAA,UAAM,gBAAN,GAAA,KAAA,CAAM,gBAAN;AAAA,UAAM,kBAAN,GAAA,KAAA,CAAM,kBAAN;AAAA,UAAM,MAAN,GAAA,KAAA,CAAM,MAAN;AAAA,UAAM,OAAN,GAAA,KAAA,CAAM,OAAN;AAAA,UAAM,OAAN,GAAA,KAAA,CAAM,OAAN;AAAA,UAAM,WAAN,GAAA,KAAA,CAAM,WAAN;AAAA,UASEV,UATF,GAAA,KAAA,CASEA,UATF;AAYA,aAAO;AACLL,QAAAA,YADK,EACLA,YADK;AAELC,QAAAA,gBAFK,EAELA,gBAFK;AAGLH,QAAAA,OAHK,EAGLA,OAHK;AAILC,QAAAA,OAJK,EAILA,OAJK;AAKLF,QAAAA,QALK,EAKLA,QALK;AAMLK,QAAAA,kBANK,EAMLA,kBANK;AAOLN,QAAAA,MAPK,EAOLA,MAPK;AAQLQ,QAAAA,WARK,EAQLA,WARK;AASLC,QAAAA,UAAAA,EAAAA;AATK,OAAP;AAWD;;;WAEDW,0BAAiB;AACf,UAAOT,OAAP,GAAkB,KAAlB,KAAA,CAAOA,OAAP;AACA,wBAA8B,KAA9B,KAAA;AAAA,UAAM,MAAN,eAAM,MAAN;AAAA,UAAeU,WAAf,eAAeA,WAAf;AACA,UAAMC,WAAW,GAAG,OAAO,CAAP,MAAA,CAAe,KAAA,OAAA,CAAf,QAAA,EAAsC;AAACf,QAAAA,MAAD,EAACA,MAAD;AAASc,QAAAA,WAAAA,EAAAA;AAAT,OAAtC,CAApB;AACA,UAAOT,QAAP,GAAA,OAAA,CAAOA,QAAP;AAEA,UAAMW,mBAAmB,GAAG,KAAA,KAAA,CAAA,QAAA,KAA5B,QAAA;AACA,UAAMC,cAAc,GAAG,KAAA,KAAA,CAAA,WAAA,KAAvB,WAAA;;AAEA,UAAIZ,QAAQ,KAAKW,mBAAmB,IAApC,cAAY,CAAZ,EAAyD;AACvD,aAAA,eAAA;AACD;;AAED,UAAA,cAAA,EAAoB;AAElB,aAAA,QAAA,CAAc;AAACD,UAAAA,WAAAA,EAAAA;AAAD,SAAd;AACD;;AAED,WAAA,KAAA,CAAA,QAAA,GAAA,QAAA;AACD;;;WAEDG,2BAAkB;AAChB,UAAOd,OAAP,GAAkB,KAAlB,KAAA,CAAOA,OAAP;AACA,UAAOlB,cAAP,GAAyB,KAAzB,KAAA,CAAOA,cAAP;;AAEA,UAAA,cAAA,EAAoB;AAClBA,QAAAA,cAAc,CAACkB,OAAO,CAAtBlB,aAAc,CAAdA;AACD;AACF;;;WAEDiC,qBAAW,IAAXA,EAAkB;AAChB,UAAMZ,KAAK,GAAG,KAAd,eAAc,EAAd;AACAA,MAAAA,KAAK,CAALA,KAAAA,CAAAA,UAAAA,CAAAA,IAAAA;;AAEA,UAAInB,IAAI,CAAR,SAAA,EAAoB;AAClB,aAAA,cAAA;AACD;AACF;;;WAEDgC,sBAAY,KAAZA,EAAY,IAAZA,EAA0B;AACxB,UAAMb,KAAK,GAAG,KAAd,eAAc,EAAd;AACAA,MAAAA,KAAK,CAALA,KAAAA,CAAAA,WAAAA,CAAAA,KAAAA;;AAEAA,MAAAA,KAAK,CAALA,cAAAA;;AAEA,UAAInB,IAAI,CAAR,SAAA,EAAoB;AAClB,aAAA,cAAA;AACD;AACF;;;WAEDiC,uBAAa,IAAbA,EAAoB;AAClB,UAAMd,KAAK,GAAG,KAAd,eAAc,EAAd;AACAA,MAAAA,KAAK,CAALA,KAAAA,CAAAA,YAAAA,CAAAA,IAAAA;AACD;;;WAIDvB,qBAAW,IAAXA,EAAkB;AAChB,UAAMuB,KAAK,GAAG,KAAd,eAAc,EAAd;AACA,yBAAmCA,KAAK,CAAxC,KAAA;AAAA,UAAM,IAAN,gBAAM,IAAN;AAAA,UAAM,WAAN,gBAAM,WAAN;AAAA,UAA0Be,KAA1B,gBAA0BA,KAA1B;AACA,UAAOC,MAAP,GAAA,IAAA,CAAOA,MAAP;AAEAnC,MAAAA,IAAI,CAAJA,GAAAA,GAAWoC,kBAAkB,CAAA,IAAA,EAA7BpC,IAA6B,CAA7BA;;AAEA,UAAA,WAAA,EAAiB;AACf,eAAOJ,WAAW,CAAlB,IAAkB,CAAlB;AACD;;AACD,UAAII,IAAI,CAAR,GAAA,EAAc;AACZ,eAAOkC,KAAK,CAAClC,IAAI,CAAL,GAAA,EAAW;AAACqC,UAAAA,QAAQ,EAAT,MAAA;AAAmBlB,UAAAA,KAAnB,EAAmBA,KAAnB;AAA0BgB,UAAAA,MAAAA,EAAAA;AAA1B,SAAX,CAAZ;AACD;;AACD,aAAA,IAAA;AACD;;;WAED5C,yBAAe,KAAfA,EAAuB;AACrB,aAAO,KAAA,KAAA,CAAA,eAAA,CAAP,KAAO,CAAP;AACD;;;WAED+C,qCAA4B;AAC1B,aAAO,CAAP,CAAA;AACD;;;WAEDC,+BAAoC;AAAA,UAArB,IAAqB,SAArB,IAAqB;AAAA,UAAdC,WAAc,SAAdA,WAAc;AAClCC,MAAAA,IAAI,CAAJA,IAAAA,GAAYD,WAAW,CAAXA,KAAAA,CAAZC,IAAAA;AACA,aAAA,IAAA;AACD;;;WAEDC,8BAAoB,IAApBA,EAA2B;AACzB,UAAID,IAAI,CAAR,WAAA,EAAsB;AACpBA,QAAAA,IAAI,CAAJA,WAAAA,CAAAA,mBAAAA,CAAAA,IAAAA;AACD;AACF;;;WAEDE,wBAAe;AAAA;;AACb,aAAO,KAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAA6B3C,UAAAA,IAAI,EAAI;AAC1C,YAAM4C,sBAAsB,GAAG,KAAA,CAAA,yBAAA,CAA/B,IAA+B,CAA/B;;AAEA,YAAI,CAAC5C,IAAI,CAAT,QAAA,EAAoB,CAApB,CAAA,MAEO,IAAI,CAACA,IAAI,CAAT,MAAA,EAAkB;AACvB,cAAM6C,MAAM,GAAG,KAAA,CAAA,eAAA,iCACV,KAAA,CAD+B,KAArB;AAEbC,YAAAA,EAAE,EAAA,GAAA,MAAA,CAAK,KAAA,CAAL,EAAA,EAAA,GAAA,EAAA,MAAA,CAAgB9C,IAAI,CAApB,CAAA,EAAA,GAAA,EAAA,MAAA,CAA0BA,IAAI,CAA9B,CAAA,EAAA,GAAA,EAAA,MAAA,CAAoCA,IAAI,CAFR,CAEhC,CAFW;AAGbZ,YAAAA,IAAI,EAAEY,IAAI,CAHwB,IAArB;AAIb+C,YAAAA,OAAO,EAJ2B,CAArB;AAKb/C,YAAAA,IAAAA,EAAAA;AALa,aAAf;;AAOAA,UAAAA,IAAI,CAAJA,MAAAA,GAAc,OAAO,CAAA,MAAA,EAAP,OAAO,CAAP,CAAA,GAAA,CAA6BmB,UAAAA,KAAK;AAAA,mBAC9C,KAAK,CAAL,KAAA,CAAY;AACVnB,cAAAA,IADU,EACVA,IADU;AAEV4C,cAAAA,sBAAAA,EAAAA;AAFU,aAAZ,CAD8C;AAAA,WAAlC,CAAd5C;AARK,SAAA,MAcA,IACLA,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,KACAA,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,sBAAAA,KAFK,sBAAA,EAGL;AACAA,UAAAA,IAAI,CAAJA,MAAAA,GAAc,IAAI,CAAJ,MAAA,CAAA,GAAA,CAAgBmB,UAAAA,KAAK;AAAA,mBAAI,KAAK,CAAL,KAAA,CAAY;AAACyB,cAAAA,sBAAAA,EAAAA;AAAD,aAAZ,CAAJ;AAAA,WAArB,CAAd5C;AACD;;AACD,eAAOA,IAAI,CAAX,MAAA;AAzBF,OAAO,CAAP;AA2BD;;;WAEDgD,+BAAwB;AAAA,UAAR7B,KAAQ,SAARA,KAAQ;AACtB,aAAO,KAAA,KAAA,CAAA,OAAA,IAAsBA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAA7B,SAAA;AACD;;;;EA5MY,c;;SAAA,S;AA+Mf8B,SAAS,CAATA,SAAAA,GAAAA,WAAAA;AACAA,SAAS,CAATA,YAAAA,GAAAA,YAAAA","sourcesContent":["import {CompositeLayer, _flatten as flatten} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nimport Tileset2D, {STRATEGY_DEFAULT} from './tileset-2d';\nimport {urlType, getURLFromTemplate} from './utils';\n\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', optional: true, value: null, compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  onTileLoad: {type: 'function', value: tile => {}, compare: false},\n  onTileUnload: {type: 'function', value: tile => {}, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  extent: {type: 'array', optional: true, value: null, compare: true},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tileset: null,\n      isLoaded: false\n    };\n  }\n\n  finalizeState() {\n    this.state.tileset?.finalize();\n  }\n\n  get isLoaded() {\n    const {tileset} = this.state;\n    return tileset.selectedTiles.every(\n      tile => tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, changeFlags}) {\n    let {tileset} = this.state;\n    const createTileCache =\n      !tileset ||\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (createTileCache) {\n      if (tileset) {\n        tileset.finalize();\n      }\n      tileset = new Tileset2D({\n        ...this._getTilesetOptions(props),\n        getTileData: this.getTileData.bind(this),\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this),\n        onTileUnload: this._onTileUnload.bind(this)\n      });\n      this.setState({tileset});\n    } else if (changeFlags.propsChanged || changeFlags.updateTriggersChanged) {\n      tileset.setOptions(this._getTilesetOptions(props));\n      // if any props changed, delete the cached layers\n      this.state.tileset.tiles.forEach(tile => {\n        tile.layers = null;\n      });\n    }\n\n    this._updateTileset();\n  }\n\n  _getTilesetOptions(props) {\n    const {\n      tileSize,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy,\n      extent,\n      maxZoom,\n      minZoom,\n      maxRequests,\n      zoomOffset\n    } = props;\n\n    return {\n      maxCacheSize,\n      maxCacheByteSize,\n      maxZoom,\n      minZoom,\n      tileSize,\n      refinementStrategy,\n      extent,\n      maxRequests,\n      zoomOffset\n    };\n  }\n\n  _updateTileset() {\n    const {tileset} = this.state;\n    const {zRange, modelMatrix} = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {zRange, modelMatrix});\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n      this._onViewportLoad();\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onViewportLoad() {\n    const {tileset} = this.state;\n    const {onViewportLoad} = this.props;\n\n    if (onViewportLoad) {\n      onViewportLoad(tileset.selectedTiles);\n    }\n  }\n\n  _onTileLoad(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileLoad(tile);\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileError(error, tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileError(error);\n    // errorred tiles should not block rendering, are considered \"loaded\" with empty data\n    layer._updateTileset();\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileUnload(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileUnload(tile);\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile) {\n    const layer = this.getCurrentLayer();\n    const {data, getTileData, fetch} = layer.props;\n    const {signal} = tile;\n\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (tile.url) {\n      return fetch(tile.url, {propName: 'data', layer, signal});\n    }\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getHighlightedObjectIndex() {\n    return -1;\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  _updateAutoHighlight(info) {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  renderLayers() {\n    return this.state.tileset.tiles.map(tile => {\n      const highlightedObjectIndex = this.getHighlightedObjectIndex(tile);\n      // cache the rendered layer in the tile\n      if (!tile.isLoaded) {\n        // no op\n      } else if (!tile.layers) {\n        const layers = this.renderSubLayers({\n          ...this.props,\n          id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n          data: tile.data,\n          _offset: 0,\n          tile\n        });\n        tile.layers = flatten(layers, Boolean).map(layer =>\n          layer.clone({\n            tile,\n            highlightedObjectIndex\n          })\n        );\n      } else if (\n        tile.layers[0] &&\n        tile.layers[0].props.highlightedObjectIndex !== highlightedObjectIndex\n      ) {\n        tile.layers = tile.layers.map(layer => layer.clone({highlightedObjectIndex}));\n      }\n      return tile.layers;\n    });\n  }\n\n  filterSubLayer({layer}) {\n    return this.props.visible && layer.props.tile.isVisible;\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}