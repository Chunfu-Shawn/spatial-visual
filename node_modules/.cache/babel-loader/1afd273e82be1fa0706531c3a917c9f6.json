{"ast":null,"code":"import _classCallCheck from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { readFeature, classifyRings } from '../../helpers/mapbox-util-functions';\n\nvar VectorTileFeature = /*#__PURE__*/function () {\n  function VectorTileFeature(pbf, end, extent, keys, values) {\n    _classCallCheck(this, VectorTileFeature);\n\n    _defineProperty(this, \"properties\", void 0);\n\n    _defineProperty(this, \"extent\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"_pbf\", void 0);\n\n    _defineProperty(this, \"_geometry\", void 0);\n\n    _defineProperty(this, \"_keys\", void 0);\n\n    _defineProperty(this, \"_values\", void 0);\n\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    pbf.readFields(readFeature, this, end);\n  }\n\n  _createClass(VectorTileFeature, [{\n    key: \"loadGeometry\",\n    value: function loadGeometry() {\n      var pbf = this._pbf;\n      pbf.pos = this._geometry;\n      var end = pbf.readVarint() + pbf.pos;\n      var cmd = 1;\n      var length = 0;\n      var x = 0;\n      var y = 0;\n      var lines = [];\n      var line;\n\n      while (pbf.pos < end) {\n        if (length <= 0) {\n          var cmdLen = pbf.readVarint();\n          cmd = cmdLen & 0x7;\n          length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n          x += pbf.readSVarint();\n          y += pbf.readSVarint();\n\n          if (cmd === 1) {\n            if (line) lines.push(line);\n            line = [];\n          }\n\n          if (line) line.push([x, y]);\n        } else if (cmd === 7) {\n          if (line) {\n            line.push(line[0].slice());\n          }\n        } else {\n          throw new Error(\"unknown command \".concat(cmd));\n        }\n      }\n\n      if (line) lines.push(line);\n      return lines;\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      var pbf = this._pbf;\n      pbf.pos = this._geometry;\n      var end = pbf.readVarint() + pbf.pos;\n      var cmd = 1;\n      var length = 0;\n      var x = 0;\n      var y = 0;\n      var x1 = Infinity;\n      var x2 = -Infinity;\n      var y1 = Infinity;\n      var y2 = -Infinity;\n\n      while (pbf.pos < end) {\n        if (length <= 0) {\n          var cmdLen = pbf.readVarint();\n          cmd = cmdLen & 0x7;\n          length = cmdLen >> 3;\n        }\n\n        length--;\n\n        if (cmd === 1 || cmd === 2) {\n          x += pbf.readSVarint();\n          y += pbf.readSVarint();\n          if (x < x1) x1 = x;\n          if (x > x2) x2 = x;\n          if (y < y1) y1 = y;\n          if (y > y2) y2 = y;\n        } else if (cmd !== 7) {\n          throw new Error(\"unknown command \".concat(cmd));\n        }\n      }\n\n      return [x1, y1, x2, y2];\n    }\n  }, {\n    key: \"_toGeoJSON\",\n    value: function _toGeoJSON(transform) {\n      var coords = this.loadGeometry();\n      var type = VectorTileFeature.types[this.type];\n      var i;\n      var j;\n\n      switch (this.type) {\n        case 1:\n          var points = [];\n\n          for (i = 0; i < coords.length; i++) {\n            points[i] = coords[i][0];\n          }\n\n          coords = points;\n          transform(coords, this);\n          break;\n\n        case 2:\n          for (i = 0; i < coords.length; i++) {\n            transform(coords[i], this);\n          }\n\n          break;\n\n        case 3:\n          coords = classifyRings(coords);\n\n          for (i = 0; i < coords.length; i++) {\n            for (j = 0; j < coords[i].length; j++) {\n              transform(coords[i][j], this);\n            }\n          }\n\n          break;\n      }\n\n      if (coords.length === 1) {\n        coords = coords[0];\n      } else {\n        type = \"Multi\".concat(type);\n      }\n\n      var result = {\n        type: 'Feature',\n        geometry: {\n          type: type,\n          coordinates: coords\n        },\n        properties: this.properties\n      };\n\n      if (this.id !== null) {\n        result.id = this.id;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"toGeoJSON\",\n    value: function toGeoJSON(options) {\n      if (typeof options === 'function') {\n        return this._toGeoJSON(options);\n      }\n\n      var x = options.x,\n          y = options.y,\n          z = options.z;\n      var size = this.extent * Math.pow(2, z);\n      var x0 = this.extent * x;\n      var y0 = this.extent * y;\n\n      function project(line) {\n        for (var j = 0; j < line.length; j++) {\n          var p = line[j];\n          p[0] = (p[0] + x0) * 360 / size - 180;\n          var y2 = 180 - (p[1] + y0) * 360 / size;\n          p[1] = 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;\n        }\n      }\n\n      return this._toGeoJSON(project);\n    }\n  }], [{\n    key: \"types\",\n    get: function get() {\n      return ['Unknown', 'Point', 'LineString', 'Polygon'];\n    }\n  }]);\n\n  return VectorTileFeature;\n}();\n\nexport { VectorTileFeature as default };","map":{"version":3,"sources":["../../../../src/lib/mapbox-vector-tile/vector-tile-feature.ts"],"names":["types","constructor","pbf","loadGeometry","end","cmd","length","x","y","lines","cmdLen","line","bbox","x1","x2","y1","y2","_toGeoJSON","coords","type","VectorTileFeature","points","i","transform","classifyRings","j","result","geometry","coordinates","properties","toGeoJSON","z","size","Math","x0","y0","p"],"mappings":"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","sourcesContent":["// This code is forked from https://github.com/mapbox/vector-tile-js under BSD 3-clause license.\nimport Protobuf from 'pbf';\nimport {MvtMapboxCoordinates, MvtMapboxGeometry} from '../types';\nimport {readFeature, classifyRings} from '../../helpers/mapbox-util-functions';\n\nexport default class VectorTileFeature {\n  properties: {[x: string]: string | number | boolean | null};\n  extent: any;\n  type: number;\n  id: number | null;\n  _pbf: Protobuf;\n  _geometry: number;\n  _keys: string[];\n  _values: (string | number | boolean | null)[];\n  static get types() {\n    return ['Unknown', 'Point', 'LineString', 'Polygon'];\n  }\n\n  constructor(\n    pbf: Protobuf,\n    end: number,\n    extent: any,\n    keys: string[],\n    values: (string | number | boolean | null)[]\n  ) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n\n    pbf.readFields(readFeature, this, end);\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  loadGeometry(): MvtMapboxGeometry {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    const lines: number[][][] = [];\n    let line: number[][] | undefined;\n\n    while (pbf.pos < end) {\n      if (length <= 0) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // moveTo\n          if (line) lines.push(line);\n          line = [];\n        }\n        if (line) line.push([x, y]);\n      } else if (cmd === 7) {\n        // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n        if (line) {\n          line.push(line[0].slice()); // closePolygon\n        }\n      } else {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    if (line) lines.push(line);\n\n    return lines;\n  }\n\n  // eslint-disable-next-line max-statements\n  bbox() {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    const end = pbf.readVarint() + pbf.pos;\n    let cmd = 1;\n    let length = 0;\n    let x = 0;\n    let y = 0;\n    let x1 = Infinity;\n    let x2 = -Infinity;\n    let y1 = Infinity;\n    let y2 = -Infinity;\n\n    while (pbf.pos < end) {\n      if (length <= 0) {\n        const cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n        if (x < x1) x1 = x;\n        if (x > x2) x2 = x;\n        if (y < y1) y1 = y;\n        if (y > y2) y2 = y;\n      } else if (cmd !== 7) {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    return [x1, y1, x2, y2];\n  }\n\n  _toGeoJSON(transform) {\n    let coords = this.loadGeometry();\n    let type = VectorTileFeature.types[this.type];\n    let i: number;\n    let j: number;\n\n    // eslint-disable-next-line default-case\n    switch (this.type) {\n      case 1:\n        const points: number[] = [];\n        for (i = 0; i < coords.length; i++) {\n          points[i] = coords[i][0];\n        }\n        coords = points;\n        transform(coords, this);\n        break;\n\n      case 2:\n        for (i = 0; i < coords.length; i++) {\n          transform(coords[i], this);\n        }\n        break;\n\n      case 3:\n        coords = classifyRings(coords);\n        for (i = 0; i < coords.length; i++) {\n          for (j = 0; j < coords[i].length; j++) {\n            transform(coords[i][j], this);\n          }\n        }\n        break;\n    }\n\n    if (coords.length === 1) {\n      coords = coords[0];\n    } else {\n      type = `Multi${type}`;\n    }\n\n    const result: MvtMapboxCoordinates = {\n      type: 'Feature',\n      geometry: {\n        type,\n        coordinates: coords\n      },\n      properties: this.properties\n    };\n\n    if (this.id !== null) {\n      result.id = this.id;\n    }\n\n    return result;\n  }\n\n  toGeoJSON(\n    options: {x: number; y: number; z: number} | ((data: number[], feature: {extent: any}) => void)\n  ): MvtMapboxCoordinates {\n    if (typeof options === 'function') {\n      return this._toGeoJSON(options);\n    }\n    const {x, y, z} = options;\n    const size = this.extent * Math.pow(2, z);\n    const x0 = this.extent * x;\n    const y0 = this.extent * y;\n\n    function project(line: number[]) {\n      for (let j = 0; j < line.length; j++) {\n        const p = line[j];\n        p[0] = ((p[0] + x0) * 360) / size - 180;\n        const y2 = 180 - ((p[1] + y0) * 360) / size;\n        p[1] = (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90;\n      }\n    }\n    return this._toGeoJSON(project);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}