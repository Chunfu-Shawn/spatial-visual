{"ast":null,"code":"/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices) {\n    let signal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    return await Promise.all(slices.map(slice => this.fetchSlice(slice, signal)));\n  }\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n\n\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n\n\n  get fileSize() {\n    return null;\n  }\n\n  async close() {// no-op by default\n  }\n\n}","map":{"version":3,"sources":["/Users/chunfu/IdeaProjects/spatial-visual/node_modules/geotiff/src/source/basesource.js"],"names":["BaseSource","fetch","slices","signal","undefined","Promise","all","map","slice","fetchSlice","Error","fileSize","close"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,UAAN,CAAiB;AACtB;AACF;AACA;AACA;AACA;AACa,QAALC,KAAK,CAACC,MAAD,EAA6B;AAAA,QAApBC,MAAoB,uEAAXC,SAAW;AACtC,WAAO,MAAMC,OAAO,CAACC,GAAR,CACXJ,MAAM,CAACK,GAAP,CAAYC,KAAD,IAAW,KAAKC,UAAL,CAAgBD,KAAhB,EAAuBL,MAAvB,CAAtB,CADW,CAAb;AAGD;AAED;AACF;AACA;AACA;AACA;;;AACkB,QAAVM,UAAU,CAACD,KAAD,EAAQ;AACtB,UAAM,IAAIE,KAAJ,CAAW,qBAAoBF,KAAM,gCAArC,CAAN;AACD;AAED;AACF;AACA;;;AACc,MAARG,QAAQ,GAAG;AACb,WAAO,IAAP;AACD;;AAEU,QAALC,KAAK,GAAG,CACZ;AACD;;AA9BqB","sourcesContent":["/**\n * @typedef Slice\n * @property {number} offset\n * @property {number} length\n */\n\nexport class BaseSource {\n  /**\n   *\n   * @param {Slice[]} slices\n   * @returns {ArrayBuffer[]}\n   */\n  async fetch(slices, signal = undefined) {\n    return await Promise.all(\n      slices.map((slice) => this.fetchSlice(slice, signal)),\n    );\n  }\n\n  /**\n   *\n   * @param {Slice} slice\n   * @returns {ArrayBuffer}\n   */\n  async fetchSlice(slice) {\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\n  }\n\n  /**\n   * Returns the filesize if already determined and null otherwise\n   */\n  get fileSize() {\n    return null;\n  }\n\n  async close() {\n    // no-op by default\n  }\n}\n"]},"metadata":{},"sourceType":"module"}