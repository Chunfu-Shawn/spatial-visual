{"ast":null,"code":"import _classCallCheck from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { createDefaultStyle, DEFAULT_OPTIONS } from './defaults';\nimport { formatValue } from './formatValue';\nimport { calculatePosition } from './position';\n/**\n * The tooltip handler class.\n */\n\nexport var Handler = /*#__PURE__*/function () {\n  /**\n   * Create the tooltip handler and initialize the element and style.\n   *\n   * @param options Tooltip Options\n   */\n  function Handler(options) {\n    _classCallCheck(this, Handler);\n\n    this.options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    var elementId = this.options.id; // bind this to call\n\n    this.call = this.tooltipHandler.bind(this); // prepend a default stylesheet for tooltips to the head\n\n    if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {\n      var style = document.createElement('style');\n      style.setAttribute('id', this.options.styleId);\n      style.innerHTML = createDefaultStyle(elementId);\n      var head = document.head;\n\n      if (head.childNodes.length > 0) {\n        head.insertBefore(style, head.childNodes[0]);\n      } else {\n        head.appendChild(style);\n      }\n    } // append a div element that we use as a tooltip unless it already exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n    this.el = document.getElementById(elementId);\n\n    if (!this.el) {\n      this.el = document.createElement('div');\n      this.el.setAttribute('id', elementId);\n      this.el.classList.add('vg-tooltip');\n      document.body.appendChild(this.el);\n    }\n  }\n  /**\n   * The tooltip handler function.\n   */\n\n\n  _createClass(Handler, [{\n    key: \"tooltipHandler\",\n    value: function tooltipHandler(handler, event, item, value) {\n      // console.log(handler, event, item, value);\n      // hide tooltip for null, undefined, or empty string values\n      if (value == null || value === '') {\n        this.el.classList.remove('visible', \"\".concat(this.options.theme, \"-theme\"));\n        return;\n      } // set the tooltip content\n\n\n      this.el.innerHTML = formatValue(value, this.options.sanitize, this.options.maxDepth); // make the tooltip visible\n\n      this.el.classList.add('visible', \"\".concat(this.options.theme, \"-theme\"));\n\n      var _calculatePosition = calculatePosition(event, this.el.getBoundingClientRect(), this.options.offsetX, this.options.offsetY),\n          x = _calculatePosition.x,\n          y = _calculatePosition.y;\n\n      this.el.setAttribute('style', \"top: \".concat(y, \"px; left: \").concat(x, \"px\"));\n    }\n  }]);\n\n  return Handler;\n}();","map":{"version":3,"sources":["../../src/Handler.ts"],"names":[],"mappings":";;AAEA,SAAQ,kBAAR,EAA4B,eAA5B,QAA2D,YAA3D;AACA,SAAQ,WAAR,QAA0B,eAA1B;AACA,SAAQ,iBAAR,QAAgC,YAAhC;AAEA;;AAEG;;AACH,WAAa,OAAb;AAgBE;;;;AAIG;AACH,mBAAY,OAAZ,EAA6B;AAAA;;AAC3B,SAAK,OAAL,GAAY,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,eAAP,CAAA,EAA2B,OAA3B,CAAZ;AACA,QAAM,SAAS,GAAG,KAAK,OAAL,CAAa,EAA/B,CAF2B,CAI3B;;AACA,SAAK,IAAL,GAAY,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAAZ,CAL2B,CAO3B;;AACA,QAAI,CAAC,KAAK,OAAL,CAAa,mBAAd,IAAqC,CAAC,QAAQ,CAAC,cAAT,CAAwB,KAAK,OAAL,CAAa,OAArC,CAA1C,EAAyF;AACvF,UAAM,KAAK,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAAd;AACA,MAAA,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB,KAAK,OAAL,CAAa,OAAtC;AACA,MAAA,KAAK,CAAC,SAAN,GAAkB,kBAAkB,CAAC,SAAD,CAApC;AAEA,UAAM,IAAI,GAAG,QAAQ,CAAC,IAAtB;;AACA,UAAI,IAAI,CAAC,UAAL,CAAgB,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,QAAA,IAAI,CAAC,YAAL,CAAkB,KAAlB,EAAyB,IAAI,CAAC,UAAL,CAAgB,CAAhB,CAAzB;AACD,OAFD,MAEO;AACL,QAAA,IAAI,CAAC,WAAL,CAAiB,KAAjB;AACD;AACF,KAnB0B,CAqB3B;AACA;;;AACA,SAAK,EAAL,GAAU,QAAQ,CAAC,cAAT,CAAwB,SAAxB,CAAV;;AACA,QAAI,CAAC,KAAK,EAAV,EAAc;AACZ,WAAK,EAAL,GAAU,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAV;AACA,WAAK,EAAL,CAAQ,YAAR,CAAqB,IAArB,EAA2B,SAA3B;AACA,WAAK,EAAL,CAAQ,SAAR,CAAkB,GAAlB,CAAsB,YAAtB;AAEA,MAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,KAAK,EAA/B;AACD;AACF;AAED;;AAEG;;;AAxDL;AAAA;AAAA,WAyDU,wBAAe,OAAf,EAA6B,KAA7B,EAAgD,IAAhD,EAA2D,KAA3D,EAAqE;AAC3E;AAEA;AACA,UAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAK,EAA/B,EAAmC;AACjC,aAAK,EAAL,CAAQ,SAAR,CAAkB,MAAlB,CAAyB,SAAzB,YAAuC,KAAK,OAAL,CAAa,KAApD;AACA;AACD,OAP0E,CAS3E;;;AACA,WAAK,EAAL,CAAQ,SAAR,GAAoB,WAAW,CAAC,KAAD,EAAQ,KAAK,OAAL,CAAa,QAArB,EAA+B,KAAK,OAAL,CAAa,QAA5C,CAA/B,CAV2E,CAY3E;;AACA,WAAK,EAAL,CAAQ,SAAR,CAAkB,GAAlB,CAAsB,SAAtB,YAAoC,KAAK,OAAL,CAAa,KAAjD;;AAEA,+BAAe,iBAAiB,CAC9B,KAD8B,EAE9B,KAAK,EAAL,CAAQ,qBAAR,EAF8B,EAG9B,KAAK,OAAL,CAAa,OAHiB,EAI9B,KAAK,OAAL,CAAa,OAJiB,CAAhC;AAAA,UAAO,CAAP,sBAAO,CAAP;AAAA,UAAU,CAAV,sBAAU,CAAV;;AAOA,WAAK,EAAL,CAAQ,YAAR,CAAqB,OAArB,iBAAsC,CAAtC,uBAAoD,CAApD;AACD;AAhFH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["import { createDefaultStyle, DEFAULT_OPTIONS } from './defaults';\nimport { formatValue } from './formatValue';\nimport { calculatePosition } from './position';\n/**\n * The tooltip handler class.\n */\nexport class Handler {\n    /**\n     * Create the tooltip handler and initialize the element and style.\n     *\n     * @param options Tooltip Options\n     */\n    constructor(options) {\n        this.options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n        const elementId = this.options.id;\n        // bind this to call\n        this.call = this.tooltipHandler.bind(this);\n        // prepend a default stylesheet for tooltips to the head\n        if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {\n            const style = document.createElement('style');\n            style.setAttribute('id', this.options.styleId);\n            style.innerHTML = createDefaultStyle(elementId);\n            const head = document.head;\n            if (head.childNodes.length > 0) {\n                head.insertBefore(style, head.childNodes[0]);\n            }\n            else {\n                head.appendChild(style);\n            }\n        }\n        // append a div element that we use as a tooltip unless it already exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.el = document.getElementById(elementId);\n        if (!this.el) {\n            this.el = document.createElement('div');\n            this.el.setAttribute('id', elementId);\n            this.el.classList.add('vg-tooltip');\n            document.body.appendChild(this.el);\n        }\n    }\n    /**\n     * The tooltip handler function.\n     */\n    tooltipHandler(handler, event, item, value) {\n        // console.log(handler, event, item, value);\n        // hide tooltip for null, undefined, or empty string values\n        if (value == null || value === '') {\n            this.el.classList.remove('visible', `${this.options.theme}-theme`);\n            return;\n        }\n        // set the tooltip content\n        this.el.innerHTML = formatValue(value, this.options.sanitize, this.options.maxDepth);\n        // make the tooltip visible\n        this.el.classList.add('visible', `${this.options.theme}-theme`);\n        const { x, y } = calculatePosition(event, this.el.getBoundingClientRect(), this.options.offsetX, this.options.offsetY);\n        this.el.setAttribute('style', `top: ${y}px; left: ${x}px`);\n    }\n}\n//# sourceMappingURL=Handler.js.map"]},"metadata":{},"sourceType":"module"}