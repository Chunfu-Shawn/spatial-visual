{"ast":null,"code":"import _classCallCheck from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { duplicate, hash as _hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\n\nexport var FoldTransformNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(FoldTransformNode, _DataFlowNode);\n\n  var _super = _createSuper(FoldTransformNode);\n\n  function FoldTransformNode(parent, transform) {\n    var _this;\n\n    _classCallCheck(this, FoldTransformNode);\n\n    var _a, _b, _c;\n\n    _this = _super.call(this, parent);\n    _this.transform = transform;\n    _this.transform = duplicate(transform); // duplicate to prevent side effects\n\n    var specifiedAs = (_a = _this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];\n    _this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'key', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'value'];\n    return _this;\n  }\n\n  _createClass(FoldTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new FoldTransformNode(null, duplicate(this.transform));\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      return new Set(this.transform.fold);\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(this.transform.as);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"FoldTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var _this$transform = this.transform,\n          fold = _this$transform.fold,\n          as = _this$transform.as;\n      var result = {\n        type: 'fold',\n        fields: fold,\n        as: as\n      };\n      return result;\n    }\n  }]);\n\n  return FoldTransformNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/fold.ts"],"names":[],"mappings":";;;;AAEA,SAAQ,SAAR,EAAmB,IAAI,IAAJ,KAAnB,QAA8B,YAA9B;AACA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;AAEG;;AACH,WAAa,iBAAb;AAAA;;AAAA;;AAKE,6BAAY,MAAZ,EAA0C,SAA1C,EAAkE;AAAA;;AAAA;;;;AAChE,8BAAM,MAAN;AADwC,UAAA,SAAA,GAAA,SAAA;AAExC,UAAK,SAAL,GAAiB,SAAS,CAAC,SAAD,CAA1B,CAFgE,CAEzB;;AACvC,QAAM,WAAW,GAAA,CAAA,EAAA,GAAG,MAAK,SAAL,CAAe,EAAlB,MAAoB,IAApB,IAAoB,EAAA,KAAA,KAAA,CAApB,GAAoB,EAApB,GAAwB,CAAC,SAAD,EAAY,SAAZ,CAAzC;AACA,UAAK,SAAL,CAAe,EAAf,GAAoB,CAAA,CAAA,EAAA,GAAC,WAAW,CAAC,CAAD,CAAZ,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,EAAf,GAAmB,KAAnB,EAAwB,CAAA,EAAA,GAAE,WAAW,CAAC,CAAD,CAAb,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,EAAhB,GAAoB,OAA5C,CAApB;AAJgE;AAKjE;;AAVH;AAAA;AAAA,WACS,iBAAK;AACV,aAAO,IAAI,iBAAJ,CAAsB,IAAtB,EAA4B,SAAS,CAAC,KAAK,SAAN,CAArC,CAAP;AACD;AAHH;AAAA;AAAA,WAYS,2BAAe;AACpB,aAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,IAAvB,CAAP;AACD;AAdH;AAAA;AAAA,WAgBS,0BAAc;AACnB,aAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,EAAvB,CAAP;AACD;AAlBH;AAAA;AAAA,WAoBS,gBAAI;AACT,qCAAwB,KAAI,CAAC,KAAK,SAAN,CAA5B;AACD;AAtBH;AAAA;AAAA,WAwBS,oBAAQ;AACb,4BAAmB,KAAK,SAAxB;AAAA,UAAO,IAAP,mBAAO,IAAP;AAAA,UAAa,EAAb,mBAAa,EAAb;AACA,UAAM,MAAM,GAAoB;AAC9B,QAAA,IAAI,EAAE,MADwB;AAE9B,QAAA,MAAM,EAAE,IAFsB;AAG9B,QAAA,EAAE,EAAF;AAH8B,OAAhC;AAKA,aAAO,MAAP;AACD;AAhCH;;AAAA;AAAA,EAAuC,YAAvC","sourceRoot":"","sourcesContent":["import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FoldTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        var _a, _b, _c;\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const specifiedAs = (_a = this.transform.as) !== null && _a !== void 0 ? _a : [undefined, undefined];\n        this.transform.as = [(_b = specifiedAs[0]) !== null && _b !== void 0 ? _b : 'key', (_c = specifiedAs[1]) !== null && _c !== void 0 ? _c : 'value'];\n    }\n    clone() {\n        return new FoldTransformNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set(this.transform.fold);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `FoldTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { fold, as } = this.transform;\n        const result = {\n            type: 'fold',\n            fields: fold,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=fold.js.map"]},"metadata":{},"sourceType":"module"}