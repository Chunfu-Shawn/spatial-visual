{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n}); // ==ClosureCompiler==\n// @output_file_name default.js\n// @compilation_level SIMPLE_OPTIMIZATIONS\n// ==/ClosureCompiler==\n// module.exports = {\n//     parse: parse,\n//     simplify: simplify,\n//     simplifyLostLess: simplifyLostLess,\n//     filter: filter,\n//     stringify: stringify,\n//     toContentString: toContentString,\n//     getElementById: getElementById,\n//     getElementsByClassName: getElementsByClassName,\n//     transformStream: transformStream,\n// };\n\n/**\n * @author: Tobias Nickel\n * @created: 06.04.2015\n * I needed a small xmlparser chat can be used in a worker.\n */\n\n/**\n * @typedef tNode \n * @property {string} tagName \n * @property {object} attributes\n * @property {(tNode|string)[]} children \n **/\n\n/**\n * @typedef TParseOptions\n * @property {number} [pos]\n * @property {string[]} [noChildNodes]\n * @property {boolean} [setPos]\n * @property {boolean} [keepComments] \n * @property {boolean} [keepWhitespace]\n * @property {boolean} [simplify]\n * @property {(a: tNode, b: tNode) => boolean} [filter]\n */\n\n/**\n * parseXML / html into a DOM Object. with no validation and some failur tolerance\n * @param {string} S your XML to parse\n * @param {TParseOptions} [options]  all other options:\n * @return {(tNode | string)[]}\n */\n\nfunction parse(S, options) {\n  \"txml\";\n\n  options = options || {};\n  var pos = options.pos || 0;\n  var keepComments = !!options.keepComments;\n  var keepWhitespace = !!options.keepWhitespace;\n  var openBracket = \"<\";\n  var openBracketCC = \"<\".charCodeAt(0);\n  var closeBracket = \">\";\n  var closeBracketCC = \">\".charCodeAt(0);\n  var minusCC = \"-\".charCodeAt(0);\n  var slashCC = \"/\".charCodeAt(0);\n  var exclamationCC = '!'.charCodeAt(0);\n  var singleQuoteCC = \"'\".charCodeAt(0);\n  var doubleQuoteCC = '\"'.charCodeAt(0);\n  var openCornerBracketCC = '['.charCodeAt(0);\n  var closeCornerBracketCC = ']'.charCodeAt(0);\n  /**\n   * parsing a list of entries\n   */\n\n  function parseChildren(tagName) {\n    var children = [];\n\n    while (S[pos]) {\n      if (S.charCodeAt(pos) == openBracketCC) {\n        if (S.charCodeAt(pos + 1) === slashCC) {\n          var closeStart = pos + 2;\n          pos = S.indexOf(closeBracket, pos);\n          var closeTag = S.substring(closeStart, pos);\n\n          if (closeTag.indexOf(tagName) == -1) {\n            var parsedText = S.substring(0, pos).split('\\n');\n            throw new Error('Unexpected close tag\\nLine: ' + (parsedText.length - 1) + '\\nColumn: ' + (parsedText[parsedText.length - 1].length + 1) + '\\nChar: ' + S[pos]);\n          }\n\n          if (pos + 1) pos += 1;\n          return children;\n        } else if (S.charCodeAt(pos + 1) === exclamationCC) {\n          if (S.charCodeAt(pos + 2) == minusCC) {\n            //comment support\n            var startCommentPos = pos;\n\n            while (pos !== -1 && !(S.charCodeAt(pos) === closeBracketCC && S.charCodeAt(pos - 1) == minusCC && S.charCodeAt(pos - 2) == minusCC && pos != -1)) {\n              pos = S.indexOf(closeBracket, pos + 1);\n            }\n\n            if (pos === -1) {\n              pos = S.length;\n            }\n\n            if (keepComments) {\n              children.push(S.substring(startCommentPos, pos + 1));\n            }\n          } else if (S.charCodeAt(pos + 2) === openCornerBracketCC && S.charCodeAt(pos + 8) === openCornerBracketCC && S.substr(pos + 3, 5).toLowerCase() === 'cdata') {\n            // cdata\n            var cdataEndIndex = S.indexOf(']]>', pos);\n\n            if (cdataEndIndex == -1) {\n              children.push(S.substr(pos + 9));\n              pos = S.length;\n            } else {\n              children.push(S.substring(pos + 9, cdataEndIndex));\n              pos = cdataEndIndex + 3;\n            }\n\n            continue;\n          } else {\n            // doctypesupport\n            var startDoctype = pos + 1;\n            pos += 2;\n            var encapsuled = false;\n\n            while ((S.charCodeAt(pos) !== closeBracketCC || encapsuled === true) && S[pos]) {\n              if (S.charCodeAt(pos) === openCornerBracketCC) {\n                encapsuled = true;\n              } else if (encapsuled === true && S.charCodeAt(pos) === closeCornerBracketCC) {\n                encapsuled = false;\n              }\n\n              pos++;\n            }\n\n            children.push(S.substring(startDoctype, pos));\n          }\n\n          pos++;\n          continue;\n        }\n\n        var node = parseNode();\n        children.push(node);\n\n        if (node.tagName[0] === '?') {\n          children.push.apply(children, _toConsumableArray(node.children));\n          node.children = [];\n        }\n      } else {\n        var text = parseText();\n\n        if (keepWhitespace) {\n          if (text.length > 0) {\n            children.push(text);\n          }\n        } else {\n          var trimmed = text.trim();\n\n          if (trimmed.length > 0) {\n            children.push(trimmed);\n          }\n        }\n\n        pos++;\n      }\n    }\n\n    return children;\n  }\n  /**\n   *    returns the text outside of texts until the first '<'\n   */\n\n\n  function parseText() {\n    var start = pos;\n    pos = S.indexOf(openBracket, pos) - 1;\n    if (pos === -2) pos = S.length;\n    return S.slice(start, pos + 1);\n  }\n  /**\n   *    returns text until the first nonAlphabetic letter\n   */\n\n\n  var nameSpacer = '\\r\\n\\t>/= ';\n\n  function parseName() {\n    var start = pos;\n\n    while (nameSpacer.indexOf(S[pos]) === -1 && S[pos]) {\n      pos++;\n    }\n\n    return S.slice(start, pos);\n  }\n  /**\n   *    is parsing a node, including tagName, Attributes and its children,\n   * to parse children it uses the parseChildren again, that makes the parsing recursive\n   */\n\n\n  var NoChildNodes = options.noChildNodes || ['img', 'br', 'input', 'meta', 'link', 'hr'];\n\n  function parseNode() {\n    pos++;\n    var tagName = parseName();\n    var attributes = {};\n    var children = []; // parsing attributes\n\n    while (S.charCodeAt(pos) !== closeBracketCC && S[pos]) {\n      var c = S.charCodeAt(pos);\n\n      if (c > 64 && c < 91 || c > 96 && c < 123) {\n        //if('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(S[pos])!==-1 ){\n        var name = parseName(); // search beginning of the string\n\n        var code = S.charCodeAt(pos);\n\n        while (code && code !== singleQuoteCC && code !== doubleQuoteCC && !(code > 64 && code < 91 || code > 96 && code < 123) && code !== closeBracketCC) {\n          pos++;\n          code = S.charCodeAt(pos);\n        }\n\n        if (code === singleQuoteCC || code === doubleQuoteCC) {\n          var value = parseString();\n\n          if (pos === -1) {\n            return {\n              tagName: tagName,\n              attributes: attributes,\n              children: children\n            };\n          }\n        } else {\n          value = null;\n          pos--;\n        }\n\n        attributes[name] = value;\n      }\n\n      pos++;\n    } // optional parsing of children\n\n\n    if (S.charCodeAt(pos - 1) !== slashCC) {\n      if (tagName == \"script\") {\n        var start = pos + 1;\n        pos = S.indexOf('</script>', pos);\n        children = [S.slice(start, pos)];\n        pos += 9;\n      } else if (tagName == \"style\") {\n        var start = pos + 1;\n        pos = S.indexOf('</style>', pos);\n        children = [S.slice(start, pos)];\n        pos += 8;\n      } else if (NoChildNodes.indexOf(tagName) === -1) {\n        pos++;\n        children = parseChildren(tagName);\n      } else {\n        pos++;\n      }\n    } else {\n      pos++;\n    }\n\n    return {\n      tagName: tagName,\n      attributes: attributes,\n      children: children\n    };\n  }\n  /**\n   *    is parsing a string, that starts with a char and with the same usually  ' or \"\n   */\n\n\n  function parseString() {\n    var startChar = S[pos];\n    var startpos = pos + 1;\n    pos = S.indexOf(startChar, startpos);\n    return S.slice(startpos, pos);\n  }\n  /**\n   *\n   */\n\n\n  function findElements() {\n    var r = new RegExp('\\\\s' + options.attrName + '\\\\s*=[\\'\"]' + options.attrValue + '[\\'\"]').exec(S);\n\n    if (r) {\n      return r.index;\n    } else {\n      return -1;\n    }\n  }\n\n  var out = null;\n\n  if (options.attrValue !== undefined) {\n    options.attrName = options.attrName || 'id';\n    var out = [];\n\n    while ((pos = findElements()) !== -1) {\n      pos = S.lastIndexOf('<', pos);\n\n      if (pos !== -1) {\n        out.push(parseNode());\n      }\n\n      S = S.substr(pos);\n      pos = 0;\n    }\n  } else if (options.parseNode) {\n    out = parseNode();\n  } else {\n    out = parseChildren('');\n  }\n\n  if (options.filter) {\n    out = filter(out, options.filter);\n  }\n\n  if (options.simplify) {\n    return simplify(Array.isArray(out) ? out : [out]);\n  }\n\n  if (options.setPos) {\n    out.pos = pos;\n  }\n\n  return out;\n}\n/**\n * transform the DomObject to an object that is like the object of PHP`s simple_xmp_load_*() methods.\n * this format helps you to write that is more likely to keep your program working, even if there a small changes in the XML schema.\n * be aware, that it is not possible to reproduce the original xml from a simplified version, because the order of elements is not saved.\n * therefore your program will be more flexible and easier to read.\n *\n * @param {tNode[]} children the childrenList\n */\n\n\nfunction simplify(children) {\n  var out = {};\n\n  if (!children.length) {\n    return '';\n  }\n\n  if (children.length === 1 && typeof children[0] == 'string') {\n    return children[0];\n  } // map each object\n\n\n  children.forEach(function (child) {\n    if (typeof child !== 'object') {\n      return;\n    }\n\n    if (!out[child.tagName]) out[child.tagName] = [];\n    var kids = simplify(child.children);\n    out[child.tagName].push(kids);\n\n    if (Object.keys(child.attributes).length && typeof kids !== 'string') {\n      kids._attributes = child.attributes;\n    }\n  });\n\n  for (var i in out) {\n    if (out[i].length == 1) {\n      out[i] = out[i][0];\n    }\n  }\n\n  return out;\n}\n/**\n * similar to simplify, but lost less\n *\n * @param {tNode[]} children the childrenList\n */\n\n\nfunction simplifyLostLess(children) {\n  var parentAttributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var out = {};\n\n  if (!children.length) {\n    return out;\n  }\n\n  if (children.length === 1 && typeof children[0] == 'string') {\n    return Object.keys(parentAttributes).length ? {\n      _attributes: parentAttributes,\n      value: children[0]\n    } : children[0];\n  } // map each object\n\n\n  children.forEach(function (child) {\n    if (typeof child !== 'object') {\n      return;\n    }\n\n    if (!out[child.tagName]) out[child.tagName] = [];\n    var kids = simplifyLostLess(child.children || [], child.attributes);\n    out[child.tagName].push(kids);\n\n    if (Object.keys(child.attributes).length) {\n      kids._attributes = child.attributes;\n    }\n  });\n  return out;\n}\n/**\n * behaves the same way as Array.filter, if the filter method return true, the element is in the resultList\n * @params children{Array} the children of a node\n * @param f{function} the filter method\n */\n\n\nfunction filter(children, f) {\n  var dept = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var out = [];\n  children.forEach(function (child, i) {\n    if (typeof child === 'object' && f(child, i, dept, path)) out.push(child);\n\n    if (child.children) {\n      var kids = filter(child.children, f, dept + 1, (path ? path + '.' : '') + i + '.' + child.tagName);\n      out = out.concat(kids);\n    }\n  });\n  return out;\n}\n/**\n * stringify a previously parsed string object.\n * this is useful,\n *  1. to remove whitespace\n * 2. to recreate xml data, with some changed data.\n * @param {tNode} O the object to Stringify\n */\n\n\nfunction stringify(O) {\n  var out = '';\n\n  function writeChildren(O) {\n    if (O) {\n      for (var i = 0; i < O.length; i++) {\n        if (typeof O[i] == 'string') {\n          out += O[i].trim();\n        } else {\n          writeNode(O[i]);\n        }\n      }\n    }\n  }\n\n  function writeNode(N) {\n    out += \"<\" + N.tagName;\n\n    for (var i in N.attributes) {\n      if (N.attributes[i] === null) {\n        out += ' ' + i;\n      } else if (N.attributes[i].indexOf('\"') === -1) {\n        out += ' ' + i + '=\"' + N.attributes[i].trim() + '\"';\n      } else {\n        out += ' ' + i + \"='\" + N.attributes[i].trim() + \"'\";\n      }\n    }\n\n    if (N.tagName[0] === '?') {\n      out += '?>';\n      return;\n    }\n\n    out += '>';\n    writeChildren(N.children);\n    out += '</' + N.tagName + '>';\n  }\n\n  writeChildren(O);\n  return out;\n}\n/**\n * use this method to read the text content, of some node.\n * It is great if you have mixed content like:\n * this text has some <b>big</b> text and a <a href=''>link</a>\n * @return {string}\n */\n\n\nfunction toContentString(tDom) {\n  if (Array.isArray(tDom)) {\n    var out = '';\n    tDom.forEach(function (e) {\n      out += ' ' + toContentString(e);\n      out = out.trim();\n    });\n    return out;\n  } else if (typeof tDom === 'object') {\n    return toContentString(tDom.children);\n  } else {\n    return ' ' + tDom;\n  }\n}\n\nfunction getElementById(S, id, simplified) {\n  var out = parse(S, {\n    attrValue: id\n  });\n  return simplified ? tXml.simplify(out) : out[0];\n}\n\nfunction getElementsByClassName(S, classname, simplified) {\n  var out = parse(S, {\n    attrName: 'class',\n    attrValue: '[a-zA-Z0-9- ]*' + classname + '[a-zA-Z0-9- ]*'\n  });\n  return simplified ? tXml.simplify(out) : out;\n}\n\nexports.filter = filter;\nexports.getElementById = getElementById;\nexports.getElementsByClassName = getElementsByClassName;\nexports.parse = parse;\nexports.simplify = simplify;\nexports.simplifyLostLess = simplifyLostLess;\nexports.stringify = stringify;\nexports.toContentString = toContentString;","map":{"version":3,"sources":["/Users/chunfu/IdeaProjects/spatial-visual/node_modules/txml/txml.js"],"names":["Object","defineProperty","exports","value","parse","S","options","pos","keepComments","keepWhitespace","openBracket","openBracketCC","charCodeAt","closeBracket","closeBracketCC","minusCC","slashCC","exclamationCC","singleQuoteCC","doubleQuoteCC","openCornerBracketCC","closeCornerBracketCC","parseChildren","tagName","children","closeStart","indexOf","closeTag","substring","parsedText","split","Error","length","startCommentPos","push","substr","toLowerCase","cdataEndIndex","startDoctype","encapsuled","node","parseNode","text","parseText","trimmed","trim","start","slice","nameSpacer","parseName","NoChildNodes","noChildNodes","attributes","c","name","code","parseString","startChar","startpos","findElements","r","RegExp","attrName","attrValue","exec","index","out","undefined","lastIndexOf","filter","simplify","Array","isArray","setPos","forEach","child","kids","keys","_attributes","i","simplifyLostLess","parentAttributes","f","dept","path","concat","stringify","O","writeChildren","writeNode","N","toContentString","tDom","e","getElementById","id","simplified","tXml","getElementsByClassName","classname"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// ==ClosureCompiler==\n// @output_file_name default.js\n// @compilation_level SIMPLE_OPTIMIZATIONS\n// ==/ClosureCompiler==\n// module.exports = {\n//     parse: parse,\n//     simplify: simplify,\n//     simplifyLostLess: simplifyLostLess,\n//     filter: filter,\n//     stringify: stringify,\n//     toContentString: toContentString,\n//     getElementById: getElementById,\n//     getElementsByClassName: getElementsByClassName,\n//     transformStream: transformStream,\n// };\n\n/**\n * @author: Tobias Nickel\n * @created: 06.04.2015\n * I needed a small xmlparser chat can be used in a worker.\n */\n\n/**\n * @typedef tNode \n * @property {string} tagName \n * @property {object} attributes\n * @property {(tNode|string)[]} children \n **/\n\n/**\n * @typedef TParseOptions\n * @property {number} [pos]\n * @property {string[]} [noChildNodes]\n * @property {boolean} [setPos]\n * @property {boolean} [keepComments] \n * @property {boolean} [keepWhitespace]\n * @property {boolean} [simplify]\n * @property {(a: tNode, b: tNode) => boolean} [filter]\n */\n\n/**\n * parseXML / html into a DOM Object. with no validation and some failur tolerance\n * @param {string} S your XML to parse\n * @param {TParseOptions} [options]  all other options:\n * @return {(tNode | string)[]}\n */\nfunction parse(S, options) {\n    \"txml\";\n    options = options || {};\n\n    var pos = options.pos || 0;\n    var keepComments = !!options.keepComments;\n    var keepWhitespace = !!options.keepWhitespace;\n\n    var openBracket = \"<\";\n    var openBracketCC = \"<\".charCodeAt(0);\n    var closeBracket = \">\";\n    var closeBracketCC = \">\".charCodeAt(0);\n    var minusCC = \"-\".charCodeAt(0);\n    var slashCC = \"/\".charCodeAt(0);\n    var exclamationCC = '!'.charCodeAt(0);\n    var singleQuoteCC = \"'\".charCodeAt(0);\n    var doubleQuoteCC = '\"'.charCodeAt(0);\n    var openCornerBracketCC = '['.charCodeAt(0);\n    var closeCornerBracketCC = ']'.charCodeAt(0);\n\n\n    /**\n     * parsing a list of entries\n     */\n    function parseChildren(tagName) {\n        var children = [];\n        while (S[pos]) {\n            if (S.charCodeAt(pos) == openBracketCC) {\n                if (S.charCodeAt(pos + 1) === slashCC) {\n                    var closeStart = pos + 2;\n                    pos = S.indexOf(closeBracket, pos);\n\n                    var closeTag = S.substring(closeStart, pos);\n                    if (closeTag.indexOf(tagName) == -1) {\n                        var parsedText = S.substring(0, pos).split('\\n');\n                        throw new Error(\n                            'Unexpected close tag\\nLine: ' + (parsedText.length - 1) +\n                            '\\nColumn: ' + (parsedText[parsedText.length - 1].length + 1) +\n                            '\\nChar: ' + S[pos]\n                        );\n                    }\n\n                    if (pos + 1) pos += 1;\n\n                    return children;\n                } else if (S.charCodeAt(pos + 1) === exclamationCC) {\n                    if (S.charCodeAt(pos + 2) == minusCC) {\n                        //comment support\n                        const startCommentPos = pos;\n                        while (pos !== -1 && !(S.charCodeAt(pos) === closeBracketCC && S.charCodeAt(pos - 1) == minusCC && S.charCodeAt(pos - 2) == minusCC && pos != -1)) {\n                            pos = S.indexOf(closeBracket, pos + 1);\n                        }\n                        if (pos === -1) {\n                            pos = S.length;\n                        }\n                        if (keepComments) {\n                            children.push(S.substring(startCommentPos, pos + 1));\n                        }\n                    } else if (\n                        S.charCodeAt(pos + 2) === openCornerBracketCC &&\n                        S.charCodeAt(pos + 8) === openCornerBracketCC &&\n                        S.substr(pos + 3, 5).toLowerCase() === 'cdata'\n                    ) {\n                        // cdata\n                        var cdataEndIndex = S.indexOf(']]>', pos);\n                        if (cdataEndIndex == -1) {\n                            children.push(S.substr(pos + 9));\n                            pos = S.length;\n                        } else {\n                            children.push(S.substring(pos + 9, cdataEndIndex));\n                            pos = cdataEndIndex + 3;\n                        }\n                        continue;\n                    } else {\n                        // doctypesupport\n                        const startDoctype = pos + 1;\n                        pos += 2;\n                        var encapsuled = false;\n                        while ((S.charCodeAt(pos) !== closeBracketCC || encapsuled === true) && S[pos]) {\n                            if (S.charCodeAt(pos) === openCornerBracketCC) {\n                                encapsuled = true;\n                            } else if (encapsuled === true && S.charCodeAt(pos) === closeCornerBracketCC) {\n                                encapsuled = false;\n                            }\n                            pos++;\n                        }\n                        children.push(S.substring(startDoctype, pos));\n                    }\n                    pos++;\n                    continue;\n                }\n                var node = parseNode();\n                children.push(node);\n                if (node.tagName[0] === '?') {\n                    children.push(...node.children);\n                    node.children = [];\n                }\n            } else {\n                var text = parseText();\n                if (keepWhitespace) {\n                    if (text.length > 0) {\n                        children.push(text);\n                    }\n                } else {\n                    var trimmed = text.trim();\n                    if (trimmed.length > 0) {\n                        children.push(trimmed);\n                    }\n                }\n                pos++;\n            }\n        }\n        return children;\n    }\n\n    /**\n     *    returns the text outside of texts until the first '<'\n     */\n    function parseText() {\n        var start = pos;\n        pos = S.indexOf(openBracket, pos) - 1;\n        if (pos === -2)\n            pos = S.length;\n        return S.slice(start, pos + 1);\n    }\n    /**\n     *    returns text until the first nonAlphabetic letter\n     */\n    var nameSpacer = '\\r\\n\\t>/= ';\n\n    function parseName() {\n        var start = pos;\n        while (nameSpacer.indexOf(S[pos]) === -1 && S[pos]) {\n            pos++;\n        }\n        return S.slice(start, pos);\n    }\n    /**\n     *    is parsing a node, including tagName, Attributes and its children,\n     * to parse children it uses the parseChildren again, that makes the parsing recursive\n     */\n    var NoChildNodes = options.noChildNodes || ['img', 'br', 'input', 'meta', 'link', 'hr'];\n\n    function parseNode() {\n        pos++;\n        const tagName = parseName();\n        const attributes = {};\n        let children = [];\n\n        // parsing attributes\n        while (S.charCodeAt(pos) !== closeBracketCC && S[pos]) {\n            var c = S.charCodeAt(pos);\n            if ((c > 64 && c < 91) || (c > 96 && c < 123)) {\n                //if('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(S[pos])!==-1 ){\n                var name = parseName();\n                // search beginning of the string\n                var code = S.charCodeAt(pos);\n                while (code && code !== singleQuoteCC && code !== doubleQuoteCC && !((code > 64 && code < 91) || (code > 96 && code < 123)) && code !== closeBracketCC) {\n                    pos++;\n                    code = S.charCodeAt(pos);\n                }\n                if (code === singleQuoteCC || code === doubleQuoteCC) {\n                    var value = parseString();\n                    if (pos === -1) {\n                        return {\n                            tagName,\n                            attributes,\n                            children,\n                        };\n                    }\n                } else {\n                    value = null;\n                    pos--;\n                }\n                attributes[name] = value;\n            }\n            pos++;\n        }\n        // optional parsing of children\n        if (S.charCodeAt(pos - 1) !== slashCC) {\n            if (tagName == \"script\") {\n                var start = pos + 1;\n                pos = S.indexOf('</script>', pos);\n                children = [S.slice(start, pos)];\n                pos += 9;\n            } else if (tagName == \"style\") {\n                var start = pos + 1;\n                pos = S.indexOf('</style>', pos);\n                children = [S.slice(start, pos)];\n                pos += 8;\n            } else if (NoChildNodes.indexOf(tagName) === -1) {\n                pos++;\n                children = parseChildren(tagName);\n            } else {\n                pos++;\n            }\n        } else {\n            pos++;\n        }\n        return {\n            tagName,\n            attributes,\n            children,\n        };\n    }\n\n    /**\n     *    is parsing a string, that starts with a char and with the same usually  ' or \"\n     */\n\n    function parseString() {\n        var startChar = S[pos];\n        var startpos = pos + 1;\n        pos = S.indexOf(startChar, startpos);\n        return S.slice(startpos, pos);\n    }\n\n    /**\n     *\n     */\n    function findElements() {\n        var r = new RegExp('\\\\s' + options.attrName + '\\\\s*=[\\'\"]' + options.attrValue + '[\\'\"]').exec(S);\n        if (r) {\n            return r.index;\n        } else {\n            return -1;\n        }\n    }\n\n    var out = null;\n    if (options.attrValue !== undefined) {\n        options.attrName = options.attrName || 'id';\n        var out = [];\n\n        while ((pos = findElements()) !== -1) {\n            pos = S.lastIndexOf('<', pos);\n            if (pos !== -1) {\n                out.push(parseNode());\n            }\n            S = S.substr(pos);\n            pos = 0;\n        }\n    } else if (options.parseNode) {\n        out = parseNode();\n    } else {\n        out = parseChildren('');\n    }\n\n    if (options.filter) {\n        out = filter(out, options.filter);\n    }\n\n    if (options.simplify) {\n        return simplify(Array.isArray(out) ? out : [out]);\n    }\n\n    if (options.setPos) {\n        out.pos = pos;\n    }\n\n    return out;\n}\n\n/**\n * transform the DomObject to an object that is like the object of PHP`s simple_xmp_load_*() methods.\n * this format helps you to write that is more likely to keep your program working, even if there a small changes in the XML schema.\n * be aware, that it is not possible to reproduce the original xml from a simplified version, because the order of elements is not saved.\n * therefore your program will be more flexible and easier to read.\n *\n * @param {tNode[]} children the childrenList\n */\nfunction simplify(children) {\n    var out = {};\n    if (!children.length) {\n        return '';\n    }\n\n    if (children.length === 1 && typeof children[0] == 'string') {\n        return children[0];\n    }\n    // map each object\n    children.forEach(function(child) {\n        if (typeof child !== 'object') {\n            return;\n        }\n        if (!out[child.tagName])\n            out[child.tagName] = [];\n        var kids = simplify(child.children);\n        out[child.tagName].push(kids);\n        if (Object.keys(child.attributes).length && typeof kids !== 'string') {\n            kids._attributes = child.attributes;\n        }\n    });\n\n    for (var i in out) {\n        if (out[i].length == 1) {\n            out[i] = out[i][0];\n        }\n    }\n\n    return out;\n}\n\n/**\n * similar to simplify, but lost less\n *\n * @param {tNode[]} children the childrenList\n */\nfunction simplifyLostLess(children, parentAttributes = {}) {\n    var out = {};\n    if (!children.length) {\n        return out;\n    }\n\n    if (children.length === 1 && typeof children[0] == 'string') {\n        return Object.keys(parentAttributes).length ? {\n            _attributes: parentAttributes,\n            value: children[0]\n        } : children[0];\n    }\n    // map each object\n    children.forEach(function(child) {\n        if (typeof child !== 'object') {\n            return;\n        }\n        if (!out[child.tagName])\n            out[child.tagName] = [];\n        var kids = simplifyLostLess(child.children || [], child.attributes);\n        out[child.tagName].push(kids);\n        if (Object.keys(child.attributes).length) {\n            kids._attributes = child.attributes;\n        }\n    });\n\n    return out;\n}\n/**\n * behaves the same way as Array.filter, if the filter method return true, the element is in the resultList\n * @params children{Array} the children of a node\n * @param f{function} the filter method\n */\nfunction filter(children, f, dept = 0, path = '') {\n    var out = [];\n    children.forEach(function(child, i) {\n        if (typeof(child) === 'object' && f(child, i, dept, path)) out.push(child);\n        if (child.children) {\n            var kids = filter(child.children, f, dept + 1, (path ? path + '.' : '') + i + '.' + child.tagName);\n            out = out.concat(kids);\n        }\n    });\n    return out;\n}\n/**\n * stringify a previously parsed string object.\n * this is useful,\n *  1. to remove whitespace\n * 2. to recreate xml data, with some changed data.\n * @param {tNode} O the object to Stringify\n */\nfunction stringify(O) {\n    var out = '';\n\n    function writeChildren(O) {\n        if (O) {\n            for (var i = 0; i < O.length; i++) {\n                if (typeof O[i] == 'string') {\n                    out += O[i].trim();\n                } else {\n                    writeNode(O[i]);\n                }\n            }\n        }\n    }\n\n    function writeNode(N) {\n        out += \"<\" + N.tagName;\n        for (var i in N.attributes) {\n            if (N.attributes[i] === null) {\n                out += ' ' + i;\n            } else if (N.attributes[i].indexOf('\"') === -1) {\n                out += ' ' + i + '=\"' + N.attributes[i].trim() + '\"';\n            } else {\n                out += ' ' + i + \"='\" + N.attributes[i].trim() + \"'\";\n            }\n        }\n        if (N.tagName[0] === '?') {\n            out += '?>';\n            return;\n        }\n        out += '>';\n        writeChildren(N.children);\n        out += '</' + N.tagName + '>';\n    }\n    writeChildren(O);\n\n    return out;\n}\n\n/**\n * use this method to read the text content, of some node.\n * It is great if you have mixed content like:\n * this text has some <b>big</b> text and a <a href=''>link</a>\n * @return {string}\n */\nfunction toContentString(tDom) {\n    if (Array.isArray(tDom)) {\n        var out = '';\n        tDom.forEach(function(e) {\n            out += ' ' + toContentString(e);\n            out = out.trim();\n        });\n        return out;\n    } else if (typeof tDom === 'object') {\n        return toContentString(tDom.children)\n    } else {\n        return ' ' + tDom;\n    }\n}\nfunction getElementById(S, id, simplified) {\n    var out = parse(S, {\n        attrValue: id\n    });\n    return simplified ? tXml.simplify(out) : out[0];\n}\nfunction getElementsByClassName(S, classname, simplified) {\n    const out = parse(S, {\n        attrName: 'class',\n        attrValue: '[a-zA-Z0-9- ]*' + classname + '[a-zA-Z0-9- ]*'\n    });\n    return simplified ? tXml.simplify(out) : out;\n}\n\nexports.filter = filter;\nexports.getElementById = getElementById;\nexports.getElementsByClassName = getElementsByClassName;\nexports.parse = parse;\nexports.simplify = simplify;\nexports.simplifyLostLess = simplifyLostLess;\nexports.stringify = stringify;\nexports.toContentString = toContentString;\n"]},"metadata":{},"sourceType":"script"}