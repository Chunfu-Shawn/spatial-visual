{"ast":null,"code":"import { createDefaultStyle, DEFAULT_OPTIONS } from './defaults';\nimport { formatValue } from './formatValue';\nimport { calculatePosition } from './position';\n/**\n * The tooltip handler class.\n */\n\nexport class Handler {\n  /**\n   * Create the tooltip handler and initialize the element and style.\n   *\n   * @param options Tooltip Options\n   */\n  constructor(options) {\n    this.options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    const elementId = this.options.id; // bind this to call\n\n    this.call = this.tooltipHandler.bind(this); // prepend a default stylesheet for tooltips to the head\n\n    if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {\n      const style = document.createElement('style');\n      style.setAttribute('id', this.options.styleId);\n      style.innerHTML = createDefaultStyle(elementId);\n      const head = document.head;\n\n      if (head.childNodes.length > 0) {\n        head.insertBefore(style, head.childNodes[0]);\n      } else {\n        head.appendChild(style);\n      }\n    } // append a div element that we use as a tooltip unless it already exists\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n\n    this.el = document.getElementById(elementId);\n\n    if (!this.el) {\n      this.el = document.createElement('div');\n      this.el.setAttribute('id', elementId);\n      this.el.classList.add('vg-tooltip');\n      document.body.appendChild(this.el);\n    }\n  }\n  /**\n   * The tooltip handler function.\n   */\n\n\n  tooltipHandler(handler, event, item, value) {\n    // console.log(handler, event, item, value);\n    // hide tooltip for null, undefined, or empty string values\n    if (value == null || value === '') {\n      this.el.classList.remove('visible', `${this.options.theme}-theme`);\n      return;\n    } // set the tooltip content\n\n\n    this.el.innerHTML = formatValue(value, this.options.sanitize, this.options.maxDepth); // make the tooltip visible\n\n    this.el.classList.add('visible', `${this.options.theme}-theme`);\n    const {\n      x,\n      y\n    } = calculatePosition(event, this.el.getBoundingClientRect(), this.options.offsetX, this.options.offsetY);\n    this.el.setAttribute('style', `top: ${y}px; left: ${x}px`);\n  }\n\n}","map":{"version":3,"sources":["../../src/Handler.ts"],"names":[],"mappings":"AAEA,SAAQ,kBAAR,EAA4B,eAA5B,QAA2D,YAA3D;AACA,SAAQ,WAAR,QAA0B,eAA1B;AACA,SAAQ,iBAAR,QAAgC,YAAhC;AAEA;;AAEG;;AACH,OAAM,MAAO,OAAP,CAAc;AAgBlB;;;;AAIG;AACH,EAAA,WAAA,CAAY,OAAZ,EAA6B;AAC3B,SAAK,OAAL,GAAY,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,eAAP,CAAA,EAA2B,OAA3B,CAAZ;AACA,UAAM,SAAS,GAAG,KAAK,OAAL,CAAa,EAA/B,CAF2B,CAI3B;;AACA,SAAK,IAAL,GAAY,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAAZ,CAL2B,CAO3B;;AACA,QAAI,CAAC,KAAK,OAAL,CAAa,mBAAd,IAAqC,CAAC,QAAQ,CAAC,cAAT,CAAwB,KAAK,OAAL,CAAa,OAArC,CAA1C,EAAyF;AACvF,YAAM,KAAK,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAAd;AACA,MAAA,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB,KAAK,OAAL,CAAa,OAAtC;AACA,MAAA,KAAK,CAAC,SAAN,GAAkB,kBAAkB,CAAC,SAAD,CAApC;AAEA,YAAM,IAAI,GAAG,QAAQ,CAAC,IAAtB;;AACA,UAAI,IAAI,CAAC,UAAL,CAAgB,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,QAAA,IAAI,CAAC,YAAL,CAAkB,KAAlB,EAAyB,IAAI,CAAC,UAAL,CAAgB,CAAhB,CAAzB;AACD,OAFD,MAEO;AACL,QAAA,IAAI,CAAC,WAAL,CAAiB,KAAjB;AACD;AACF,KAnB0B,CAqB3B;AACA;;;AACA,SAAK,EAAL,GAAU,QAAQ,CAAC,cAAT,CAAwB,SAAxB,CAAV;;AACA,QAAI,CAAC,KAAK,EAAV,EAAc;AACZ,WAAK,EAAL,GAAU,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAAV;AACA,WAAK,EAAL,CAAQ,YAAR,CAAqB,IAArB,EAA2B,SAA3B;AACA,WAAK,EAAL,CAAQ,SAAR,CAAkB,GAAlB,CAAsB,YAAtB;AAEA,MAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,KAAK,EAA/B;AACD;AACF;AAED;;AAEG;;;AACK,EAAA,cAAc,CAAC,OAAD,EAAe,KAAf,EAAkC,IAAlC,EAA6C,KAA7C,EAAuD;AAC3E;AAEA;AACA,QAAI,KAAK,IAAI,IAAT,IAAiB,KAAK,KAAK,EAA/B,EAAmC;AACjC,WAAK,EAAL,CAAQ,SAAR,CAAkB,MAAlB,CAAyB,SAAzB,EAAoC,GAAG,KAAK,OAAL,CAAa,KAAK,QAAzD;AACA;AACD,KAP0E,CAS3E;;;AACA,SAAK,EAAL,CAAQ,SAAR,GAAoB,WAAW,CAAC,KAAD,EAAQ,KAAK,OAAL,CAAa,QAArB,EAA+B,KAAK,OAAL,CAAa,QAA5C,CAA/B,CAV2E,CAY3E;;AACA,SAAK,EAAL,CAAQ,SAAR,CAAkB,GAAlB,CAAsB,SAAtB,EAAiC,GAAG,KAAK,OAAL,CAAa,KAAK,QAAtD;AAEA,UAAM;AAAC,MAAA,CAAD;AAAI,MAAA;AAAJ,QAAS,iBAAiB,CAC9B,KAD8B,EAE9B,KAAK,EAAL,CAAQ,qBAAR,EAF8B,EAG9B,KAAK,OAAL,CAAa,OAHiB,EAI9B,KAAK,OAAL,CAAa,OAJiB,CAAhC;AAOA,SAAK,EAAL,CAAQ,YAAR,CAAqB,OAArB,EAA8B,QAAQ,CAAC,aAAa,CAAC,IAArD;AACD;;AAhFiB","sourceRoot":"","sourcesContent":["import { createDefaultStyle, DEFAULT_OPTIONS } from './defaults';\nimport { formatValue } from './formatValue';\nimport { calculatePosition } from './position';\n/**\n * The tooltip handler class.\n */\nexport class Handler {\n    /**\n     * Create the tooltip handler and initialize the element and style.\n     *\n     * @param options Tooltip Options\n     */\n    constructor(options) {\n        this.options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n        const elementId = this.options.id;\n        // bind this to call\n        this.call = this.tooltipHandler.bind(this);\n        // prepend a default stylesheet for tooltips to the head\n        if (!this.options.disableDefaultStyle && !document.getElementById(this.options.styleId)) {\n            const style = document.createElement('style');\n            style.setAttribute('id', this.options.styleId);\n            style.innerHTML = createDefaultStyle(elementId);\n            const head = document.head;\n            if (head.childNodes.length > 0) {\n                head.insertBefore(style, head.childNodes[0]);\n            }\n            else {\n                head.appendChild(style);\n            }\n        }\n        // append a div element that we use as a tooltip unless it already exists\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.el = document.getElementById(elementId);\n        if (!this.el) {\n            this.el = document.createElement('div');\n            this.el.setAttribute('id', elementId);\n            this.el.classList.add('vg-tooltip');\n            document.body.appendChild(this.el);\n        }\n    }\n    /**\n     * The tooltip handler function.\n     */\n    tooltipHandler(handler, event, item, value) {\n        // console.log(handler, event, item, value);\n        // hide tooltip for null, undefined, or empty string values\n        if (value == null || value === '') {\n            this.el.classList.remove('visible', `${this.options.theme}-theme`);\n            return;\n        }\n        // set the tooltip content\n        this.el.innerHTML = formatValue(value, this.options.sanitize, this.options.maxDepth);\n        // make the tooltip visible\n        this.el.classList.add('visible', `${this.options.theme}-theme`);\n        const { x, y } = calculatePosition(event, this.el.getBoundingClientRect(), this.options.offsetX, this.options.offsetY);\n        this.el.setAttribute('style', `top: ${y}px; left: ${x}px`);\n    }\n}\n//# sourceMappingURL=Handler.js.map"]},"metadata":{},"sourceType":"module"}