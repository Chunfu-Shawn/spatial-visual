{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { isArray, isObject, isString } from 'vega-util';\n/**\n * Format the value to be shown in the tooltip.\n *\n * @param value The value to show in the tooltip.\n * @param valueToHtml Function to convert a single cell value to an HTML string\n */\n\nexport function formatValue(value, valueToHtml, maxDepth) {\n  if (isArray(value)) {\n    return \"[\".concat(value.map(function (v) {\n      return valueToHtml(isString(v) ? v : stringify(v, maxDepth));\n    }).join(', '), \"]\");\n  }\n\n  if (isObject(value)) {\n    var content = '';\n\n    var _a = value,\n        title = _a.title,\n        image = _a.image,\n        rest = __rest(_a, [\"title\", \"image\"]);\n\n    if (title) {\n      content += \"<h2>\".concat(valueToHtml(title), \"</h2>\");\n    }\n\n    if (image) {\n      content += \"<img src=\\\"\".concat(valueToHtml(image), \"\\\">\");\n    }\n\n    var keys = Object.keys(rest);\n\n    if (keys.length > 0) {\n      content += '<table>';\n\n      var _iterator = _createForOfIteratorHelper(keys),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n          var val = rest[key]; // ignore undefined properties\n\n          if (val === undefined) {\n            continue;\n          }\n\n          if (isObject(val)) {\n            val = stringify(val, maxDepth);\n          }\n\n          content += \"<tr><td class=\\\"key\\\">\".concat(valueToHtml(key), \":</td><td class=\\\"value\\\">\").concat(valueToHtml(val), \"</td></tr>\");\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      content += \"</table>\";\n    }\n\n    return content || '{}'; // show empty object if there are no properties\n  }\n\n  return valueToHtml(value);\n}\nexport function replacer(maxDepth) {\n  var stack = [];\n  return function (key, value) {\n    if (typeof value !== 'object' || value === null) {\n      return value;\n    }\n\n    var pos = stack.indexOf(this) + 1;\n    stack.length = pos;\n\n    if (stack.length > maxDepth) {\n      return '[Object]';\n    }\n\n    if (stack.indexOf(value) >= 0) {\n      return '[Circular]';\n    }\n\n    stack.push(value);\n    return value;\n  };\n}\n/**\n * Stringify any JS object to valid JSON\n */\n\nexport function stringify(obj, maxDepth) {\n  return JSON.stringify(obj, replacer(maxDepth));\n}","map":{"version":3,"sources":["../../src/formatValue.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,SAAQ,OAAR,EAAiB,QAAjB,EAA2B,QAA3B,QAA0C,WAA1C;AAEA;;;;;AAKG;;AACH,OAAM,SAAU,WAAV,CAAsB,KAAtB,EAAkC,WAAlC,EAAuE,QAAvE,EAAuF;AAC3F,MAAI,OAAO,CAAC,KAAD,CAAX,EAAoB;AAClB,sBAAW,KAAK,CAAC,GAAN,CAAU,UAAC,CAAD;AAAA,aAAO,WAAW,CAAC,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAd,GAAkB,SAAS,CAAC,CAAD,EAAI,QAAJ,CAA5B,CAAlB;AAAA,KAAV,EAAwE,IAAxE,CAA6E,IAA7E,CAAX;AACD;;AAED,MAAI,QAAQ,CAAC,KAAD,CAAZ,EAAqB;AACnB,QAAI,OAAO,GAAG,EAAd;;AAEM,QAAA,EAAA,GAAA,KAAA;AAAA,QAAC,KAAD,GAAa,EAAb,CAAC,KAAD;AAAA,QAAQ,KAAR,GAAa,EAAb,CAAQ,KAAR;AAAA,QAAkB,IAAlB,GAAsB,MAAA,CAAA,EAAA,EAAtB,CAAA,OAAA,EAAA,OAAA,CAAsB,CAAtB;;AAEN,QAAI,KAAJ,EAAW;AACT,MAAA,OAAO,kBAAW,WAAW,CAAC,KAAD,CAAtB,UAAP;AACD;;AAED,QAAI,KAAJ,EAAW;AACT,MAAA,OAAO,yBAAiB,WAAW,CAAC,KAAD,CAA5B,QAAP;AACD;;AAED,QAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,IAAZ,CAAb;;AACA,QAAI,IAAI,CAAC,MAAL,GAAc,CAAlB,EAAqB;AACnB,MAAA,OAAO,IAAI,SAAX;;AADmB,iDAED,IAFC;AAAA;;AAAA;AAEnB,4DAAwB;AAAA,cAAb,GAAa;AACtB,cAAI,GAAG,GAAI,IAAY,CAAC,GAAD,CAAvB,CADsB,CAGtB;;AACA,cAAI,GAAG,KAAK,SAAZ,EAAuB;AACrB;AACD;;AAED,cAAI,QAAQ,CAAC,GAAD,CAAZ,EAAmB;AACjB,YAAA,GAAG,GAAG,SAAS,CAAC,GAAD,EAAM,QAAN,CAAf;AACD;;AAED,UAAA,OAAO,oCAA2B,WAAW,CAAC,GAAD,CAAtC,uCAAsE,WAAW,CAAC,GAAD,CAAjF,eAAP;AACD;AAfkB;AAAA;AAAA;AAAA;AAAA;;AAgBnB,MAAA,OAAO,cAAP;AACD;;AAED,WAAO,OAAO,IAAI,IAAlB,CAjCmB,CAiCK;AACzB;;AAED,SAAO,WAAW,CAAC,KAAD,CAAlB;AACD;AAED,OAAM,SAAU,QAAV,CAAmB,QAAnB,EAAmC;AACvC,MAAM,KAAK,GAAU,EAArB;AAEA,SAAO,UAAqB,GAArB,EAAkC,KAAlC,EAA4C;AACjD,QAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,KAAK,IAA3C,EAAiD;AAC/C,aAAO,KAAP;AACD;;AACD,QAAM,GAAG,GAAG,KAAK,CAAC,OAAN,CAAc,IAAd,IAAsB,CAAlC;AACA,IAAA,KAAK,CAAC,MAAN,GAAe,GAAf;;AACA,QAAI,KAAK,CAAC,MAAN,GAAe,QAAnB,EAA6B;AAC3B,aAAO,UAAP;AACD;;AACD,QAAI,KAAK,CAAC,OAAN,CAAc,KAAd,KAAwB,CAA5B,EAA+B;AAC7B,aAAO,YAAP;AACD;;AACD,IAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACA,WAAO,KAAP;AACD,GAdD;AAeD;AAED;;AAEG;;AACH,OAAM,SAAU,SAAV,CAAoB,GAApB,EAA8B,QAA9B,EAA8C;AAClD,SAAO,IAAI,CAAC,SAAL,CAAe,GAAf,EAAoB,QAAQ,CAAC,QAAD,CAA5B,CAAP;AACD","sourceRoot":"","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { isArray, isObject, isString } from 'vega-util';\n/**\n * Format the value to be shown in the tooltip.\n *\n * @param value The value to show in the tooltip.\n * @param valueToHtml Function to convert a single cell value to an HTML string\n */\nexport function formatValue(value, valueToHtml, maxDepth) {\n    if (isArray(value)) {\n        return `[${value.map((v) => valueToHtml(isString(v) ? v : stringify(v, maxDepth))).join(', ')}]`;\n    }\n    if (isObject(value)) {\n        let content = '';\n        const _a = value, { title, image } = _a, rest = __rest(_a, [\"title\", \"image\"]);\n        if (title) {\n            content += `<h2>${valueToHtml(title)}</h2>`;\n        }\n        if (image) {\n            content += `<img src=\"${valueToHtml(image)}\">`;\n        }\n        const keys = Object.keys(rest);\n        if (keys.length > 0) {\n            content += '<table>';\n            for (const key of keys) {\n                let val = rest[key];\n                // ignore undefined properties\n                if (val === undefined) {\n                    continue;\n                }\n                if (isObject(val)) {\n                    val = stringify(val, maxDepth);\n                }\n                content += `<tr><td class=\"key\">${valueToHtml(key)}:</td><td class=\"value\">${valueToHtml(val)}</td></tr>`;\n            }\n            content += `</table>`;\n        }\n        return content || '{}'; // show empty object if there are no properties\n    }\n    return valueToHtml(value);\n}\nexport function replacer(maxDepth) {\n    const stack = [];\n    return function (key, value) {\n        if (typeof value !== 'object' || value === null) {\n            return value;\n        }\n        const pos = stack.indexOf(this) + 1;\n        stack.length = pos;\n        if (stack.length > maxDepth) {\n            return '[Object]';\n        }\n        if (stack.indexOf(value) >= 0) {\n            return '[Circular]';\n        }\n        stack.push(value);\n        return value;\n    };\n}\n/**\n * Stringify any JS object to valid JSON\n */\nexport function stringify(obj, maxDepth) {\n    return JSON.stringify(obj, replacer(maxDepth));\n}\n//# sourceMappingURL=formatValue.js.map"]},"metadata":{},"sourceType":"module"}