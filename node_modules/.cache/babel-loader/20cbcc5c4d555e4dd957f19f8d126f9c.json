{"ast":null,"code":"import _classCallCheck from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * Vega-Lite's singleton logger utility.\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar _level;\n\nimport { Debug, Error as ErrorLevel, Info, logger, Warn } from 'vega-util';\nimport * as message_1 from './message';\nexport { message_1 as message };\n/**\n * Main (default) Vega Logger instance for Vega-Lite.\n */\n\nvar main = logger(Warn);\nvar current = main;\n/**\n * Logger tool for checking if the code throws correct warning.\n */\n\nexport var LocalLogger = /*#__PURE__*/function () {\n  function LocalLogger() {\n    _classCallCheck(this, LocalLogger);\n\n    this.warns = [];\n    this.infos = [];\n    this.debugs = [];\n\n    _level.set(this, Warn);\n  }\n\n  _createClass(LocalLogger, [{\n    key: \"level\",\n    value: function level(_) {\n      if (_) {\n        __classPrivateFieldSet(this, _level, _);\n\n        return this;\n      }\n\n      return __classPrivateFieldGet(this, _level);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      var _this$warns;\n\n      if (__classPrivateFieldGet(this, _level) >= Warn) (_this$warns = this.warns).push.apply(_this$warns, arguments);\n      return this;\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      var _this$infos;\n\n      if (__classPrivateFieldGet(this, _level) >= Info) (_this$infos = this.infos).push.apply(_this$infos, arguments);\n      return this;\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      var _this$debugs;\n\n      if (__classPrivateFieldGet(this, _level) >= Debug) (_this$debugs = this.debugs).push.apply(_this$debugs, arguments);\n      return this;\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      if (__classPrivateFieldGet(this, _level) >= ErrorLevel) throw Error.apply(void 0, arguments);\n      return this;\n    }\n  }]);\n\n  return LocalLogger;\n}();\n_level = new WeakMap();\nexport function wrap(f) {\n  return function () {\n    current = new LocalLogger();\n    f(current);\n    reset();\n  };\n}\n/**\n * Set the singleton logger to be a custom logger.\n */\n\nexport function set(newLogger) {\n  current = newLogger;\n  return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger.\n */\n\nexport function reset() {\n  current = main;\n  return current;\n}\nexport function error() {\n  var _current;\n\n  (_current = current).error.apply(_current, arguments);\n}\nexport function warn() {\n  var _current2;\n\n  (_current2 = current).warn.apply(_current2, arguments);\n}\nexport function info() {\n  var _current3;\n\n  (_current3 = current).info.apply(_current3, arguments);\n}\nexport function debug() {\n  var _current4;\n\n  (_current4 = current).debug.apply(_current4, arguments);\n}","map":{"version":3,"sources":["../../../src/log/index.ts"],"names":[],"mappings":";;;AAAA;;AAEG;;;;;;;;;;;;;;;;;;;;AAEH,SAAQ,KAAR,EAAe,KAAK,IAAI,UAAxB,EAAoC,IAApC,EAA0C,MAA1C,EAAmE,IAAnE,QAA8E,WAA9E;2BACyB,W;sBAAb,O;AAEZ;;AAEG;;AACH,IAAM,IAAI,GAAG,MAAM,CAAC,IAAD,CAAnB;AACA,IAAI,OAAO,GAAoB,IAA/B;AAEA;;AAEG;;AACH,WAAa,WAAb;AAAA,yBAAA;AAAA;;AACS,SAAA,KAAA,GAAe,EAAf;AACA,SAAA,KAAA,GAAe,EAAf;AACA,SAAA,MAAA,GAAgB,EAAhB;;AAEP,IAAA,MAAA,CAAA,GAAA,CAAA,IAAA,EAAiB,IAAjB;AA+BD;;AApCD;AAAA;AAAA,WASS,eAAM,CAAN,EAAgB;AACrB,UAAI,CAAJ,EAAO;AACL,QAAA,sBAAA,CAAA,IAAA,EAAI,MAAJ,EAAc,CAAd,CAAA;;AACA,eAAO,IAAP;AACD;;AACD,aAAA,sBAAA,CAAA,IAAA,EAAA,MAAA,CAAA;AACD;AAfH;AAAA;AAAA,WAiBS,gBAA4B;AAAA;;AACjC,UAAI,sBAAA,CAAA,IAAA,EAAA,MAAA,CAAA,IAAe,IAAnB,EAAyB,oBAAK,KAAL,EAAW,IAAX;AACzB,aAAO,IAAP;AACD;AApBH;AAAA;AAAA,WAsBS,gBAA4B;AAAA;;AACjC,UAAI,sBAAA,CAAA,IAAA,EAAA,MAAA,CAAA,IAAe,IAAnB,EAAyB,oBAAK,KAAL,EAAW,IAAX;AACzB,aAAO,IAAP;AACD;AAzBH;AAAA;AAAA,WA2BS,iBAA6B;AAAA;;AAClC,UAAI,sBAAA,CAAA,IAAA,EAAA,MAAA,CAAA,IAAe,KAAnB,EAA0B,qBAAK,MAAL,EAAY,IAAZ;AAC1B,aAAO,IAAP;AACD;AA9BH;AAAA;AAAA,WAgCS,iBAA6B;AAClC,UAAI,sBAAA,CAAA,IAAA,EAAA,MAAA,CAAA,IAAe,UAAnB,EAA+B,MAAM,KAAK,MAAL,mBAAN;AAC/B,aAAO,IAAP;AACD;AAnCH;;AAAA;AAAA;;AAsCA,OAAM,SAAU,IAAV,CAAe,CAAf,EAA+C;AACnD,SAAO,YAAK;AACV,IAAA,OAAO,GAAG,IAAI,WAAJ,EAAV;AACA,IAAA,CAAC,CAAC,OAAD,CAAD;AACA,IAAA,KAAK;AACN,GAJD;AAKD;AAED;;AAEG;;AACH,OAAM,SAAU,GAAV,CAAc,SAAd,EAAwC;AAC5C,EAAA,OAAO,GAAG,SAAV;AACA,SAAO,OAAP;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,KAAV,GAAe;AACnB,EAAA,OAAO,GAAG,IAAV;AACA,SAAO,OAAP;AACD;AAED,OAAM,SAAU,KAAV,GAAuC;AAAA;;AAC3C,cAAA,OAAO,EAAC,KAAR;AACD;AAED,OAAM,SAAU,IAAV,GAAsC;AAAA;;AAC1C,eAAA,OAAO,EAAC,IAAR;AACD;AAED,OAAM,SAAU,IAAV,GAAsC;AAAA;;AAC1C,eAAA,OAAO,EAAC,IAAR;AACD;AAED,OAAM,SAAU,KAAV,GAAuC;AAAA;;AAC3C,eAAA,OAAO,EAAC,KAAR;AACD","sourceRoot":"","sourcesContent":["/**\n * Vega-Lite's singleton logger utility.\n */\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _level;\nimport { Debug, Error as ErrorLevel, Info, logger, Warn } from 'vega-util';\nimport * as message_1 from './message';\nexport { message_1 as message };\n/**\n * Main (default) Vega Logger instance for Vega-Lite.\n */\nconst main = logger(Warn);\nlet current = main;\n/**\n * Logger tool for checking if the code throws correct warning.\n */\nexport class LocalLogger {\n    constructor() {\n        this.warns = [];\n        this.infos = [];\n        this.debugs = [];\n        _level.set(this, Warn);\n    }\n    level(_) {\n        if (_) {\n            __classPrivateFieldSet(this, _level, _);\n            return this;\n        }\n        return __classPrivateFieldGet(this, _level);\n    }\n    warn(...args) {\n        if (__classPrivateFieldGet(this, _level) >= Warn)\n            this.warns.push(...args);\n        return this;\n    }\n    info(...args) {\n        if (__classPrivateFieldGet(this, _level) >= Info)\n            this.infos.push(...args);\n        return this;\n    }\n    debug(...args) {\n        if (__classPrivateFieldGet(this, _level) >= Debug)\n            this.debugs.push(...args);\n        return this;\n    }\n    error(...args) {\n        if (__classPrivateFieldGet(this, _level) >= ErrorLevel)\n            throw Error(...args);\n        return this;\n    }\n}\n_level = new WeakMap();\nexport function wrap(f) {\n    return () => {\n        current = new LocalLogger();\n        f(current);\n        reset();\n    };\n}\n/**\n * Set the singleton logger to be a custom logger.\n */\nexport function set(newLogger) {\n    current = newLogger;\n    return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger.\n */\nexport function reset() {\n    current = main;\n    return current;\n}\nexport function error(...args) {\n    current.error(...args);\n}\nexport function warn(...args) {\n    current.warn(...args);\n}\nexport function info(...args) {\n    current.info(...args);\n}\nexport function debug(...args) {\n    current.debug(...args);\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}