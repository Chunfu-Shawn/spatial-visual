{"ast":null,"code":"import _defineProperty from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { array } from 'vega-util';\nimport { isConditionalDef, isConditionalSelection } from '../../../channeldef';\nimport { expression } from '../../predicate';\nimport { parseSelectionPredicate } from '../../selection/parse';\n/**\n * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition\n * or a simple mixin if channel def has no condition.\n */\n\nexport function wrapCondition(model, channelDef, vgChannel, refFn) {\n  var condition = isConditionalDef(channelDef) && channelDef.condition;\n  var valueRef = refFn(channelDef);\n\n  if (condition) {\n    var conditions = array(condition);\n    var vgConditions = conditions.map(function (c) {\n      var conditionValueRef = refFn(c);\n      var test = isConditionalSelection(c) ? parseSelectionPredicate(model, c.selection) // FIXME: remove casting once TS is no longer dumb about it\n      : expression(model, c.test); // FIXME: remove casting once TS is no longer dumb about it\n\n      return Object.assign({\n        test: test\n      }, conditionValueRef);\n    });\n    return _defineProperty({}, vgChannel, [].concat(_toConsumableArray(vgConditions), _toConsumableArray(valueRef !== undefined ? [valueRef] : [])));\n  } else {\n    return valueRef !== undefined ? _defineProperty({}, vgChannel, valueRef) : {};\n  }\n}","map":{"version":3,"sources":["../../../../../src/compile/mark/encode/conditional.ts"],"names":[],"mappings":";;AAAA,SAAQ,KAAR,QAAoB,WAApB;AACA,SAIE,gBAJF,EAKE,sBALF,QAMO,qBANP;AASA,SAAQ,UAAR,QAAyB,iBAAzB;AACA,SAAQ,uBAAR,QAAsC,uBAAtC;AAGA;;;AAGG;;AACH,OAAM,SAAU,aAAV,CACJ,KADI,EAEJ,UAFI,EAGJ,SAHI,EAIJ,KAJI,EAI2B;AAE/B,MAAM,SAAS,GAAG,gBAAgB,CAAK,UAAL,CAAhB,IAAoC,UAAU,CAAC,SAAjE;AACA,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAD,CAAtB;;AACA,MAAI,SAAJ,EAAe;AACb,QAAM,UAAU,GAAG,KAAK,CAAC,SAAD,CAAxB;AACA,QAAM,YAAY,GAAG,UAAU,CAAC,GAAX,CAAe,UAAA,CAAC,EAAG;AACtC,UAAM,iBAAiB,GAAG,KAAK,CAAC,CAAD,CAA/B;AACA,UAAM,IAAI,GAAG,sBAAsB,CAAM,CAAN,CAAtB,GACT,uBAAuB,CAAC,KAAD,EAAS,CAA+B,CAAC,SAAzC,CADd,CACkE;AADlE,QAET,UAAU,CAAC,KAAD,EAAS,CAA+B,CAAC,IAAzC,CAFd,CAFsC,CAIwB;;AAC9D,aAAA,MAAA,CAAA,MAAA,CAAA;AACE,QAAA,IAAI,EAAJ;AADF,OAAA,EAEK,iBAFL,CAAA;AAID,KAToB,CAArB;AAUA,+BACG,SADH,+BACmB,YADnB,sBACqC,QAAQ,KAAK,SAAb,GAAyB,CAAC,QAAD,CAAzB,GAAsC,EAD3E;AAGD,GAfD,MAeO;AACL,WAAO,QAAQ,KAAK,SAAb,uBAA2B,SAA3B,EAAuC,QAAvC,IAAmD,EAA1D;AACD;AACF","sourceRoot":"","sourcesContent":["import { array } from 'vega-util';\nimport { isConditionalDef, isConditionalSelection } from '../../../channeldef';\nimport { expression } from '../../predicate';\nimport { parseSelectionPredicate } from '../../selection/parse';\n/**\n * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition\n * or a simple mixin if channel def has no condition.\n */\nexport function wrapCondition(model, channelDef, vgChannel, refFn) {\n    const condition = isConditionalDef(channelDef) && channelDef.condition;\n    const valueRef = refFn(channelDef);\n    if (condition) {\n        const conditions = array(condition);\n        const vgConditions = conditions.map(c => {\n            const conditionValueRef = refFn(c);\n            const test = isConditionalSelection(c)\n                ? parseSelectionPredicate(model, c.selection) // FIXME: remove casting once TS is no longer dumb about it\n                : expression(model, c.test); // FIXME: remove casting once TS is no longer dumb about it\n            return Object.assign({ test }, conditionValueRef);\n        });\n        return {\n            [vgChannel]: [...vgConditions, ...(valueRef !== undefined ? [valueRef] : [])]\n        };\n    }\n    else {\n        return valueRef !== undefined ? { [vgChannel]: valueRef } : {};\n    }\n}\n//# sourceMappingURL=conditional.js.map"]},"metadata":{},"sourceType":"module"}