{"ast":null,"code":"import _classCallCheck from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chunfu/IdeaProjects/spatial-visual/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { duplicate, hash as _hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\n\nexport var FlattenTransformNode = /*#__PURE__*/function (_DataFlowNode) {\n  _inherits(FlattenTransformNode, _DataFlowNode);\n\n  var _super = _createSuper(FlattenTransformNode);\n\n  function FlattenTransformNode(parent, transform) {\n    var _this;\n\n    _classCallCheck(this, FlattenTransformNode);\n\n    _this = _super.call(this, parent);\n    _this.transform = transform;\n    _this.transform = duplicate(transform); // duplicate to prevent side effects\n\n    var _this$transform = _this.transform,\n        flatten = _this$transform.flatten,\n        _this$transform$as = _this$transform.as,\n        as = _this$transform$as === void 0 ? [] : _this$transform$as;\n    _this.transform.as = flatten.map(function (f, i) {\n      var _a;\n\n      return (_a = as[i]) !== null && _a !== void 0 ? _a : f;\n    });\n    return _this;\n  }\n\n  _createClass(FlattenTransformNode, [{\n    key: \"clone\",\n    value: function clone() {\n      return new FlattenTransformNode(this.parent, duplicate(this.transform));\n    }\n  }, {\n    key: \"dependentFields\",\n    value: function dependentFields() {\n      return new Set(this.transform.flatten);\n    }\n  }, {\n    key: \"producedFields\",\n    value: function producedFields() {\n      return new Set(this.transform.as);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      return \"FlattenTransform \".concat(_hash(this.transform));\n    }\n  }, {\n    key: \"assemble\",\n    value: function assemble() {\n      var _this$transform2 = this.transform,\n          fields = _this$transform2.flatten,\n          as = _this$transform2.as;\n      var result = {\n        type: 'flatten',\n        fields: fields,\n        as: as\n      };\n      return result;\n    }\n  }]);\n\n  return FlattenTransformNode;\n}(DataFlowNode);","map":{"version":3,"sources":["../../../../src/compile/data/flatten.ts"],"names":[],"mappings":";;;;AAEA,SAAQ,SAAR,EAAmB,IAAI,IAAJ,KAAnB,QAA8B,YAA9B;AACA,SAAQ,YAAR,QAA2B,YAA3B;AAEA;;AAEG;;AACH,WAAa,oBAAb;AAAA;;AAAA;;AAKE,gCAAY,MAAZ,EAA0C,SAA1C,EAAqE;AAAA;;AAAA;;AACnE,8BAAM,MAAN;AADwC,UAAA,SAAA,GAAA,SAAA;AAExC,UAAK,SAAL,GAAiB,SAAS,CAAC,SAAD,CAA1B,CAFmE,CAE5B;;AACvC,0BAA2B,MAAK,SAAhC;AAAA,QAAO,OAAP,mBAAO,OAAP;AAAA,6CAAgB,EAAhB;AAAA,QAAgB,EAAhB,mCAAqB,EAArB;AACA,UAAK,SAAL,CAAe,EAAf,GAAoB,OAAO,CAAC,GAAR,CAAY,UAAC,CAAD,EAAI,CAAJ,EAAS;AAAA,UAAA,EAAA;;AAAA,aAAA,CAAA,EAAA,GAAC,EAAE,CAAC,CAAD,CAAH,MAAM,IAAN,IAAM,EAAA,KAAA,KAAA,CAAN,GAAM,EAAN,GAAU,CAAV;AAAW,KAAhC,CAApB;AAJmE;AAKpE;;AAVH;AAAA;AAAA,WACS,iBAAK;AACV,aAAO,IAAI,oBAAJ,CAAyB,KAAK,MAA9B,EAAsC,SAAS,CAAC,KAAK,SAAN,CAA/C,CAAP;AACD;AAHH;AAAA;AAAA,WAYS,2BAAe;AACpB,aAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,OAAvB,CAAP;AACD;AAdH;AAAA;AAAA,WAgBS,0BAAc;AACnB,aAAO,IAAI,GAAJ,CAAQ,KAAK,SAAL,CAAe,EAAvB,CAAP;AACD;AAlBH;AAAA;AAAA,WAoBS,gBAAI;AACT,wCAA2B,KAAI,CAAC,KAAK,SAAN,CAA/B;AACD;AAtBH;AAAA;AAAA,WAwBS,oBAAQ;AACb,6BAA8B,KAAK,SAAnC;AAAA,UAAgB,MAAhB,oBAAO,OAAP;AAAA,UAAwB,EAAxB,oBAAwB,EAAxB;AAEA,UAAM,MAAM,GAAuB;AACjC,QAAA,IAAI,EAAE,SAD2B;AAEjC,QAAA,MAAM,EAAN,MAFiC;AAGjC,QAAA,EAAE,EAAF;AAHiC,OAAnC;AAKA,aAAO,MAAP;AACD;AAjCH;;AAAA;AAAA,EAA0C,YAA1C","sourceRoot":"","sourcesContent":["import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FlattenTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const { flatten, as = [] } = this.transform;\n        this.transform.as = flatten.map((f, i) => { var _a; return (_a = as[i]) !== null && _a !== void 0 ? _a : f; });\n    }\n    clone() {\n        return new FlattenTransformNode(this.parent, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set(this.transform.flatten);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `FlattenTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { flatten: fields, as } = this.transform;\n        const result = {\n            type: 'flatten',\n            fields,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=flatten.js.map"]},"metadata":{},"sourceType":"module"}