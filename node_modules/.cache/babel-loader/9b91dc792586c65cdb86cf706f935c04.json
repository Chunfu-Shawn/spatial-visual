{"ast":null,"code":"import { CompositeLayer, _flatten as flatten } from '@deck.gl/core';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport Tileset2D, { STRATEGY_DEFAULT } from './tileset-2d';\nimport { urlType, getURLFromTemplate } from './utils';\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {\n    type: 'function',\n    value: props => new GeoJsonLayer(props),\n    compare: false\n  },\n  getTileData: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onViewportLoad: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onTileLoad: {\n    type: 'function',\n    value: tile => {},\n    compare: false\n  },\n  onTileUnload: {\n    type: 'function',\n    value: tile => {},\n    compare: false\n  },\n  onTileError: {\n    type: 'function',\n    value: err => console.error(err),\n    compare: false\n  },\n  extent: {\n    type: 'array',\n    optional: true,\n    value: null,\n    compare: true\n  },\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tileset: null,\n      isLoaded: false\n    };\n  }\n\n  finalizeState() {\n    var _this$state$tileset;\n\n    (_this$state$tileset = this.state.tileset) === null || _this$state$tileset === void 0 ? void 0 : _this$state$tileset.finalize();\n  }\n\n  get isLoaded() {\n    const {\n      tileset\n    } = this.state;\n    return tileset.selectedTiles.every(tile => tile.layers && tile.layers.every(layer => layer.isLoaded));\n  }\n\n  shouldUpdateState(_ref) {\n    let {\n      changeFlags\n    } = _ref;\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(_ref2) {\n    let {\n      props,\n      changeFlags\n    } = _ref2;\n    let {\n      tileset\n    } = this.state;\n    const createTileCache = !tileset || changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData);\n\n    if (createTileCache) {\n      if (tileset) {\n        tileset.finalize();\n      }\n\n      tileset = new Tileset2D({ ...this._getTilesetOptions(props),\n        getTileData: this.getTileData.bind(this),\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this),\n        onTileUnload: this._onTileUnload.bind(this)\n      });\n      this.setState({\n        tileset\n      });\n    } else if (changeFlags.propsChanged || changeFlags.updateTriggersChanged) {\n      tileset.setOptions(this._getTilesetOptions(props));\n      this.state.tileset.tiles.forEach(tile => {\n        tile.layers = null;\n      });\n    }\n\n    this._updateTileset();\n  }\n\n  _getTilesetOptions(props) {\n    const {\n      tileSize,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy,\n      extent,\n      maxZoom,\n      minZoom,\n      maxRequests,\n      zoomOffset\n    } = props;\n    return {\n      maxCacheSize,\n      maxCacheByteSize,\n      maxZoom,\n      minZoom,\n      tileSize,\n      refinementStrategy,\n      extent,\n      maxRequests,\n      zoomOffset\n    };\n  }\n\n  _updateTileset() {\n    const {\n      tileset\n    } = this.state;\n    const {\n      zRange,\n      modelMatrix\n    } = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {\n      zRange,\n      modelMatrix\n    });\n    const {\n      isLoaded\n    } = tileset;\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n      this._onViewportLoad();\n    }\n\n    if (tilesetChanged) {\n      this.setState({\n        frameNumber\n      });\n    }\n\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onViewportLoad() {\n    const {\n      tileset\n    } = this.state;\n    const {\n      onViewportLoad\n    } = this.props;\n\n    if (onViewportLoad) {\n      onViewportLoad(tileset.selectedTiles);\n    }\n  }\n\n  _onTileLoad(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileLoad(tile);\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileError(error, tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileError(error);\n\n    layer._updateTileset();\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileUnload(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileUnload(tile);\n  }\n\n  getTileData(tile) {\n    const layer = this.getCurrentLayer();\n    const {\n      data,\n      getTileData,\n      fetch\n    } = layer.props;\n    const {\n      signal\n    } = tile;\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n\n    if (tile.url) {\n      return fetch(tile.url, {\n        propName: 'data',\n        layer,\n        signal\n      });\n    }\n\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getHighlightedObjectIndex() {\n    return -1;\n  }\n\n  getPickingInfo(_ref3) {\n    let {\n      info,\n      sourceLayer\n    } = _ref3;\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  _updateAutoHighlight(info) {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  renderLayers() {\n    return this.state.tileset.tiles.map(tile => {\n      const highlightedObjectIndex = this.getHighlightedObjectIndex(tile);\n\n      if (!tile.isLoaded) {} else if (!tile.layers) {\n        const layers = this.renderSubLayers({ ...this.props,\n          id: \"\".concat(this.id, \"-\").concat(tile.x, \"-\").concat(tile.y, \"-\").concat(tile.z),\n          data: tile.data,\n          _offset: 0,\n          tile\n        });\n        tile.layers = flatten(layers, Boolean).map(layer => layer.clone({\n          tile,\n          highlightedObjectIndex\n        }));\n      } else if (tile.layers[0] && tile.layers[0].props.highlightedObjectIndex !== highlightedObjectIndex) {\n        tile.layers = tile.layers.map(layer => layer.clone({\n          highlightedObjectIndex\n        }));\n      }\n\n      return tile.layers;\n    });\n  }\n\n  filterSubLayer(_ref4) {\n    let {\n      layer\n    } = _ref4;\n    return this.props.visible && layer.props.tile.isVisible;\n  }\n\n}\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["_flatten","defaultProps","data","dataComparator","urlType","renderSubLayers","type","value","props","compare","getTileData","optional","onViewportLoad","onTileLoad","tile","onTileUnload","onTileError","err","console","extent","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","zRange","maxRequests","zoomOffset","initializeState","tileset","isLoaded","finalizeState","layer","shouldUpdateState","changeFlags","updateState","createTileCache","_getTilesetOptions","_updateTileset","modelMatrix","frameNumber","loadingStateChanged","tilesetChanged","_onViewportLoad","_onTileLoad","_onTileError","_onTileUnload","fetch","signal","getURLFromTemplate","propName","getHighlightedObjectIndex","getPickingInfo","sourceLayer","info","_updateAutoHighlight","renderLayers","highlightedObjectIndex","layers","id","_offset","filterSubLayer","TileLayer"],"mappings":"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","sourcesContent":["import {CompositeLayer, _flatten as flatten} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nimport Tileset2D, {STRATEGY_DEFAULT} from './tileset-2d';\nimport {urlType, getURLFromTemplate} from './utils';\n\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', optional: true, value: null, compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  onTileLoad: {type: 'function', value: tile => {}, compare: false},\n  onTileUnload: {type: 'function', value: tile => {}, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  extent: {type: 'array', optional: true, value: null, compare: true},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tileset: null,\n      isLoaded: false\n    };\n  }\n\n  finalizeState() {\n    this.state.tileset?.finalize();\n  }\n\n  get isLoaded() {\n    const {tileset} = this.state;\n    return tileset.selectedTiles.every(\n      tile => tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, changeFlags}) {\n    let {tileset} = this.state;\n    const createTileCache =\n      !tileset ||\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (createTileCache) {\n      if (tileset) {\n        tileset.finalize();\n      }\n      tileset = new Tileset2D({\n        ...this._getTilesetOptions(props),\n        getTileData: this.getTileData.bind(this),\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this),\n        onTileUnload: this._onTileUnload.bind(this)\n      });\n      this.setState({tileset});\n    } else if (changeFlags.propsChanged || changeFlags.updateTriggersChanged) {\n      tileset.setOptions(this._getTilesetOptions(props));\n      // if any props changed, delete the cached layers\n      this.state.tileset.tiles.forEach(tile => {\n        tile.layers = null;\n      });\n    }\n\n    this._updateTileset();\n  }\n\n  _getTilesetOptions(props) {\n    const {\n      tileSize,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy,\n      extent,\n      maxZoom,\n      minZoom,\n      maxRequests,\n      zoomOffset\n    } = props;\n\n    return {\n      maxCacheSize,\n      maxCacheByteSize,\n      maxZoom,\n      minZoom,\n      tileSize,\n      refinementStrategy,\n      extent,\n      maxRequests,\n      zoomOffset\n    };\n  }\n\n  _updateTileset() {\n    const {tileset} = this.state;\n    const {zRange, modelMatrix} = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {zRange, modelMatrix});\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n      this._onViewportLoad();\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onViewportLoad() {\n    const {tileset} = this.state;\n    const {onViewportLoad} = this.props;\n\n    if (onViewportLoad) {\n      onViewportLoad(tileset.selectedTiles);\n    }\n  }\n\n  _onTileLoad(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileLoad(tile);\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileError(error, tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileError(error);\n    // errorred tiles should not block rendering, are considered \"loaded\" with empty data\n    layer._updateTileset();\n\n    if (tile.isVisible) {\n      this.setNeedsUpdate();\n    }\n  }\n\n  _onTileUnload(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileUnload(tile);\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile) {\n    const layer = this.getCurrentLayer();\n    const {data, getTileData, fetch} = layer.props;\n    const {signal} = tile;\n\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (tile.url) {\n      return fetch(tile.url, {propName: 'data', layer, signal});\n    }\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getHighlightedObjectIndex() {\n    return -1;\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  _updateAutoHighlight(info) {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  renderLayers() {\n    return this.state.tileset.tiles.map(tile => {\n      const highlightedObjectIndex = this.getHighlightedObjectIndex(tile);\n      // cache the rendered layer in the tile\n      if (!tile.isLoaded) {\n        // no op\n      } else if (!tile.layers) {\n        const layers = this.renderSubLayers({\n          ...this.props,\n          id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n          data: tile.data,\n          _offset: 0,\n          tile\n        });\n        tile.layers = flatten(layers, Boolean).map(layer =>\n          layer.clone({\n            tile,\n            highlightedObjectIndex\n          })\n        );\n      } else if (\n        tile.layers[0] &&\n        tile.layers[0].props.highlightedObjectIndex !== highlightedObjectIndex\n      ) {\n        tile.layers = tile.layers.map(layer => layer.clone({highlightedObjectIndex}));\n      }\n      return tile.layers;\n    });\n  }\n\n  filterSubLayer({layer}) {\n    return this.props.visible && layer.props.tile.isVisible;\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}