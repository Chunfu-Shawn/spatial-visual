var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __pow = Math.pow;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __require = typeof require !== "undefined" ? require : (x) => {
  throw new Error('Dynamic require of "' + x + '" is not supported');
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/components/heatmap/HeatmapSubscriber.js
import React14, {
  useEffect as useEffect5,
  useState as useState7,
  useCallback as useCallback5,
  useMemo as useMemo5
} from "react";

// src/components/TitleInfo.js
import React3, { useState as useState2 } from "react";
import { makeStyles as makeStyles2 } from "@material-ui/core/styles";
import CloudDownloadIcon from "@material-ui/icons/CloudDownload";
import MenuItem from "@material-ui/core/MenuItem";
import IconButton2 from "@material-ui/core/IconButton";
import Link from "@material-ui/core/Link";
import ArrowDropDownIcon from "@material-ui/icons/ArrowDropDown";
import ArrowDropUpIcon from "@material-ui/icons/ArrowDropUp";
import SettingsIcon from "@material-ui/icons/Settings";
import CloseIcon from "@material-ui/icons/Close";

// src/components/classNames.js
var TOOLTIP_ANCESTOR = "tooltip-ancestor";
var CARD = `card card-body my-2 ${TOOLTIP_ANCESTOR}`;
var PRIMARY_CARD = `${CARD} bg-primary`;
var SECONDARY_CARD = `${CARD} bg-secondary`;
var BLACK_CARD = `${CARD} bg-black`;
var SCROLL_CARD = `${PRIMARY_CARD} scroll`;
var VITESSCE_CONTAINER = "vitessce-container";

// src/components/LoadingIndicator.js
import React from "react";
import CircularProgress from "@material-ui/core/CircularProgress";
function LoadingIndicator() {
  return /* @__PURE__ */ React.createElement("div", {
    className: "loading-indicator-backdrop"
  }, /* @__PURE__ */ React.createElement("div", {
    className: "loading-indicator-container"
  }, /* @__PURE__ */ React.createElement(CircularProgress, null)));
}

// src/components/shared-mui/components.js
import React2, { useRef as useRef3 } from "react";
import Paper from "@material-ui/core/Paper";
import Popper from "@material-ui/core/Popper";
import IconButton from "@material-ui/core/IconButton";
import MenuList from "@material-ui/core/MenuList";
import ClickAwayListener from "@material-ui/core/ClickAwayListener";
import Fade from "@material-ui/core/Fade";

// src/components/hooks.js
import {
  useRef as useRef2,
  useState,
  useEffect,
  useCallback as useCallback2,
  useMemo as useMemo2
} from "react";
import debounce from "lodash/debounce";

// src/app/state/hooks.js
import { useRef, useCallback, useMemo } from "react";
import create from "zustand";
import createContext from "zustand/context";
import shallow from "zustand/shallow";

// src/utils.js
function fromEntries(iterable) {
  return [...iterable].reduce((obj, { 0: key, 1: val }) => Object.assign(obj, { [key]: val }), {});
}
function range(length) {
  return [...Array(length).keys()];
}
function pluralize(singular, plural, count) {
  return count === 1 ? singular : plural;
}
function capitalize(word) {
  return word.charAt(0).toUpperCase() + word.slice(1);
}
function getNextScope(prevScopes) {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  const nextCharIndices = [0];
  function next() {
    const r = [];
    nextCharIndices.forEach((charIndex) => {
      r.unshift(chars[charIndex]);
    });
    let increment = true;
    for (let i = 0; i < nextCharIndices.length; i++) {
      const val = ++nextCharIndices[i];
      if (val >= chars.length) {
        nextCharIndices[i] = 0;
      } else {
        increment = false;
        break;
      }
    }
    if (increment) {
      nextCharIndices.push(0);
    }
    return r.join("");
  }
  let nextScope;
  do {
    nextScope = next();
  } while (prevScopes.includes(nextScope));
  return nextScope;
}
function getSourceFromLoader(loader, level) {
  const { data } = loader;
  const source = Array.isArray(data) ? data[level || data.length - 1] : data;
  return source;
}
function isRgb(loader) {
  const source = getSourceFromLoader(loader);
  const { shape, dtype, labels } = source;
  const channelSize = shape[labels.indexOf("c")];
  return channelSize === 3 && dtype === "Uint8";
}

// src/app/state/hooks.js
var {
  Provider: ViewConfigProviderLocal,
  useStore: useViewConfigStoreLocal,
  useStoreApi: useViewConfigStoreApiLocal
} = createContext();
var ViewConfigProvider = ViewConfigProviderLocal;
var useViewConfigStore = useViewConfigStoreLocal;
var useViewConfigStoreApi = useViewConfigStoreApiLocal;
var {
  Provider: AuxiliaryProviderLocal,
  useStore: useAuxiliaryStoreLocal
} = createContext();
var AuxiliaryProvider = AuxiliaryProviderLocal;
var useAuxiliaryStore = useAuxiliaryStoreLocal;
var createViewConfigStore = () => create((set) => ({
  viewConfig: null,
  loaders: null,
  setViewConfig: (viewConfig) => set({ viewConfig }),
  setLoaders: (loaders) => set({ loaders }),
  setCoordinationValue: ({ parameter, scope, value }) => set((state) => ({
    viewConfig: __spreadProps(__spreadValues({}, state.viewConfig), {
      coordinationSpace: __spreadProps(__spreadValues({}, state.viewConfig.coordinationSpace), {
        [parameter]: __spreadProps(__spreadValues({}, state.viewConfig.coordinationSpace[parameter]), {
          [scope]: value
        })
      })
    })
  })),
  removeComponent: (i) => set((state) => {
    const newLayout = state.viewConfig.layout.slice();
    newLayout.splice(i, 1);
    return {
      viewConfig: __spreadProps(__spreadValues({}, state.viewConfig), {
        layout: newLayout
      })
    };
  }),
  changeLayout: (newComponentProps) => set((state) => {
    const newLayout = state.viewConfig.layout.slice();
    newComponentProps.forEach(([i, newProps]) => {
      newLayout[i] = __spreadValues(__spreadValues({}, newLayout[i]), newProps);
    });
    return {
      viewConfig: __spreadProps(__spreadValues({}, state.viewConfig), {
        layout: newLayout
      })
    };
  })
}));
var useComponentLayout = (component, scopes, coordinationScopes) => useViewConfigStore((state) => state.viewConfig.layout.filter((l) => l.component === component).filter((l) => scopes.every((scope) => l.coordinationScopes[scope] === coordinationScopes[scope])));
var createAuxiliaryStore = () => create((set) => ({
  auxiliaryStore: null,
  setCoordinationValue: ({ parameter, scope, value }) => set((state) => ({
    auxiliaryStore: __spreadProps(__spreadValues({}, state.auxiliaryStore), {
      [parameter]: {
        [scope]: value
      }
    })
  }))
}));
var useHoverStore = create((set) => ({
  componentHover: null,
  setComponentHover: (componentHover) => set({ componentHover })
}));
var useWarnStore = create((set) => ({
  warning: null,
  setWarning: (warning) => set({ warning })
}));
var useViewInfoStore = create((set) => ({
  viewInfo: {},
  setComponentViewInfo: (uuid, viewInfo) => set((state) => ({
    viewInfo: __spreadProps(__spreadValues({}, state.viewInfo), {
      [uuid]: viewInfo
    })
  }))
}));
var useGridSizeStore = create((set) => ({
  resizeCount: {},
  incrementResizeCount: () => set((state) => ({
    resizeCount: state.resizeCount + 1
  }))
}));
function useCoordination(parameters, coordinationScopes) {
  const setCoordinationValue = useViewConfigStore((state) => state.setCoordinationValue);
  const values = useViewConfigStore((state) => {
    const { coordinationSpace } = state.viewConfig;
    return fromEntries(parameters.map((parameter) => {
      if (coordinationSpace && coordinationSpace[parameter]) {
        const value = coordinationSpace[parameter][coordinationScopes[parameter]];
        return [parameter, value];
      }
      return [parameter, void 0];
    }));
  }, shallow);
  const setters = useMemo(() => fromEntries(parameters.map((parameter) => {
    const setterName = `set${capitalize(parameter)}`;
    const setterFunc = (value) => setCoordinationValue({
      parameter,
      scope: coordinationScopes[parameter],
      value
    });
    return [setterName, setterFunc];
  })), [parameters, coordinationScopes]);
  return [values, setters];
}
var AUXILIARY_COORDINATION_TYPES_MAP = {
  spatialRasterLayers: ["rasterLayersCallbacks", "areLoadingRasterChannnels"]
};
var mapCoordinationScopes = (coordinationScopes) => {
  const newCoordinationScopes = {};
  Object.keys(coordinationScopes).forEach((key) => {
    const newCoordinationTypes = AUXILIARY_COORDINATION_TYPES_MAP[key] || [];
    newCoordinationTypes.forEach((coordinationType) => {
      newCoordinationScopes[coordinationType || key] = coordinationScopes[key];
    });
  });
  return newCoordinationScopes;
};
var mapParameters = (parameters) => parameters.map((parameter) => AUXILIARY_COORDINATION_TYPES_MAP[parameter]).filter(Boolean).flat();
function useAuxiliaryCoordination(parameters, coordinationScopes) {
  const setCoordinationValue = useAuxiliaryStore((state) => state.setCoordinationValue);
  const mappedCoordinationScopes = mapCoordinationScopes(coordinationScopes);
  const mappedParameters = mapParameters(parameters);
  const values = useAuxiliaryStore((state) => {
    const { auxiliaryStore } = state;
    return fromEntries(mappedParameters.map((parameter) => {
      if (auxiliaryStore && auxiliaryStore[parameter]) {
        const value = auxiliaryStore[parameter][mappedCoordinationScopes[parameter]];
        return [parameter, value];
      }
      return [parameter, void 0];
    }));
  }, shallow);
  const setters = useMemo(() => fromEntries(mappedParameters.map((parameter) => {
    const setterName = `set${capitalize(parameter)}`;
    const setterFunc = (value) => setCoordinationValue({
      parameter,
      scope: mappedCoordinationScopes[parameter],
      value
    });
    return [setterName, setterFunc];
  })), [parameters, coordinationScopes]);
  return [values, setters];
}
function useLoaders() {
  return useViewConfigStore((state) => state.loaders);
}
function useLayout() {
  return useViewConfigStore((state) => {
    var _a2;
    return (_a2 = state.viewConfig) == null ? void 0 : _a2.layout;
  });
}
function useRemoveComponent() {
  return useViewConfigStore((state) => state.removeComponent);
}
function useChangeLayout() {
  return useViewConfigStore((state) => state.changeLayout);
}
function useSetLoaders() {
  return useViewConfigStore((state) => state.setLoaders);
}
function useSetViewConfig(viewConfigStoreApi) {
  const setViewConfigRef = useRef(viewConfigStoreApi.getState().setViewConfig);
  const setViewConfig = setViewConfigRef.current;
  return setViewConfig;
}
function useComponentHover() {
  return useHoverStore((state) => state.componentHover);
}
function useSetComponentHover() {
  return useHoverStore((state) => state.setComponentHover);
}
function useWarning() {
  return useWarnStore((state) => state.warning);
}
function useSetWarning() {
  return useWarnStore((state) => state.setWarning);
}
function useComponentViewInfo(uuid) {
  return useViewInfoStore(useCallback((state) => state.viewInfo[uuid], [uuid]));
}
function useSetComponentViewInfo(uuid) {
  const setViewInfoRef = useRef(useViewInfoStore.getState().setComponentViewInfo);
  const setComponentViewInfo = (viewInfo) => setViewInfoRef.current(uuid, viewInfo);
  return setComponentViewInfo;
}
function useGridResize() {
  return useGridSizeStore((state) => state.resizeCount);
}
function useEmitGridResize() {
  return useGridSizeStore((state) => state.incrementResizeCount);
}

// src/components/hooks.js
function getWindowDimensions() {
  const { innerWidth: width, innerHeight: height } = window;
  return {
    width,
    height
  };
}
function useVitessceContainer(ref) {
  return useCallback2(() => {
    if (ref.current) {
      return ref.current.closest(`.${VITESSCE_CONTAINER}`);
    }
    return null;
  }, [ref]);
}
function useWindowDimensions() {
  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());
  useEffect(() => {
    function handleResize() {
      setWindowDimensions(getWindowDimensions());
    }
    const onResizeDebounced = debounce(handleResize, 100, { trailing: true });
    window.addEventListener("resize", onResizeDebounced);
    return () => window.removeEventListener("resize", onResizeDebounced);
  }, []);
  return windowDimensions;
}
function useGridItemSize() {
  const containerRef = useRef2();
  const [height, setHeight] = useState();
  const [width, setWidth] = useState();
  const resizeCount = useGridResize();
  const incrementResizeCount = useEmitGridResize();
  useEffect(() => {
    function onWindowResize() {
      incrementResizeCount();
    }
    const onResizeDebounced = debounce(onWindowResize, 100, { trailing: true });
    window.addEventListener("resize", onResizeDebounced);
    onWindowResize();
    return () => {
      window.removeEventListener("resize", onResizeDebounced);
    };
  }, [incrementResizeCount]);
  useEffect(() => {
    if (!containerRef.current)
      return;
    const container = containerRef.current;
    const containerRect = container.getBoundingClientRect();
    setHeight(containerRect.height);
    setWidth(containerRect.width);
  }, [resizeCount]);
  return [width, height, containerRef];
}
function useDeckCanvasSize() {
  const deckRef = useRef2();
  const [height, setHeight] = useState();
  const [width, setWidth] = useState();
  const resizeCount = useGridResize();
  const incrementResizeCount = useEmitGridResize();
  useEffect(() => {
    function onWindowResize() {
      incrementResizeCount();
    }
    const onResizeDebounced = debounce(onWindowResize, 100, { trailing: true });
    window.addEventListener("resize", onResizeDebounced);
    onWindowResize();
    return () => {
      window.removeEventListener("resize", onResizeDebounced);
    };
  }, [incrementResizeCount]);
  useEffect(() => {
    if (!deckRef.current)
      return;
    const { canvas } = deckRef.current.deck;
    const canvasRect = canvas.getBoundingClientRect();
    setHeight(canvasRect.height);
    setWidth(canvasRect.width);
  }, [resizeCount]);
  return [width, height, deckRef];
}
function useReady(supportedItems) {
  const items2 = supportedItems;
  const [waiting, setWaiting] = useState(items2);
  const setItemIsReady = useCallback2((readyItem) => {
    setWaiting((waitingItems) => {
      const nextWaitingItems = waitingItems.filter((item) => item !== readyItem);
      console.log(`cleared ${readyItem}; waiting on ${nextWaitingItems.length}: ${JSON.stringify(nextWaitingItems)}`);
      return nextWaitingItems;
    });
  }, [setWaiting]);
  const setItemIsNotReady = useCallback2((notReadyItem) => {
    setWaiting((waitingItems) => {
      const nextWaitingItems = [...waitingItems, notReadyItem];
      console.log(`waiting on ${nextWaitingItems.length}: ${JSON.stringify(nextWaitingItems)}`);
      return nextWaitingItems;
    });
  }, [setWaiting]);
  const resetReadyItems = useCallback2(() => {
    setWaiting(items2);
    console.log(`waiting on ${items2.length}: ${JSON.stringify(items2)}`);
  }, [setWaiting, items2]);
  const isReady = waiting.length === 0;
  return [isReady, setItemIsReady, setItemIsNotReady, resetReadyItems];
}
function useUrls() {
  const [urls, setUrls] = useState([]);
  const addUrl = useCallback2((url, name2) => {
    if (url) {
      setUrls((prev) => [...prev, { url, name: name2 }]);
    }
  }, [setUrls]);
  const resetUrls = useCallback2(() => {
    setUrls([]);
  }, [setUrls]);
  return [urls, addUrl, resetUrls];
}
function useClosestVitessceContainerSize(ref) {
  const [height, setHeight] = useState();
  const [width, setWidth] = useState();
  useEffect(() => {
    function onWindowResize() {
      if (ref.current) {
        const {
          clientHeight: componentHeight,
          clientWidth: componentWidth
        } = ref.current.closest(".vitessce-container");
        setWidth(componentWidth);
        setHeight(componentHeight);
      }
    }
    const onResizeDebounced = debounce(onWindowResize, 100, { trailing: true });
    window.addEventListener("resize", onResizeDebounced);
    onWindowResize();
    return () => {
      window.removeEventListener("resize", onResizeDebounced);
    };
  }, [ref]);
  return [width, height];
}
function useExpressionValueGetter({ attrs, expressionData }) {
  const cellIdMap = useMemo2(() => {
    const result = {};
    if (attrs && attrs.rows) {
      for (let i = 0; i < attrs.rows.length; i++) {
        result[attrs.rows[i]] = i;
      }
    }
    return result;
  }, [attrs]);
  const getExpressionValue = useCallback2((entry) => {
    const cellId = entry[0];
    if (cellIdMap && expressionData && expressionData[0]) {
      const cellIndex = cellIdMap[cellId];
      const val = expressionData[0][cellIndex];
      return val;
    }
    return 0;
  }, [cellIdMap, expressionData]);
  return getExpressionValue;
}

// src/components/shared-mui/styles.js
import { makeStyles, createMuiTheme } from "@material-ui/core/styles";
import { grey } from "@material-ui/core/colors";
var styles = makeStyles(() => ({
  paper: {
    maxHeight: 200,
    overflow: "auto"
  },
  container: {
    position: "relative",
    left: 0,
    top: 0
  },
  span: {
    width: "70px",
    textAlign: "center",
    paddingLeft: "2px",
    paddingRight: "2px"
  }
}));
var muiTheme = {
  dark: createMuiTheme({
    palette: {
      type: "dark",
      primary: grey,
      secondary: grey,
      primaryBackground: "#222222",
      primaryBackgroundHighlight: "#000000",
      primaryBackgroundInput: "#D3D3D3",
      primaryBackgroundDim: "#333333",
      primaryBackgroundLight: "#757575",
      primaryForeground: "#D3D3D3",
      primaryForegroundDim: "#000000",
      primaryForegroundActive: "#9bb7d6",
      secondaryBackground: "#000000",
      secondaryBackgroundDim: "#444444",
      secondaryForeground: "#D3D3D3"
    },
    props: {
      MuiButtonBase: {
        disableRipple: true
      }
    }
  }),
  light: createMuiTheme({
    palette: {
      type: "light",
      primary: grey,
      secondary: grey,
      primaryBackground: "#F1F1F1",
      primaryBackgroundHighlight: "#FFFFFF",
      primaryBackgroundInput: "#FFFFFF",
      primaryBackgroundDim: "#8A8A8A",
      primaryBackgroundLight: "#e0e0e0",
      primaryForeground: "#333333",
      primaryForegroundDim: "#808080",
      primaryForegroundActive: "#0074D9",
      secondaryBackground: "#F1F1F1",
      secondaryBackgroundDim: "#C0C0C0",
      secondaryForeground: "#222222"
    },
    props: {
      MuiButtonBase: {
        disableRipple: true
      }
    }
  })
};

// src/components/shared-mui/components.js
function MuiSpan(props) {
  const { children } = props;
  const classes = styles();
  return /* @__PURE__ */ React2.createElement("span", {
    className: classes.span
  }, children);
}
function PopperMenu(props) {
  const {
    buttonIcon,
    open,
    setOpen,
    children,
    buttonClassName
  } = props;
  const classes = styles();
  const anchorRef = useRef3();
  const handleClick = () => {
    setOpen((prev) => !prev);
  };
  const handleClose = () => {
    setOpen(false);
  };
  const id = open ? "v-popover-menu" : void 0;
  const getTooltipContainer = useVitessceContainer(anchorRef);
  return /* @__PURE__ */ React2.createElement("div", {
    ref: anchorRef,
    className: classes.container
  }, /* @__PURE__ */ React2.createElement(IconButton, {
    "aria-describedby": id,
    onClick: handleClick,
    size: "small",
    className: buttonClassName
  }, buttonIcon), /* @__PURE__ */ React2.createElement(Popper, {
    id,
    open,
    anchorEl: anchorRef && anchorRef.current,
    container: getTooltipContainer,
    onClose: handleClose,
    placement: "bottom-end",
    transition: true
  }, ({ TransitionProps }) => /* @__PURE__ */ React2.createElement(ClickAwayListener, {
    onClickAway: handleClose
  }, /* @__PURE__ */ React2.createElement(Fade, __spreadProps(__spreadValues({}, TransitionProps), {
    timeout: 100
  }), /* @__PURE__ */ React2.createElement(Paper, {
    elevation: 4,
    className: classes.paper
  }, /* @__PURE__ */ React2.createElement(MenuList, null, children))))));
}

// src/components/TitleInfo.js
var useStyles = makeStyles2((theme) => ({
  iconButton: {
    border: "none",
    marginLeft: 0,
    background: "none",
    color: theme.palette.primaryForeground,
    paddingLeft: "0.25em",
    paddingRight: "0.25em",
    borderRadius: "2px",
    "&:hover": {
      backgroundColor: theme.palette.primaryBackgroundLight
    },
    "&:first-child": {
      marginLeft: "0.25em"
    },
    "&:last-child": {
      marginRight: "0.25em"
    },
    "& svg": {
      width: "0.7em",
      height: "0.7em",
      verticalAlign: "middle",
      overflow: "visible"
    }
  },
  downloadLink: {
    color: theme.palette.primaryForeground
  }
}));
function SettingsIconWithArrow({ open }) {
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(SettingsIcon, null), open ? /* @__PURE__ */ React3.createElement(ArrowDropUpIcon, null) : /* @__PURE__ */ React3.createElement(ArrowDropDownIcon, null));
}
function PlotOptions(props) {
  const { options } = props;
  const [open, setOpen] = useState2(false);
  const classes = useStyles();
  return /* @__PURE__ */ React3.createElement(PopperMenu, {
    open,
    setOpen,
    buttonIcon: /* @__PURE__ */ React3.createElement(SettingsIconWithArrow, {
      open
    }),
    buttonClassName: classes.iconButton,
    placement: "bottom-end"
  }, options);
}
function CloudDownloadIconWithArrow({ open }) {
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(CloudDownloadIcon, null), open ? /* @__PURE__ */ React3.createElement(ArrowDropUpIcon, null) : /* @__PURE__ */ React3.createElement(ArrowDropDownIcon, null));
}
function DownloadOptions(props) {
  const { urls } = props;
  const [open, setOpen] = useState2(false);
  const classes = useStyles();
  return /* @__PURE__ */ React3.createElement(PopperMenu, {
    open,
    setOpen,
    buttonIcon: /* @__PURE__ */ React3.createElement(CloudDownloadIconWithArrow, {
      open
    }),
    buttonClassName: classes.iconButton,
    placement: "bottom-end"
  }, urls.map(({ url, name: name2 }) => /* @__PURE__ */ React3.createElement(MenuItem, {
    dense: true,
    key: url
  }, /* @__PURE__ */ React3.createElement(Link, {
    underline: "none",
    href: url,
    target: "_blank",
    rel: "noopener",
    className: classes.downloadLink
  }, "Download ", name2))));
}
function ClosePaneButton(props) {
  const { removeGridComponent } = props;
  const classes = useStyles();
  return /* @__PURE__ */ React3.createElement(IconButton2, {
    onClick: removeGridComponent,
    size: "small",
    className: classes.iconButton,
    title: "close"
  }, /* @__PURE__ */ React3.createElement(CloseIcon, null));
}
function TitleInfo(props) {
  const {
    title: title16,
    info,
    children,
    isScroll,
    isSpatial,
    removeGridComponent,
    urls,
    isReady,
    options
  } = props;
  const childClassName = isScroll ? SCROLL_CARD : isSpatial ? BLACK_CARD : SECONDARY_CARD;
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement("div", {
    className: "title"
  }, /* @__PURE__ */ React3.createElement("div", {
    className: "title-left"
  }, title16), /* @__PURE__ */ React3.createElement("div", {
    className: "title-info",
    title: info
  }, info), /* @__PURE__ */ React3.createElement("div", {
    className: "title-buttons"
  }, options && /* @__PURE__ */ React3.createElement(PlotOptions, {
    options
  }), urls && urls.length > 0 && /* @__PURE__ */ React3.createElement(DownloadOptions, {
    urls
  }), /* @__PURE__ */ React3.createElement(ClosePaneButton, {
    removeGridComponent
  }))), /* @__PURE__ */ React3.createElement("div", {
    className: childClassName
  }, !isReady && /* @__PURE__ */ React3.createElement(LoadingIndicator, null), children));
}

// src/components/utils.js
import React4 from "react";
import { COORDINATE_SYSTEM } from "@deck.gl/core";

// src/schemas/cell-sets.schema.json
var $schema = "http://json-schema.org/draft-07/schema#";
var $id = "https://github.com/vitessce/vitessce/#cell-sets";
var title = "Vitessce cell sets data";
var type = "object";
var definitions = {
  stringArray: {
    type: "array",
    items: {
      type: "string"
    }
  },
  stringProbabilityTupleArray: {
    type: "array",
    items: {
      type: "array",
      additionalItems: false,
      items: [
        {
          type: "string"
        },
        {
          oneOf: [
            {
              type: "number",
              minimum: 0,
              maximum: 1
            },
            {
              type: "null"
            }
          ]
        }
      ]
    }
  },
  colorArray: {
    type: "array",
    items: {
      type: "integer",
      minimum: 0,
      maximum: 255
    },
    minItems: 3,
    maxItems: 3
  },
  treeNodeLeaf: {
    type: "object",
    additionalProperties: false,
    required: ["name"],
    properties: {
      name: {
        type: "string"
      },
      color: {
        $ref: "#/definitions/colorArray"
      },
      set: {
        $ref: "#/definitions/stringArray"
      }
    }
  },
  treeNodeNonLeaf: {
    type: "object",
    additionalProperties: false,
    required: ["name"],
    properties: {
      name: {
        type: "string"
      },
      color: {
        $ref: "#/definitions/colorArray"
      },
      children: {
        type: "array",
        items: {
          $ref: "#/definitions/treeNode"
        }
      }
    }
  },
  treeNode: {
    oneOf: [
      {
        $ref: "#/definitions/treeNodeNonLeaf"
      },
      {
        $ref: "#/definitions/treeNodeLeaf"
      }
    ]
  },
  "version0.1.2": {
    type: "object",
    additionalProperties: false,
    required: ["version", "datatype", "tree"],
    properties: {
      dataset: {
        type: "string"
      },
      version: {
        type: "string",
        enum: ["0.1.2"]
      },
      datatype: {
        type: "string",
        enum: ["cell"]
      },
      tree: {
        type: "array",
        items: {
          $ref: "#/definitions/treeNodeNonLeaf"
        }
      }
    }
  },
  treeNodeLeafProbabilistic: {
    type: "object",
    additionalProperties: false,
    required: ["name"],
    properties: {
      name: {
        type: "string"
      },
      color: {
        $ref: "#/definitions/colorArray"
      },
      set: {
        $ref: "#/definitions/stringProbabilityTupleArray"
      }
    }
  },
  treeNodeNonLeafProbabilistic: {
    type: "object",
    additionalProperties: false,
    required: ["name"],
    properties: {
      name: {
        type: "string"
      },
      color: {
        $ref: "#/definitions/colorArray"
      },
      children: {
        type: "array",
        items: {
          $ref: "#/definitions/treeNodeProbabilistic"
        }
      }
    }
  },
  treeNodeProbabilistic: {
    oneOf: [
      {
        $ref: "#/definitions/treeNodeNonLeafProbabilistic"
      },
      {
        $ref: "#/definitions/treeNodeLeafProbabilistic"
      }
    ]
  },
  "version0.1.3": {
    type: "object",
    additionalProperties: false,
    required: ["version", "datatype", "tree"],
    properties: {
      dataset: {
        type: "string"
      },
      version: {
        type: "string",
        enum: ["0.1.3"]
      },
      datatype: {
        type: "string",
        enum: ["cell"]
      },
      tree: {
        type: "array",
        items: {
          $ref: "#/definitions/treeNodeNonLeafProbabilistic"
        }
      }
    }
  }
};
var oneOf = [
  {
    $ref: "#/definitions/version0.1.2"
  },
  {
    $ref: "#/definitions/version0.1.3"
  }
];
var cell_sets_schema_default = {
  $schema,
  $id,
  title,
  type,
  definitions,
  oneOf
};

// src/schemas/cell-sets-tabular.schema.json
var $schema2 = "http://json-schema.org/draft-07/schema#";
var $id2 = "https://github.com/vitessce/vitessce/#cell-sets-tabular";
var title2 = "Vitessce cell sets data, tabular format";
var definitions2 = {
  colorArray: {
    type: "array",
    items: { type: "integer", minimum: 0, maximum: 255 },
    minItems: 3,
    maxItems: 3
  }
};
var type2 = "array";
var items = {
  type: "object",
  additionalProperties: false,
  required: ["groupName", "setName", "obsId"],
  properties: {
    groupName: { type: "string" },
    setName: { type: "string" },
    setColor: { $ref: "#/definitions/colorArray" },
    obsId: { type: "string" },
    predictionScore: {
      oneOf: [
        {
          type: "number",
          minimum: 0,
          maximum: 1
        },
        {
          type: "null"
        }
      ]
    }
  }
};
var cell_sets_tabular_schema_default = {
  $schema: $schema2,
  $id: $id2,
  title: title2,
  definitions: definitions2,
  type: type2,
  items
};

// src/components/sets/constants.js
var FILE_EXTENSION_JSON = "json";
var MIME_TYPE_JSON = "application/json";
var FILE_EXTENSION_TABULAR = "csv";
var MIME_TYPE_TABULAR = "text/csv";
var SEPARATOR_TABULAR = ",";
var NA_VALUE_TABULAR = "NA";
var SETS_DATATYPE_CELL = "cell";
var HIERARCHICAL_SCHEMAS = {
  cell: {
    latestVersion: "0.1.3",
    schema: cell_sets_schema_default
  }
};
var TABULAR_SCHEMAS = {
  cell: {
    schema: cell_sets_tabular_schema_default
  }
};

// src/components/utils.js
function makeCellStatusMessage(cellInfoFactors) {
  return Object.entries(cellInfoFactors).map(([factor, value]) => `${factor}: ${value}`).join("; ");
}
function cellLayerDefaultProps(cells, updateStatus, setCellHighlight, setComponentHover) {
  return {
    coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,
    data: cells,
    pickable: true,
    autoHighlight: true,
    stroked: true,
    filled: true,
    getElevation: 0,
    onHover: (info) => {
      if (setComponentHover) {
        setComponentHover();
      }
      if (info.object) {
        const [cellId, cellInfo] = info.object;
        const { factors = {} } = cellInfo;
        if (updateStatus) {
          updateStatus(makeCellStatusMessage(factors));
        }
        if (setCellHighlight) {
          setCellHighlight(cellId);
        }
      } else if (setCellHighlight) {
        setCellHighlight("");
      }
    }
  };
}
var DEFAULT_DARK_COLOR = [50, 50, 50];
var DEFAULT_LIGHT_COLOR = [200, 200, 200];
function getDefaultColor(theme) {
  return theme === "dark" ? DEFAULT_DARK_COLOR : DEFAULT_LIGHT_COLOR;
}
var PALETTE = [
  [68, 119, 170],
  [136, 204, 238],
  [68, 170, 153],
  [17, 119, 51],
  [153, 153, 51],
  [221, 204, 119],
  [204, 102, 119],
  [136, 34, 85],
  [170, 68, 153]
];
var VIEWER_PALETTE = [
  [0, 0, 255],
  [0, 255, 0],
  [255, 0, 255],
  [255, 255, 0],
  [0, 255, 255],
  [255, 255, 255],
  [255, 128, 0],
  [255, 0, 0]
];
var COLORMAP_OPTIONS = [
  "viridis",
  "greys",
  "magma",
  "jet",
  "hot",
  "bone",
  "copper",
  "summer",
  "density",
  "inferno"
];
var DEFAULT_GL_OPTIONS = { webgl2: true };
function createDefaultUpdateCellsHover(componentName) {
  return (hoverInfo) => console.warn(`${componentName} updateCellsHover: ${hoverInfo.cellId}`);
}
function createDefaultUpdateGenesHover(componentName) {
  return (hoverInfo) => console.warn(`${componentName} updateGenesHover: ${hoverInfo.geneId}`);
}
function createDefaultUpdateViewInfo(componentName) {
  return (viewInfo) => console.warn(`${componentName} updateViewInfo: ${viewInfo}`);
}
function copyUint8Array(arr) {
  const newBuffer = new ArrayBuffer(arr.buffer.byteLength);
  const newArr = new Uint8Array(newBuffer);
  newArr.set(arr);
  return newArr;
}
function getNextNumberedNodeName(nodes, prefix) {
  let i = 1;
  if (nodes) {
    while (nodes.find((n) => n.name === `${prefix}${i}`)) {
      i++;
    }
  }
  return `${prefix}${i}`;
}
function setCellSelection(cellSelection, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding, prefix = "Selection ") {
  const CELL_SELECTIONS_LEVEL_ZERO_NAME = "My Selections";
  const selectionsLevelZeroNode = additionalCellSets == null ? void 0 : additionalCellSets.tree.find((n) => n.name === CELL_SELECTIONS_LEVEL_ZERO_NAME);
  const nextAdditionalCellSets = {
    version: HIERARCHICAL_SCHEMAS[SETS_DATATYPE_CELL].latestVersion,
    datatype: SETS_DATATYPE_CELL,
    tree: [...additionalCellSets ? additionalCellSets.tree : []]
  };
  const nextName = getNextNumberedNodeName(selectionsLevelZeroNode == null ? void 0 : selectionsLevelZeroNode.children, prefix);
  let colorIndex = 0;
  if (selectionsLevelZeroNode) {
    colorIndex = selectionsLevelZeroNode.children.length;
    selectionsLevelZeroNode.children.push({
      name: nextName,
      set: cellSelection.map((d) => [d, null])
    });
  } else {
    nextAdditionalCellSets.tree.push({
      name: CELL_SELECTIONS_LEVEL_ZERO_NAME,
      children: [
        {
          name: nextName,
          set: cellSelection.map((d) => [d, null])
        }
      ]
    });
  }
  setAdditionalCellSets(nextAdditionalCellSets);
  const nextPath = ["My Selections", nextName];
  setCellSetColor([
    ...cellSetColor || [],
    {
      path: nextPath,
      color: PALETTE[colorIndex % PALETTE.length]
    }
  ]);
  setCellSetSelection([nextPath]);
  setCellColorEncoding("cellSetSelection");
}
function mergeCellSets(cellSets, additionalCellSets) {
  return {
    version: HIERARCHICAL_SCHEMAS[SETS_DATATYPE_CELL].latestVersion,
    datatype: SETS_DATATYPE_CELL,
    tree: [
      ...cellSets ? cellSets.tree : [],
      ...additionalCellSets ? additionalCellSets.tree : []
    ]
  };
}
function createWarningComponent(props) {
  return () => {
    const {
      title: title16,
      message
    } = props;
    return /* @__PURE__ */ React4.createElement("div", {
      className: PRIMARY_CARD
    }, /* @__PURE__ */ React4.createElement("h1", null, title16), /* @__PURE__ */ React4.createElement("div", null, message));
  };
}
function asEsModule(component) {
  return {
    __esModule: true,
    default: component
  };
}
function formatBytes(bytes, decimals = 2) {
  if (bytes === 0)
    return "0 Bytes";
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
}
var getStatsForResolution = (loader, resolution) => {
  const { shape, labels } = loader[resolution];
  const height = shape[labels.indexOf("y")];
  const width = shape[labels.indexOf("x")];
  const depth = shape[labels.indexOf("z")];
  const depthDownsampled = Math.max(1, depth >> resolution);
  const totalBytes = 4 * height * width * depthDownsampled;
  return {
    height,
    width,
    depthDownsampled,
    totalBytes
  };
};
var canLoadResolution = (loader, resolution) => {
  var _a2, _b2, _c;
  const {
    totalBytes,
    height,
    width,
    depthDownsampled
  } = getStatsForResolution(loader, resolution);
  const maxHeapSize = ((_a2 = window.performance) == null ? void 0 : _a2.memory) && ((_c = (_b2 = window.performance) == null ? void 0 : _b2.memory) == null ? void 0 : _c.jsHeapSizeLimit) / 2;
  const maxSize = maxHeapSize || __pow(2, 31) - 1;
  return totalBytes < maxSize && height <= 2048 && depthDownsampled <= 2048 && width <= 2048 && depthDownsampled > 1;
};

// src/components/data-hooks.js
import { useState as useState4, useEffect as useEffect2 } from "react";
import equal2 from "fast-deep-equal";

// src/loaders/errors/AbstractLoaderError.js
var AbstractLoaderError = class {
  constructor(message) {
    this.message = message;
  }
  warnInConsole() {
    throw new Error("The warnInConsole() method has not been implemented.");
  }
};

// src/loaders/errors/LoaderValidationError.js
var LoaderValidationError = class extends AbstractLoaderError {
  constructor(datasetType, datasetFileType, datasetUrl, reason) {
    super(`Error while validating ${datasetType}.`);
    this.name = "LoaderValidationError";
    this.datasetType = datasetType;
    this.datasetFileType = datasetFileType;
    this.datasetUrl = datasetUrl;
    this.reason = reason;
  }
  warnInConsole() {
    const {
      datasetType,
      datasetUrl,
      reason
    } = this;
    console.warn(`${datasetType} from ${datasetUrl}: validation failed`, JSON.stringify(reason, null, 2));
  }
};

// src/loaders/errors/LoaderNotFoundError.js
var LoaderNotFoundError = class extends AbstractLoaderError {
  constructor(datasetType, datasetFileType, datasetUrl) {
    super(`Error finding loader for ${datasetType}.`);
    this.name = "LoaderNotFoundError";
    this.datasetType = datasetType;
    this.datasetFileType = datasetFileType;
    this.datasetUrl = datasetUrl;
  }
  warnInConsole() {
    const {
      datasetType,
      datasetFileType,
      datasetUrl
    } = this;
    if (datasetFileType && datasetUrl) {
      console.warn(`${datasetType} from ${datasetUrl}: unable to find loader for fileType ${datasetFileType}`);
    } else {
      console.warn(`${datasetType}: unable to find loader`);
    }
  }
};

// node_modules/@hms-dbmi/viv/dist/viv.es.js
import { COORDINATE_SYSTEM as COORDINATE_SYSTEM2, Layer, project32, picking, CompositeLayer, OrthographicView, Controller, OrbitView } from "@deck.gl/core";
import { Matrix4 } from "math.gl";
import GL from "@luma.gl/constants";
import { TileLayer } from "@deck.gl/geo-layers";
import { Model, Geometry, Texture2D, isWebGL2, Texture3D } from "@luma.gl/core";
import { hasFeature, FEATURES } from "@luma.gl/webgl";
import { BitmapLayer as BitmapLayer$1, PolygonLayer, LineLayer, TextLayer } from "@deck.gl/layers";
import quickselect from "quickselect";
import { Plane } from "@math.gl/culling";
import React5, { PureComponent, useState as useState3, useMemo as useMemo3 } from "react";
import DeckGL from "@deck.gl/react";
import equal from "fast-deep-equal";
import { fromUrl, fromBlob } from "geotiff";
import parser from "fast-xml-parser";
import { KeyError, openGroup, BoundsCheckError, slice, HTTPStore } from "zarr";
var fsColormap1 = "#define SHADER_NAME xr-layer-fragment-shader-colormap\nprecision highp float;\n#define GLSLIFY 1\nuniform sampler2D channel0;uniform sampler2D channel1;uniform sampler2D channel2;uniform sampler2D channel3;uniform sampler2D channel4;uniform sampler2D channel5;uniform vec2 contrastLimits[6];uniform float opacity;uniform float divisor;uniform bool useTransparentColor;varying vec2 vTexCoord;void main(){float intensityValue0=sample_and_apply_contrast_limits(channel0,vTexCoord,contrastLimits[0]);float intensityValue1=sample_and_apply_contrast_limits(channel1,vTexCoord,contrastLimits[1]);float intensityValue2=sample_and_apply_contrast_limits(channel2,vTexCoord,contrastLimits[2]);float intensityValue3=sample_and_apply_contrast_limits(channel3,vTexCoord,contrastLimits[3]);float intensityValue4=sample_and_apply_contrast_limits(channel4,vTexCoord,contrastLimits[4]);float intensityValue5=sample_and_apply_contrast_limits(channel5,vTexCoord,contrastLimits[5]);float intensityCombo=0.;intensityCombo+=max(0.,intensityValue0);intensityCombo+=max(0.,intensityValue1);intensityCombo+=max(0.,intensityValue2);intensityCombo+=max(0.,intensityValue3);intensityCombo+=max(0.,intensityValue4);intensityCombo+=max(0.,intensityValue5);gl_FragColor=colormap(intensityCombo,opacity,useTransparentColor);geometry.uv=vTexCoord;DECKGL_FILTER_COLOR(gl_FragColor,geometry);}";
var fsColormap2 = "#version 300 es\n#define SHADER_NAME xr-layer-fragment-shader\nprecision highp float;precision highp int;precision highp SAMPLER_TYPE;\n#define GLSLIFY 1\nuniform SAMPLER_TYPE channel0;uniform SAMPLER_TYPE channel1;uniform SAMPLER_TYPE channel2;uniform SAMPLER_TYPE channel3;uniform SAMPLER_TYPE channel4;uniform SAMPLER_TYPE channel5;uniform vec2 contrastLimits[6];uniform float opacity;uniform bool useTransparentColor;in vec2 vTexCoord;out vec4 color;void main(){float intensityValue0=sample_and_apply_contrast_limits(channel0,vTexCoord,contrastLimits[0]);float intensityValue1=sample_and_apply_contrast_limits(channel1,vTexCoord,contrastLimits[1]);float intensityValue2=sample_and_apply_contrast_limits(channel2,vTexCoord,contrastLimits[2]);float intensityValue3=sample_and_apply_contrast_limits(channel3,vTexCoord,contrastLimits[3]);float intensityValue4=sample_and_apply_contrast_limits(channel4,vTexCoord,contrastLimits[4]);float intensityValue5=sample_and_apply_contrast_limits(channel5,vTexCoord,contrastLimits[5]);float intensityArray[6]=float[6](intensityValue0,intensityValue1,intensityValue2,intensityValue3,intensityValue4,intensityValue5);float intensityCombo=0.;for(int i=0;i<6;i++){intensityCombo+=max(0.,intensityArray[i]);}color=colormap(intensityCombo,opacity,useTransparentColor);geometry.uv=vTexCoord;DECKGL_FILTER_COLOR(color,geometry);}";
var fs1 = "#define SHADER_NAME xr-layer-fragment-shader\nprecision highp float;\n#define GLSLIFY 1\nuniform sampler2D channel0;uniform sampler2D channel1;uniform sampler2D channel2;uniform sampler2D channel3;uniform sampler2D channel4;uniform sampler2D channel5;uniform vec2 contrastLimits[6];uniform vec3 colors[6];uniform float intensityArray[6];uniform float opacity;uniform float majorLensAxis;uniform float minorLensAxis;uniform vec2 lensCenter;uniform bool isLensOn;uniform int lensSelection;uniform vec3 lensBorderColor;uniform float lensBorderRadius;uniform vec3 transparentColor;uniform bool useTransparentColor;varying vec2 vTexCoord;void main(){float intensityValue0=sample_and_apply_contrast_limits(channel0,vTexCoord,contrastLimits[0]);float intensityValue1=sample_and_apply_contrast_limits(channel1,vTexCoord,contrastLimits[1]);float intensityValue2=sample_and_apply_contrast_limits(channel2,vTexCoord,contrastLimits[2]);float intensityValue3=sample_and_apply_contrast_limits(channel3,vTexCoord,contrastLimits[3]);float intensityValue4=sample_and_apply_contrast_limits(channel4,vTexCoord,contrastLimits[4]);float intensityValue5=sample_and_apply_contrast_limits(channel5,vTexCoord,contrastLimits[5]);bool isFragInLensBounds=frag_in_lens_bounds(lensCenter,vTexCoord,majorLensAxis,minorLensAxis,lensBorderRadius);bool isFragOnLensBounds=frag_on_lens_bounds(lensCenter,vTexCoord,majorLensAxis,minorLensAxis,lensBorderRadius);bool inLensAndUseLens=isLensOn&&isFragInLensBounds;vec3 rgbCombo=process_channel_intensity(intensityValue0,colors[0],0,inLensAndUseLens,lensSelection);rgbCombo+=process_channel_intensity(intensityValue1,colors[1],1,inLensAndUseLens,lensSelection);rgbCombo+=process_channel_intensity(intensityValue2,colors[2],2,inLensAndUseLens,lensSelection);rgbCombo+=process_channel_intensity(intensityValue3,colors[3],3,inLensAndUseLens,lensSelection);rgbCombo+=process_channel_intensity(intensityValue4,colors[4],4,inLensAndUseLens,lensSelection);rgbCombo+=process_channel_intensity(intensityValue5,colors[5],5,inLensAndUseLens,lensSelection);rgbCombo=(isLensOn&&isFragOnLensBounds)? lensBorderColor : rgbCombo;gl_FragColor=apply_opacity(rgbCombo,useTransparentColor,transparentColor,opacity);geometry.uv=vTexCoord;DECKGL_FILTER_COLOR(gl_FragColor,geometry);}";
var fs2 = "#version 300 es\n#define SHADER_NAME xr-layer-fragment-shader\nprecision highp float;precision highp int;precision highp SAMPLER_TYPE;\n#define GLSLIFY 1\nuniform SAMPLER_TYPE channel0;uniform SAMPLER_TYPE channel1;uniform SAMPLER_TYPE channel2;uniform SAMPLER_TYPE channel3;uniform SAMPLER_TYPE channel4;uniform SAMPLER_TYPE channel5;uniform vec2 contrastLimits[6];uniform vec3 colors[6];uniform float opacity;uniform float majorLensAxis;uniform float minorLensAxis;uniform vec2 lensCenter;uniform bool isLensOn;uniform int lensSelection;uniform vec3 lensBorderColor;uniform float lensBorderRadius;uniform vec3 transparentColor;uniform bool useTransparentColor;in vec2 vTexCoord;out vec4 color;void main(){float intensityValue0=sample_and_apply_contrast_limits(channel0,vTexCoord,contrastLimits[0]);float intensityValue1=sample_and_apply_contrast_limits(channel1,vTexCoord,contrastLimits[1]);float intensityValue2=sample_and_apply_contrast_limits(channel2,vTexCoord,contrastLimits[2]);float intensityValue3=sample_and_apply_contrast_limits(channel3,vTexCoord,contrastLimits[3]);float intensityValue4=sample_and_apply_contrast_limits(channel4,vTexCoord,contrastLimits[4]);float intensityValue5=sample_and_apply_contrast_limits(channel5,vTexCoord,contrastLimits[5]);float intensityArray[6]=float[6](intensityValue0,intensityValue1,intensityValue2,intensityValue3,intensityValue4,intensityValue5);bool isFragInLensBounds=frag_in_lens_bounds(lensCenter,vTexCoord,majorLensAxis,minorLensAxis,lensBorderRadius);bool isFragOnLensBounds=frag_on_lens_bounds(lensCenter,vTexCoord,majorLensAxis,minorLensAxis,lensBorderRadius);bool inLensAndUseLens=isLensOn&&isFragInLensBounds;vec3 rgbCombo=vec3(0.);for(int i=0;i<6;i++){rgbCombo+=process_channel_intensity(intensityArray[i],colors[i],i,inLensAndUseLens,lensSelection);}rgbCombo=(isLensOn&&isFragOnLensBounds)? lensBorderColor : rgbCombo;color=apply_opacity(rgbCombo,useTransparentColor,transparentColor,opacity);geometry.uv=vTexCoord;DECKGL_FILTER_COLOR(color,geometry);}";
var vs1 = "#define GLSLIFY 1\n#define SHADER_NAME xr-layer-vertex-shader\nattribute vec2 texCoords;attribute vec3 positions;attribute vec3 positions64Low;attribute vec3 instancePickingColors;varying vec2 vTexCoord;void main(void){geometry.worldPosition=positions;geometry.uv=texCoords;geometry.pickingColor=instancePickingColors;gl_Position=project_position_to_clipspace(positions,positions64Low,vec3(0.),geometry.position);DECKGL_FILTER_GL_POSITION(gl_Position,geometry);vTexCoord=texCoords;vec4 color=vec4(0.);DECKGL_FILTER_COLOR(color,geometry);}";
var vs2 = "#version 300 es\n#define GLSLIFY 1\n#define SHADER_NAME xr-layer-vertex-shader\nin vec2 texCoords;in vec3 positions;in vec3 positions64Low;in vec3 instancePickingColors;out vec2 vTexCoord;void main(void){geometry.worldPosition=positions;geometry.uv=texCoords;geometry.pickingColor=instancePickingColors;gl_Position=project_position_to_clipspace(positions,positions64Low,vec3(0.),geometry.position);DECKGL_FILTER_GL_POSITION(gl_Position,geometry);vTexCoord=texCoords;vec4 color=vec4(0.);DECKGL_FILTER_COLOR(color,geometry);}";
var fs$3 = "#define GLSLIFY 1\nvec4 jet(float x_17){const float e0=0.0;const vec4 v0=vec4(0,0,0.5137254901960784,1);const float e1=0.125;const vec4 v1=vec4(0,0.23529411764705882,0.6666666666666666,1);const float e2=0.375;const vec4 v2=vec4(0.0196078431372549,1,1,1);const float e3=0.625;const vec4 v3=vec4(1,1,0,1);const float e4=0.875;const vec4 v4=vec4(0.9803921568627451,0,0,1);const float e5=1.0;const vec4 v5=vec4(0.5019607843137255,0,0,1);float a0=smoothstep(e0,e1,x_17);float a1=smoothstep(e1,e2,x_17);float a2=smoothstep(e2,e3,x_17);float a3=smoothstep(e3,e4,x_17);float a4=smoothstep(e4,e5,x_17);return max(mix(v0,v1,a0)*step(e0,x_17)*step(x_17,e1),max(mix(v1,v2,a1)*step(e1,x_17)*step(x_17,e2),max(mix(v2,v3,a2)*step(e2,x_17)*step(x_17,e3),max(mix(v3,v4,a3)*step(e3,x_17)*step(x_17,e4),mix(v4,v5,a4)*step(e4,x_17)*step(x_17,e5)))));}vec4 hsv(float x_18){const float e0=0.0;const vec4 v0=vec4(1,0,0,1);const float e1=0.169;const vec4 v1=vec4(0.9921568627450981,1,0.00784313725490196,1);const float e2=0.173;const vec4 v2=vec4(0.9686274509803922,1,0.00784313725490196,1);const float e3=0.337;const vec4 v3=vec4(0,0.9882352941176471,0.01568627450980392,1);const float e4=0.341;const vec4 v4=vec4(0,0.9882352941176471,0.0392156862745098,1);const float e5=0.506;const vec4 v5=vec4(0.00392156862745098,0.9764705882352941,1,1);const float e6=0.671;const vec4 v6=vec4(0.00784313725490196,0,0.9921568627450981,1);const float e7=0.675;const vec4 v7=vec4(0.03137254901960784,0,0.9921568627450981,1);const float e8=0.839;const vec4 v8=vec4(1,0,0.984313725490196,1);const float e9=0.843;const vec4 v9=vec4(1,0,0.9607843137254902,1);const float e10=1.0;const vec4 v10=vec4(1,0,0.023529411764705882,1);float a0=smoothstep(e0,e1,x_18);float a1=smoothstep(e1,e2,x_18);float a2=smoothstep(e2,e3,x_18);float a3=smoothstep(e3,e4,x_18);float a4=smoothstep(e4,e5,x_18);float a5=smoothstep(e5,e6,x_18);float a6=smoothstep(e6,e7,x_18);float a7=smoothstep(e7,e8,x_18);float a8=smoothstep(e8,e9,x_18);float a9=smoothstep(e9,e10,x_18);return max(mix(v0,v1,a0)*step(e0,x_18)*step(x_18,e1),max(mix(v1,v2,a1)*step(e1,x_18)*step(x_18,e2),max(mix(v2,v3,a2)*step(e2,x_18)*step(x_18,e3),max(mix(v3,v4,a3)*step(e3,x_18)*step(x_18,e4),max(mix(v4,v5,a4)*step(e4,x_18)*step(x_18,e5),max(mix(v5,v6,a5)*step(e5,x_18)*step(x_18,e6),max(mix(v6,v7,a6)*step(e6,x_18)*step(x_18,e7),max(mix(v7,v8,a7)*step(e7,x_18)*step(x_18,e8),max(mix(v8,v9,a8)*step(e8,x_18)*step(x_18,e9),mix(v9,v10,a9)*step(e9,x_18)*step(x_18,e10))))))))));}vec4 hot(float x_13){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.3;const vec4 v1=vec4(0.9019607843137255,0,0,1);const float e2=0.6;const vec4 v2=vec4(1,0.8235294117647058,0,1);const float e3=1.0;const vec4 v3=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_13);float a1=smoothstep(e1,e2,x_13);float a2=smoothstep(e2,e3,x_13);return max(mix(v0,v1,a0)*step(e0,x_13)*step(x_13,e1),max(mix(v1,v2,a1)*step(e1,x_13)*step(x_13,e2),mix(v2,v3,a2)*step(e2,x_13)*step(x_13,e3)));}vec4 cool(float x_24){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.13;const vec4 v1=vec4(0.4549019607843137,0,0.8549019607843137,1);const float e2=0.25;const vec4 v2=vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);const float e3=0.38;const vec4 v3=vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);const float e4=0.5;const vec4 v4=vec4(0,0.8,0.7725490196078432,1);const float e5=0.63;const vec4 v5=vec4(0,0.9686274509803922,0.5725490196078431,1);const float e6=0.75;const vec4 v6=vec4(0,1,0.34509803921568627,1);const float e7=0.88;const vec4 v7=vec4(0.1568627450980392,1,0.03137254901960784,1);const float e8=1.0;const vec4 v8=vec4(0.5764705882352941,1,0,1);float a0=smoothstep(e0,e1,x_24);float a1=smoothstep(e1,e2,x_24);float a2=smoothstep(e2,e3,x_24);float a3=smoothstep(e3,e4,x_24);float a4=smoothstep(e4,e5,x_24);float a5=smoothstep(e5,e6,x_24);float a6=smoothstep(e6,e7,x_24);float a7=smoothstep(e7,e8,x_24);return max(mix(v0,v1,a0)*step(e0,x_24)*step(x_24,e1),max(mix(v1,v2,a1)*step(e1,x_24)*step(x_24,e2),max(mix(v2,v3,a2)*step(e2,x_24)*step(x_24,e3),max(mix(v3,v4,a3)*step(e3,x_24)*step(x_24,e4),max(mix(v4,v5,a4)*step(e4,x_24)*step(x_24,e5),max(mix(v5,v6,a5)*step(e5,x_24)*step(x_24,e6),max(mix(v6,v7,a6)*step(e6,x_24)*step(x_24,e7),mix(v7,v8,a7)*step(e7,x_24)*step(x_24,e8))))))));}vec4 spring(float x_5){const float e0=0.0;const vec4 v0=vec4(1,0,1,1);const float e1=1.0;const vec4 v1=vec4(1,1,0,1);float a0=smoothstep(e0,e1,x_5);return mix(v0,v1,a0)*step(e0,x_5)*step(x_5,e1);}vec4 summer(float x_12){const float e0=0.0;const vec4 v0=vec4(0,0.5019607843137255,0.4,1);const float e1=1.0;const vec4 v1=vec4(1,1,0.4,1);float a0=smoothstep(e0,e1,x_12);return mix(v0,v1,a0)*step(e0,x_12)*step(x_12,e1);}vec4 autumn(float x_25){const float e0=0.0;const vec4 v0=vec4(1,0,0,1);const float e1=1.0;const vec4 v1=vec4(1,1,0,1);float a0=smoothstep(e0,e1,x_25);return mix(v0,v1,a0)*step(e0,x_25)*step(x_25,e1);}vec4 winter(float x_16){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=1.0;const vec4 v1=vec4(0,1,0.5019607843137255,1);float a0=smoothstep(e0,e1,x_16);return mix(v0,v1,a0)*step(e0,x_16)*step(x_16,e1);}vec4 bone(float x_15){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.376;const vec4 v1=vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);const float e2=0.753;const vec4 v2=vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);const float e3=1.0;const vec4 v3=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_15);float a1=smoothstep(e1,e2,x_15);float a2=smoothstep(e2,e3,x_15);return max(mix(v0,v1,a0)*step(e0,x_15)*step(x_15,e1),max(mix(v1,v2,a1)*step(e1,x_15)*step(x_15,e2),mix(v2,v3,a2)*step(e2,x_15)*step(x_15,e3)));}vec4 copper(float x_10){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.804;const vec4 v1=vec4(1,0.6274509803921569,0.4,1);const float e2=1.0;const vec4 v2=vec4(1,0.7803921568627451,0.4980392156862745,1);float a0=smoothstep(e0,e1,x_10);float a1=smoothstep(e1,e2,x_10);return max(mix(v0,v1,a0)*step(e0,x_10)*step(x_10,e1),mix(v1,v2,a1)*step(e1,x_10)*step(x_10,e2));}vec4 greys(float x_4){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=1.0;const vec4 v1=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_4);return mix(v0,v1,a0)*step(e0,x_4)*step(x_4,e1);}vec4 yignbu(float x_32){const float e0=0.0;const vec4 v0=vec4(0.03137254901960784,0.11372549019607843,0.34509803921568627,1);const float e1=0.125;const vec4 v1=vec4(0.1450980392156863,0.20392156862745098,0.5803921568627451,1);const float e2=0.25;const vec4 v2=vec4(0.13333333333333333,0.3686274509803922,0.6588235294117647,1);const float e3=0.375;const vec4 v3=vec4(0.11372549019607843,0.5686274509803921,0.7529411764705882,1);const float e4=0.5;const vec4 v4=vec4(0.2549019607843137,0.7137254901960784,0.7686274509803922,1);const float e5=0.625;const vec4 v5=vec4(0.4980392156862745,0.803921568627451,0.7333333333333333,1);const float e6=0.75;const vec4 v6=vec4(0.7803921568627451,0.9137254901960784,0.7058823529411765,1);const float e7=0.875;const vec4 v7=vec4(0.9294117647058824,0.9725490196078431,0.8509803921568627,1);const float e8=1.0;const vec4 v8=vec4(1,1,0.8509803921568627,1);float a0=smoothstep(e0,e1,x_32);float a1=smoothstep(e1,e2,x_32);float a2=smoothstep(e2,e3,x_32);float a3=smoothstep(e3,e4,x_32);float a4=smoothstep(e4,e5,x_32);float a5=smoothstep(e5,e6,x_32);float a6=smoothstep(e6,e7,x_32);float a7=smoothstep(e7,e8,x_32);return max(mix(v0,v1,a0)*step(e0,x_32)*step(x_32,e1),max(mix(v1,v2,a1)*step(e1,x_32)*step(x_32,e2),max(mix(v2,v3,a2)*step(e2,x_32)*step(x_32,e3),max(mix(v3,v4,a3)*step(e3,x_32)*step(x_32,e4),max(mix(v4,v5,a4)*step(e4,x_32)*step(x_32,e5),max(mix(v5,v6,a5)*step(e5,x_32)*step(x_32,e6),max(mix(v6,v7,a6)*step(e6,x_32)*step(x_32,e7),mix(v7,v8,a7)*step(e7,x_32)*step(x_32,e8))))))));}vec4 greens(float x_34){const float e0=0.0;const vec4 v0=vec4(0,0.26666666666666666,0.10588235294117647,1);const float e1=0.125;const vec4 v1=vec4(0,0.42745098039215684,0.17254901960784313,1);const float e2=0.25;const vec4 v2=vec4(0.13725490196078433,0.5450980392156862,0.27058823529411763,1);const float e3=0.375;const vec4 v3=vec4(0.2549019607843137,0.6705882352941176,0.36470588235294116,1);const float e4=0.5;const vec4 v4=vec4(0.4549019607843137,0.7686274509803922,0.4627450980392157,1);const float e5=0.625;const vec4 v5=vec4(0.6313725490196078,0.8509803921568627,0.6078431372549019,1);const float e6=0.75;const vec4 v6=vec4(0.7803921568627451,0.9137254901960784,0.7529411764705882,1);const float e7=0.875;const vec4 v7=vec4(0.8980392156862745,0.9607843137254902,0.8784313725490196,1);const float e8=1.0;const vec4 v8=vec4(0.9686274509803922,0.9882352941176471,0.9607843137254902,1);float a0=smoothstep(e0,e1,x_34);float a1=smoothstep(e1,e2,x_34);float a2=smoothstep(e2,e3,x_34);float a3=smoothstep(e3,e4,x_34);float a4=smoothstep(e4,e5,x_34);float a5=smoothstep(e5,e6,x_34);float a6=smoothstep(e6,e7,x_34);float a7=smoothstep(e7,e8,x_34);return max(mix(v0,v1,a0)*step(e0,x_34)*step(x_34,e1),max(mix(v1,v2,a1)*step(e1,x_34)*step(x_34,e2),max(mix(v2,v3,a2)*step(e2,x_34)*step(x_34,e3),max(mix(v3,v4,a3)*step(e3,x_34)*step(x_34,e4),max(mix(v4,v5,a4)*step(e4,x_34)*step(x_34,e5),max(mix(v5,v6,a5)*step(e5,x_34)*step(x_34,e6),max(mix(v6,v7,a6)*step(e6,x_34)*step(x_34,e7),mix(v7,v8,a7)*step(e7,x_34)*step(x_34,e8))))))));}vec4 yiorrd(float x_41){const float e0=0.0;const vec4 v0=vec4(0.5019607843137255,0,0.14901960784313725,1);const float e1=0.125;const vec4 v1=vec4(0.7411764705882353,0,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.8901960784313725,0.10196078431372549,0.10980392156862745,1);const float e3=0.375;const vec4 v3=vec4(0.9882352941176471,0.3058823529411765,0.16470588235294117,1);const float e4=0.5;const vec4 v4=vec4(0.9921568627450981,0.5529411764705883,0.23529411764705882,1);const float e5=0.625;const vec4 v5=vec4(0.996078431372549,0.6980392156862745,0.2980392156862745,1);const float e6=0.75;const vec4 v6=vec4(0.996078431372549,0.8509803921568627,0.4627450980392157,1);const float e7=0.875;const vec4 v7=vec4(1,0.9294117647058824,0.6274509803921569,1);const float e8=1.0;const vec4 v8=vec4(1,1,0.8,1);float a0=smoothstep(e0,e1,x_41);float a1=smoothstep(e1,e2,x_41);float a2=smoothstep(e2,e3,x_41);float a3=smoothstep(e3,e4,x_41);float a4=smoothstep(e4,e5,x_41);float a5=smoothstep(e5,e6,x_41);float a6=smoothstep(e6,e7,x_41);float a7=smoothstep(e7,e8,x_41);return max(mix(v0,v1,a0)*step(e0,x_41)*step(x_41,e1),max(mix(v1,v2,a1)*step(e1,x_41)*step(x_41,e2),max(mix(v2,v3,a2)*step(e2,x_41)*step(x_41,e3),max(mix(v3,v4,a3)*step(e3,x_41)*step(x_41,e4),max(mix(v4,v5,a4)*step(e4,x_41)*step(x_41,e5),max(mix(v5,v6,a5)*step(e5,x_41)*step(x_41,e6),max(mix(v6,v7,a6)*step(e6,x_41)*step(x_41,e7),mix(v7,v8,a7)*step(e7,x_41)*step(x_41,e8))))))));}vec4 bluered(float x_23){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=1.0;const vec4 v1=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_23);return mix(v0,v1,a0)*step(e0,x_23)*step(x_23,e1);}vec4 rdbu(float x_1){const float e0=0.0;const vec4 v0=vec4(0.0196078431372549,0.0392156862745098,0.6745098039215687,1);const float e1=0.35;const vec4 v1=vec4(0.41568627450980394,0.5372549019607843,0.9686274509803922,1);const float e2=0.5;const vec4 v2=vec4(0.7450980392156863,0.7450980392156863,0.7450980392156863,1);const float e3=0.6;const vec4 v3=vec4(0.8627450980392157,0.6666666666666666,0.5176470588235295,1);const float e4=0.7;const vec4 v4=vec4(0.9019607843137255,0.5686274509803921,0.35294117647058826,1);const float e5=1.0;const vec4 v5=vec4(0.6980392156862745,0.0392156862745098,0.10980392156862745,1);float a0=smoothstep(e0,e1,x_1);float a1=smoothstep(e1,e2,x_1);float a2=smoothstep(e2,e3,x_1);float a3=smoothstep(e3,e4,x_1);float a4=smoothstep(e4,e5,x_1);return max(mix(v0,v1,a0)*step(e0,x_1)*step(x_1,e1),max(mix(v1,v2,a1)*step(e1,x_1)*step(x_1,e2),max(mix(v2,v3,a2)*step(e2,x_1)*step(x_1,e3),max(mix(v3,v4,a3)*step(e3,x_1)*step(x_1,e4),mix(v4,v5,a4)*step(e4,x_1)*step(x_1,e5)))));}vec4 picnic(float x_42){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=0.1;const vec4 v1=vec4(0.2,0.6,1,1);const float e2=0.2;const vec4 v2=vec4(0.4,0.8,1,1);const float e3=0.3;const vec4 v3=vec4(0.6,0.8,1,1);const float e4=0.4;const vec4 v4=vec4(0.8,0.8,1,1);const float e5=0.5;const vec4 v5=vec4(1,1,1,1);const float e6=0.6;const vec4 v6=vec4(1,0.8,1,1);const float e7=0.7;const vec4 v7=vec4(1,0.6,1,1);const float e8=0.8;const vec4 v8=vec4(1,0.4,0.8,1);const float e9=0.9;const vec4 v9=vec4(1,0.4,0.4,1);const float e10=1.0;const vec4 v10=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_42);float a1=smoothstep(e1,e2,x_42);float a2=smoothstep(e2,e3,x_42);float a3=smoothstep(e3,e4,x_42);float a4=smoothstep(e4,e5,x_42);float a5=smoothstep(e5,e6,x_42);float a6=smoothstep(e6,e7,x_42);float a7=smoothstep(e7,e8,x_42);float a8=smoothstep(e8,e9,x_42);float a9=smoothstep(e9,e10,x_42);return max(mix(v0,v1,a0)*step(e0,x_42)*step(x_42,e1),max(mix(v1,v2,a1)*step(e1,x_42)*step(x_42,e2),max(mix(v2,v3,a2)*step(e2,x_42)*step(x_42,e3),max(mix(v3,v4,a3)*step(e3,x_42)*step(x_42,e4),max(mix(v4,v5,a4)*step(e4,x_42)*step(x_42,e5),max(mix(v5,v6,a5)*step(e5,x_42)*step(x_42,e6),max(mix(v6,v7,a6)*step(e6,x_42)*step(x_42,e7),max(mix(v7,v8,a7)*step(e7,x_42)*step(x_42,e8),max(mix(v8,v9,a8)*step(e8,x_42)*step(x_42,e9),mix(v9,v10,a9)*step(e9,x_42)*step(x_42,e10))))))))));}vec4 rainbow(float x_31){const float e0=0.0;const vec4 v0=vec4(0.5882352941176471,0,0.35294117647058826,1);const float e1=0.125;const vec4 v1=vec4(0,0,0.7843137254901961,1);const float e2=0.25;const vec4 v2=vec4(0,0.09803921568627451,1,1);const float e3=0.375;const vec4 v3=vec4(0,0.596078431372549,1,1);const float e4=0.5;const vec4 v4=vec4(0.17254901960784313,1,0.5882352941176471,1);const float e5=0.625;const vec4 v5=vec4(0.592156862745098,1,0,1);const float e6=0.75;const vec4 v6=vec4(1,0.9176470588235294,0,1);const float e7=0.875;const vec4 v7=vec4(1,0.43529411764705883,0,1);const float e8=1.0;const vec4 v8=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_31);float a1=smoothstep(e1,e2,x_31);float a2=smoothstep(e2,e3,x_31);float a3=smoothstep(e3,e4,x_31);float a4=smoothstep(e4,e5,x_31);float a5=smoothstep(e5,e6,x_31);float a6=smoothstep(e6,e7,x_31);float a7=smoothstep(e7,e8,x_31);return max(mix(v0,v1,a0)*step(e0,x_31)*step(x_31,e1),max(mix(v1,v2,a1)*step(e1,x_31)*step(x_31,e2),max(mix(v2,v3,a2)*step(e2,x_31)*step(x_31,e3),max(mix(v3,v4,a3)*step(e3,x_31)*step(x_31,e4),max(mix(v4,v5,a4)*step(e4,x_31)*step(x_31,e5),max(mix(v5,v6,a5)*step(e5,x_31)*step(x_31,e6),max(mix(v6,v7,a6)*step(e6,x_31)*step(x_31,e7),mix(v7,v8,a7)*step(e7,x_31)*step(x_31,e8))))))));}vec4 portland(float x_21){const float e0=0.0;const vec4 v0=vec4(0.047058823529411764,0.2,0.5137254901960784,1);const float e1=0.25;const vec4 v1=vec4(0.0392156862745098,0.5333333333333333,0.7294117647058823,1);const float e2=0.5;const vec4 v2=vec4(0.9490196078431372,0.8274509803921568,0.2196078431372549,1);const float e3=0.75;const vec4 v3=vec4(0.9490196078431372,0.5607843137254902,0.2196078431372549,1);const float e4=1.0;const vec4 v4=vec4(0.8509803921568627,0.11764705882352941,0.11764705882352941,1);float a0=smoothstep(e0,e1,x_21);float a1=smoothstep(e1,e2,x_21);float a2=smoothstep(e2,e3,x_21);float a3=smoothstep(e3,e4,x_21);return max(mix(v0,v1,a0)*step(e0,x_21)*step(x_21,e1),max(mix(v1,v2,a1)*step(e1,x_21)*step(x_21,e2),max(mix(v2,v3,a2)*step(e2,x_21)*step(x_21,e3),mix(v3,v4,a3)*step(e3,x_21)*step(x_21,e4))));}vec4 blackbody(float x_38){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.2;const vec4 v1=vec4(0.9019607843137255,0,0,1);const float e2=0.4;const vec4 v2=vec4(0.9019607843137255,0.8235294117647058,0,1);const float e3=0.7;const vec4 v3=vec4(1,1,1,1);const float e4=1.0;const vec4 v4=vec4(0.6274509803921569,0.7843137254901961,1,1);float a0=smoothstep(e0,e1,x_38);float a1=smoothstep(e1,e2,x_38);float a2=smoothstep(e2,e3,x_38);float a3=smoothstep(e3,e4,x_38);return max(mix(v0,v1,a0)*step(e0,x_38)*step(x_38,e1),max(mix(v1,v2,a1)*step(e1,x_38)*step(x_38,e2),max(mix(v2,v3,a2)*step(e2,x_38)*step(x_38,e3),mix(v3,v4,a3)*step(e3,x_38)*step(x_38,e4))));}vec4 earth(float x_29){const float e0=0.0;const vec4 v0=vec4(0,0,0.5098039215686274,1);const float e1=0.1;const vec4 v1=vec4(0,0.7058823529411765,0.7058823529411765,1);const float e2=0.2;const vec4 v2=vec4(0.1568627450980392,0.8235294117647058,0.1568627450980392,1);const float e3=0.4;const vec4 v3=vec4(0.9019607843137255,0.9019607843137255,0.19607843137254902,1);const float e4=0.6;const vec4 v4=vec4(0.47058823529411764,0.27450980392156865,0.0784313725490196,1);const float e5=1.0;const vec4 v5=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_29);float a1=smoothstep(e1,e2,x_29);float a2=smoothstep(e2,e3,x_29);float a3=smoothstep(e3,e4,x_29);float a4=smoothstep(e4,e5,x_29);return max(mix(v0,v1,a0)*step(e0,x_29)*step(x_29,e1),max(mix(v1,v2,a1)*step(e1,x_29)*step(x_29,e2),max(mix(v2,v3,a2)*step(e2,x_29)*step(x_29,e3),max(mix(v3,v4,a3)*step(e3,x_29)*step(x_29,e4),mix(v4,v5,a4)*step(e4,x_29)*step(x_29,e5)))));}vec4 electric(float x_9){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.15;const vec4 v1=vec4(0.11764705882352941,0,0.39215686274509803,1);const float e2=0.4;const vec4 v2=vec4(0.47058823529411764,0,0.39215686274509803,1);const float e3=0.6;const vec4 v3=vec4(0.6274509803921569,0.35294117647058826,0,1);const float e4=0.8;const vec4 v4=vec4(0.9019607843137255,0.7843137254901961,0,1);const float e5=1.0;const vec4 v5=vec4(1,0.9803921568627451,0.8627450980392157,1);float a0=smoothstep(e0,e1,x_9);float a1=smoothstep(e1,e2,x_9);float a2=smoothstep(e2,e3,x_9);float a3=smoothstep(e3,e4,x_9);float a4=smoothstep(e4,e5,x_9);return max(mix(v0,v1,a0)*step(e0,x_9)*step(x_9,e1),max(mix(v1,v2,a1)*step(e1,x_9)*step(x_9,e2),max(mix(v2,v3,a2)*step(e2,x_9)*step(x_9,e3),max(mix(v3,v4,a3)*step(e3,x_9)*step(x_9,e4),mix(v4,v5,a4)*step(e4,x_9)*step(x_9,e5)))));}vec4 alpha(float x_0){const float e0=0.0;const vec4 v0=vec4(1,1,1,0);const float e1=1.0;const vec4 v1=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_0);return mix(v0,v1,a0)*step(e0,x_0)*step(x_0,e1);}vec4 viridis(float x_22){const float e0=0.0;const vec4 v0=vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);const float e1=0.13;const vec4 v1=vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);const float e2=0.25;const vec4 v2=vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);const float e4=0.5;const vec4 v4=vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);const float e5=0.63;const vec4 v5=vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);const float e6=0.75;const vec4 v6=vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);const float e7=0.88;const vec4 v7=vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);float a0=smoothstep(e0,e1,x_22);float a1=smoothstep(e1,e2,x_22);float a2=smoothstep(e2,e3,x_22);float a3=smoothstep(e3,e4,x_22);float a4=smoothstep(e4,e5,x_22);float a5=smoothstep(e5,e6,x_22);float a6=smoothstep(e6,e7,x_22);float a7=smoothstep(e7,e8,x_22);return max(mix(v0,v1,a0)*step(e0,x_22)*step(x_22,e1),max(mix(v1,v2,a1)*step(e1,x_22)*step(x_22,e2),max(mix(v2,v3,a2)*step(e2,x_22)*step(x_22,e3),max(mix(v3,v4,a3)*step(e3,x_22)*step(x_22,e4),max(mix(v4,v5,a4)*step(e4,x_22)*step(x_22,e5),max(mix(v5,v6,a5)*step(e5,x_22)*step(x_22,e6),max(mix(v6,v7,a6)*step(e6,x_22)*step(x_22,e7),mix(v7,v8,a7)*step(e7,x_22)*step(x_22,e8))))))));}vec4 inferno(float x_30){const float e0=0.0;const vec4 v0=vec4(0,0,0.01568627450980392,1);const float e1=0.13;const vec4 v1=vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);const float e2=0.25;const vec4 v2=vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);const float e3=0.38;const vec4 v3=vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);const float e4=0.5;const vec4 v4=vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);const float e5=0.63;const vec4 v5=vec4(0.8901960784313725,0.34901960784313724,0.2,1);const float e6=0.75;const vec4 v6=vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);const float e8=1.0;const vec4 v8=vec4(0.9882352941176471,1,0.6431372549019608,1);float a0=smoothstep(e0,e1,x_30);float a1=smoothstep(e1,e2,x_30);float a2=smoothstep(e2,e3,x_30);float a3=smoothstep(e3,e4,x_30);float a4=smoothstep(e4,e5,x_30);float a5=smoothstep(e5,e6,x_30);float a6=smoothstep(e6,e7,x_30);float a7=smoothstep(e7,e8,x_30);return max(mix(v0,v1,a0)*step(e0,x_30)*step(x_30,e1),max(mix(v1,v2,a1)*step(e1,x_30)*step(x_30,e2),max(mix(v2,v3,a2)*step(e2,x_30)*step(x_30,e3),max(mix(v3,v4,a3)*step(e3,x_30)*step(x_30,e4),max(mix(v4,v5,a4)*step(e4,x_30)*step(x_30,e5),max(mix(v5,v6,a5)*step(e5,x_30)*step(x_30,e6),max(mix(v6,v7,a6)*step(e6,x_30)*step(x_30,e7),mix(v7,v8,a7)*step(e7,x_30)*step(x_30,e8))))))));}vec4 magma(float x_33){const float e0=0.0;const vec4 v0=vec4(0,0,0.01568627450980392,1);const float e1=0.13;const vec4 v1=vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);const float e2=0.25;const vec4 v2=vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);const float e3=0.38;const vec4 v3=vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);const float e4=0.5;const vec4 v4=vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);const float e5=0.63;const vec4 v5=vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);const float e6=0.75;const vec4 v6=vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);const float e8=1.0;const vec4 v8=vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);float a0=smoothstep(e0,e1,x_33);float a1=smoothstep(e1,e2,x_33);float a2=smoothstep(e2,e3,x_33);float a3=smoothstep(e3,e4,x_33);float a4=smoothstep(e4,e5,x_33);float a5=smoothstep(e5,e6,x_33);float a6=smoothstep(e6,e7,x_33);float a7=smoothstep(e7,e8,x_33);return max(mix(v0,v1,a0)*step(e0,x_33)*step(x_33,e1),max(mix(v1,v2,a1)*step(e1,x_33)*step(x_33,e2),max(mix(v2,v3,a2)*step(e2,x_33)*step(x_33,e3),max(mix(v3,v4,a3)*step(e3,x_33)*step(x_33,e4),max(mix(v4,v5,a4)*step(e4,x_33)*step(x_33,e5),max(mix(v5,v6,a5)*step(e5,x_33)*step(x_33,e6),max(mix(v6,v7,a6)*step(e6,x_33)*step(x_33,e7),mix(v7,v8,a7)*step(e7,x_33)*step(x_33,e8))))))));}vec4 plasma(float x_3){const float e0=0.0;const vec4 v0=vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);const float e1=0.13;const vec4 v1=vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);const float e2=0.25;const vec4 v2=vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);const float e3=0.38;const vec4 v3=vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);const float e4=0.5;const vec4 v4=vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);const float e5=0.63;const vec4 v5=vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);const float e6=0.75;const vec4 v6=vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);const float e7=0.88;const vec4 v7=vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);const float e8=1.0;const vec4 v8=vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);float a0=smoothstep(e0,e1,x_3);float a1=smoothstep(e1,e2,x_3);float a2=smoothstep(e2,e3,x_3);float a3=smoothstep(e3,e4,x_3);float a4=smoothstep(e4,e5,x_3);float a5=smoothstep(e5,e6,x_3);float a6=smoothstep(e6,e7,x_3);float a7=smoothstep(e7,e8,x_3);return max(mix(v0,v1,a0)*step(e0,x_3)*step(x_3,e1),max(mix(v1,v2,a1)*step(e1,x_3)*step(x_3,e2),max(mix(v2,v3,a2)*step(e2,x_3)*step(x_3,e3),max(mix(v3,v4,a3)*step(e3,x_3)*step(x_3,e4),max(mix(v4,v5,a4)*step(e4,x_3)*step(x_3,e5),max(mix(v5,v6,a5)*step(e5,x_3)*step(x_3,e6),max(mix(v6,v7,a6)*step(e6,x_3)*step(x_3,e7),mix(v7,v8,a7)*step(e7,x_3)*step(x_3,e8))))))));}vec4 warm(float x_43){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.13;const vec4 v1=vec4(0.6745098039215687,0,0.7333333333333333,1);const float e2=0.25;const vec4 v2=vec4(0.8588235294117647,0,0.6666666666666666,1);const float e3=0.38;const vec4 v3=vec4(1,0,0.5098039215686274,1);const float e4=0.5;const vec4 v4=vec4(1,0.24705882352941178,0.2901960784313726,1);const float e5=0.63;const vec4 v5=vec4(1,0.4823529411764706,0,1);const float e6=0.75;const vec4 v6=vec4(0.9176470588235294,0.6901960784313725,0,1);const float e7=0.88;const vec4 v7=vec4(0.7450980392156863,0.8941176470588236,0,1);const float e8=1.0;const vec4 v8=vec4(0.5764705882352941,1,0,1);float a0=smoothstep(e0,e1,x_43);float a1=smoothstep(e1,e2,x_43);float a2=smoothstep(e2,e3,x_43);float a3=smoothstep(e3,e4,x_43);float a4=smoothstep(e4,e5,x_43);float a5=smoothstep(e5,e6,x_43);float a6=smoothstep(e6,e7,x_43);float a7=smoothstep(e7,e8,x_43);return max(mix(v0,v1,a0)*step(e0,x_43)*step(x_43,e1),max(mix(v1,v2,a1)*step(e1,x_43)*step(x_43,e2),max(mix(v2,v3,a2)*step(e2,x_43)*step(x_43,e3),max(mix(v3,v4,a3)*step(e3,x_43)*step(x_43,e4),max(mix(v4,v5,a4)*step(e4,x_43)*step(x_43,e5),max(mix(v5,v6,a5)*step(e5,x_43)*step(x_43,e6),max(mix(v6,v7,a6)*step(e6,x_43)*step(x_43,e7),mix(v7,v8,a7)*step(e7,x_43)*step(x_43,e8))))))));}vec4 rainbow_soft_1310269270(float x_14){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.1;const vec4 v1=vec4(0.7803921568627451,0,0.7058823529411765,1);const float e2=0.2;const vec4 v2=vec4(1,0,0.4745098039215686,1);const float e3=0.3;const vec4 v3=vec4(1,0.4235294117647059,0,1);const float e4=0.4;const vec4 v4=vec4(0.8705882352941177,0.7607843137254902,0,1);const float e5=0.5;const vec4 v5=vec4(0.5882352941176471,1,0,1);const float e6=0.6;const vec4 v6=vec4(0,1,0.21568627450980393,1);const float e7=0.7;const vec4 v7=vec4(0,0.9647058823529412,0.5882352941176471,1);const float e8=0.8;const vec4 v8=vec4(0.19607843137254902,0.6549019607843137,0.8705882352941177,1);const float e9=0.9;const vec4 v9=vec4(0.403921568627451,0.2,0.9215686274509803,1);const float e10=1.0;const vec4 v10=vec4(0.48627450980392156,0,0.7294117647058823,1);float a0=smoothstep(e0,e1,x_14);float a1=smoothstep(e1,e2,x_14);float a2=smoothstep(e2,e3,x_14);float a3=smoothstep(e3,e4,x_14);float a4=smoothstep(e4,e5,x_14);float a5=smoothstep(e5,e6,x_14);float a6=smoothstep(e6,e7,x_14);float a7=smoothstep(e7,e8,x_14);float a8=smoothstep(e8,e9,x_14);float a9=smoothstep(e9,e10,x_14);return max(mix(v0,v1,a0)*step(e0,x_14)*step(x_14,e1),max(mix(v1,v2,a1)*step(e1,x_14)*step(x_14,e2),max(mix(v2,v3,a2)*step(e2,x_14)*step(x_14,e3),max(mix(v3,v4,a3)*step(e3,x_14)*step(x_14,e4),max(mix(v4,v5,a4)*step(e4,x_14)*step(x_14,e5),max(mix(v5,v6,a5)*step(e5,x_14)*step(x_14,e6),max(mix(v6,v7,a6)*step(e6,x_14)*step(x_14,e7),max(mix(v7,v8,a7)*step(e7,x_14)*step(x_14,e8),max(mix(v8,v9,a8)*step(e8,x_14)*step(x_14,e9),mix(v9,v10,a9)*step(e9,x_14)*step(x_14,e10))))))))));}vec4 bathymetry(float x_36){const float e0=0.0;const vec4 v0=vec4(0.1568627450980392,0.10196078431372549,0.17254901960784313,1);const float e1=0.13;const vec4 v1=vec4(0.23137254901960785,0.19215686274509805,0.35294117647058826,1);const float e2=0.25;const vec4 v2=vec4(0.25098039215686274,0.2980392156862745,0.5450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.24705882352941178,0.43137254901960786,0.592156862745098,1);const float e4=0.5;const vec4 v4=vec4(0.2823529411764706,0.5568627450980392,0.6196078431372549,1);const float e5=0.63;const vec4 v5=vec4(0.3333333333333333,0.6823529411764706,0.6392156862745098,1);const float e6=0.75;const vec4 v6=vec4(0.47058823529411764,0.807843137254902,0.6392156862745098,1);const float e7=0.88;const vec4 v7=vec4(0.7333333333333333,0.9019607843137255,0.6745098039215687,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.996078431372549,0.8,1);float a0=smoothstep(e0,e1,x_36);float a1=smoothstep(e1,e2,x_36);float a2=smoothstep(e2,e3,x_36);float a3=smoothstep(e3,e4,x_36);float a4=smoothstep(e4,e5,x_36);float a5=smoothstep(e5,e6,x_36);float a6=smoothstep(e6,e7,x_36);float a7=smoothstep(e7,e8,x_36);return max(mix(v0,v1,a0)*step(e0,x_36)*step(x_36,e1),max(mix(v1,v2,a1)*step(e1,x_36)*step(x_36,e2),max(mix(v2,v3,a2)*step(e2,x_36)*step(x_36,e3),max(mix(v3,v4,a3)*step(e3,x_36)*step(x_36,e4),max(mix(v4,v5,a4)*step(e4,x_36)*step(x_36,e5),max(mix(v5,v6,a5)*step(e5,x_36)*step(x_36,e6),max(mix(v6,v7,a6)*step(e6,x_36)*step(x_36,e7),mix(v7,v8,a7)*step(e7,x_36)*step(x_36,e8))))))));}vec4 cdom(float x_7){const float e0=0.0;const vec4 v0=vec4(0.1843137254901961,0.058823529411764705,0.24313725490196078,1);const float e1=0.13;const vec4 v1=vec4(0.3411764705882353,0.09019607843137255,0.33725490196078434,1);const float e2=0.25;const vec4 v2=vec4(0.5098039215686274,0.10980392156862745,0.38823529411764707,1);const float e3=0.38;const vec4 v3=vec4(0.6705882352941176,0.1607843137254902,0.3764705882352941,1);const float e4=0.5;const vec4 v4=vec4(0.807843137254902,0.2627450980392157,0.33725490196078434,1);const float e5=0.63;const vec4 v5=vec4(0.9019607843137255,0.41568627450980394,0.32941176470588235,1);const float e6=0.75;const vec4 v6=vec4(0.9490196078431372,0.5843137254901961,0.403921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.7568627450980392,0.5294117647058824,1);const float e8=1.0;const vec4 v8=vec4(0.996078431372549,0.9294117647058824,0.6901960784313725,1);float a0=smoothstep(e0,e1,x_7);float a1=smoothstep(e1,e2,x_7);float a2=smoothstep(e2,e3,x_7);float a3=smoothstep(e3,e4,x_7);float a4=smoothstep(e4,e5,x_7);float a5=smoothstep(e5,e6,x_7);float a6=smoothstep(e6,e7,x_7);float a7=smoothstep(e7,e8,x_7);return max(mix(v0,v1,a0)*step(e0,x_7)*step(x_7,e1),max(mix(v1,v2,a1)*step(e1,x_7)*step(x_7,e2),max(mix(v2,v3,a2)*step(e2,x_7)*step(x_7,e3),max(mix(v3,v4,a3)*step(e3,x_7)*step(x_7,e4),max(mix(v4,v5,a4)*step(e4,x_7)*step(x_7,e5),max(mix(v5,v6,a5)*step(e5,x_7)*step(x_7,e6),max(mix(v6,v7,a6)*step(e6,x_7)*step(x_7,e7),mix(v7,v8,a7)*step(e7,x_7)*step(x_7,e8))))))));}vec4 chlorophyll(float x_6){const float e0=0.0;const vec4 v0=vec4(0.07058823529411765,0.1411764705882353,0.0784313725490196,1);const float e1=0.13;const vec4 v1=vec4(0.09803921568627451,0.24705882352941178,0.1607843137254902,1);const float e2=0.25;const vec4 v2=vec4(0.09411764705882353,0.3568627450980392,0.23137254901960785,1);const float e3=0.38;const vec4 v3=vec4(0.050980392156862744,0.4666666666666667,0.2823529411764706,1);const float e4=0.5;const vec4 v4=vec4(0.07058823529411765,0.5803921568627451,0.3137254901960784,1);const float e5=0.63;const vec4 v5=vec4(0.3137254901960784,0.6784313725490196,0.34901960784313724,1);const float e6=0.75;const vec4 v6=vec4(0.5176470588235295,0.7686274509803922,0.47843137254901963,1);const float e7=0.88;const vec4 v7=vec4(0.6862745098039216,0.8666666666666667,0.6352941176470588,1);const float e8=1.0;const vec4 v8=vec4(0.8431372549019608,0.9764705882352941,0.8156862745098039,1);float a0=smoothstep(e0,e1,x_6);float a1=smoothstep(e1,e2,x_6);float a2=smoothstep(e2,e3,x_6);float a3=smoothstep(e3,e4,x_6);float a4=smoothstep(e4,e5,x_6);float a5=smoothstep(e5,e6,x_6);float a6=smoothstep(e6,e7,x_6);float a7=smoothstep(e7,e8,x_6);return max(mix(v0,v1,a0)*step(e0,x_6)*step(x_6,e1),max(mix(v1,v2,a1)*step(e1,x_6)*step(x_6,e2),max(mix(v2,v3,a2)*step(e2,x_6)*step(x_6,e3),max(mix(v3,v4,a3)*step(e3,x_6)*step(x_6,e4),max(mix(v4,v5,a4)*step(e4,x_6)*step(x_6,e5),max(mix(v5,v6,a5)*step(e5,x_6)*step(x_6,e6),max(mix(v6,v7,a6)*step(e6,x_6)*step(x_6,e7),mix(v7,v8,a7)*step(e7,x_6)*step(x_6,e8))))))));}vec4 density(float x_19){const float e0=0.0;const vec4 v0=vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);const float e1=0.13;const vec4 v1=vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);const float e2=0.25;const vec4 v2=vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);const float e3=0.38;const vec4 v3=vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);const float e4=0.5;const vec4 v4=vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);const float e5=0.63;const vec4 v5=vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);const float e6=0.75;const vec4 v6=vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);const float e7=0.88;const vec4 v7=vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);const float e8=1.0;const vec4 v8=vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);float a0=smoothstep(e0,e1,x_19);float a1=smoothstep(e1,e2,x_19);float a2=smoothstep(e2,e3,x_19);float a3=smoothstep(e3,e4,x_19);float a4=smoothstep(e4,e5,x_19);float a5=smoothstep(e5,e6,x_19);float a6=smoothstep(e6,e7,x_19);float a7=smoothstep(e7,e8,x_19);return max(mix(v0,v1,a0)*step(e0,x_19)*step(x_19,e1),max(mix(v1,v2,a1)*step(e1,x_19)*step(x_19,e2),max(mix(v2,v3,a2)*step(e2,x_19)*step(x_19,e3),max(mix(v3,v4,a3)*step(e3,x_19)*step(x_19,e4),max(mix(v4,v5,a4)*step(e4,x_19)*step(x_19,e5),max(mix(v5,v6,a5)*step(e5,x_19)*step(x_19,e6),max(mix(v6,v7,a6)*step(e6,x_19)*step(x_19,e7),mix(v7,v8,a7)*step(e7,x_19)*step(x_19,e8))))))));}vec4 freesurface_blue_3154355989(float x_35){const float e0=0.0;const vec4 v0=vec4(0.11764705882352941,0.01568627450980392,0.43137254901960786,1);const float e1=0.13;const vec4 v1=vec4(0.1843137254901961,0.054901960784313725,0.6901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.1607843137254902,0.17647058823529413,0.9254901960784314,1);const float e3=0.38;const vec4 v3=vec4(0.09803921568627451,0.38823529411764707,0.8313725490196079,1);const float e4=0.5;const vec4 v4=vec4(0.26666666666666666,0.5137254901960784,0.7843137254901961,1);const float e5=0.63;const vec4 v5=vec4(0.4470588235294118,0.611764705882353,0.7725490196078432,1);const float e6=0.75;const vec4 v6=vec4(0.615686274509804,0.7098039215686275,0.796078431372549,1);const float e7=0.88;const vec4 v7=vec4(0.7843137254901961,0.8156862745098039,0.8470588235294118,1);const float e8=1.0;const vec4 v8=vec4(0.9450980392156862,0.9294117647058824,0.9254901960784314,1);float a0=smoothstep(e0,e1,x_35);float a1=smoothstep(e1,e2,x_35);float a2=smoothstep(e2,e3,x_35);float a3=smoothstep(e3,e4,x_35);float a4=smoothstep(e4,e5,x_35);float a5=smoothstep(e5,e6,x_35);float a6=smoothstep(e6,e7,x_35);float a7=smoothstep(e7,e8,x_35);return max(mix(v0,v1,a0)*step(e0,x_35)*step(x_35,e1),max(mix(v1,v2,a1)*step(e1,x_35)*step(x_35,e2),max(mix(v2,v3,a2)*step(e2,x_35)*step(x_35,e3),max(mix(v3,v4,a3)*step(e3,x_35)*step(x_35,e4),max(mix(v4,v5,a4)*step(e4,x_35)*step(x_35,e5),max(mix(v5,v6,a5)*step(e5,x_35)*step(x_35,e6),max(mix(v6,v7,a6)*step(e6,x_35)*step(x_35,e7),mix(v7,v8,a7)*step(e7,x_35)*step(x_35,e8))))))));}vec4 freesurface_red_1679163293(float x_20){const float e0=0.0;const vec4 v0=vec4(0.23529411764705882,0.03529411764705882,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.39215686274509803,0.06666666666666667,0.10588235294117647,1);const float e2=0.25;const vec4 v2=vec4(0.5568627450980392,0.0784313725490196,0.11372549019607843,1);const float e3=0.38;const vec4 v3=vec4(0.6941176470588235,0.16862745098039217,0.10588235294117647,1);const float e4=0.5;const vec4 v4=vec4(0.7529411764705882,0.3411764705882353,0.24705882352941178,1);const float e5=0.63;const vec4 v5=vec4(0.803921568627451,0.49019607843137253,0.4117647058823529,1);const float e6=0.75;const vec4 v6=vec4(0.8470588235294118,0.6352941176470588,0.5803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.8901960784313725,0.7803921568627451,0.7568627450980392,1);const float e8=1.0;const vec4 v8=vec4(0.9450980392156862,0.9294117647058824,0.9254901960784314,1);float a0=smoothstep(e0,e1,x_20);float a1=smoothstep(e1,e2,x_20);float a2=smoothstep(e2,e3,x_20);float a3=smoothstep(e3,e4,x_20);float a4=smoothstep(e4,e5,x_20);float a5=smoothstep(e5,e6,x_20);float a6=smoothstep(e6,e7,x_20);float a7=smoothstep(e7,e8,x_20);return max(mix(v0,v1,a0)*step(e0,x_20)*step(x_20,e1),max(mix(v1,v2,a1)*step(e1,x_20)*step(x_20,e2),max(mix(v2,v3,a2)*step(e2,x_20)*step(x_20,e3),max(mix(v3,v4,a3)*step(e3,x_20)*step(x_20,e4),max(mix(v4,v5,a4)*step(e4,x_20)*step(x_20,e5),max(mix(v5,v6,a5)*step(e5,x_20)*step(x_20,e6),max(mix(v6,v7,a6)*step(e6,x_20)*step(x_20,e7),mix(v7,v8,a7)*step(e7,x_20)*step(x_20,e8))))))));}vec4 oxygen(float x_11){const float e0=0.0;const vec4 v0=vec4(0.25098039215686274,0.0196078431372549,0.0196078431372549,1);const float e1=0.13;const vec4 v1=vec4(0.41568627450980394,0.023529411764705882,0.058823529411764705,1);const float e2=0.25;const vec4 v2=vec4(0.5647058823529412,0.10196078431372549,0.027450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.6588235294117647,0.25098039215686274,0.011764705882352941,1);const float e4=0.5;const vec4 v4=vec4(0.7372549019607844,0.39215686274509803,0.01568627450980392,1);const float e5=0.63;const vec4 v5=vec4(0.807843137254902,0.5333333333333333,0.043137254901960784,1);const float e6=0.75;const vec4 v6=vec4(0.8627450980392157,0.6823529411764706,0.09803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.9058823529411765,0.8431372549019608,0.17254901960784313,1);const float e8=1.0;const vec4 v8=vec4(0.9725490196078431,0.996078431372549,0.4117647058823529,1);float a0=smoothstep(e0,e1,x_11);float a1=smoothstep(e1,e2,x_11);float a2=smoothstep(e2,e3,x_11);float a3=smoothstep(e3,e4,x_11);float a4=smoothstep(e4,e5,x_11);float a5=smoothstep(e5,e6,x_11);float a6=smoothstep(e6,e7,x_11);float a7=smoothstep(e7,e8,x_11);return max(mix(v0,v1,a0)*step(e0,x_11)*step(x_11,e1),max(mix(v1,v2,a1)*step(e1,x_11)*step(x_11,e2),max(mix(v2,v3,a2)*step(e2,x_11)*step(x_11,e3),max(mix(v3,v4,a3)*step(e3,x_11)*step(x_11,e4),max(mix(v4,v5,a4)*step(e4,x_11)*step(x_11,e5),max(mix(v5,v6,a5)*step(e5,x_11)*step(x_11,e6),max(mix(v6,v7,a6)*step(e6,x_11)*step(x_11,e7),mix(v7,v8,a7)*step(e7,x_11)*step(x_11,e8))))))));}vec4 par(float x_28){const float e0=0.0;const vec4 v0=vec4(0.2,0.0784313725490196,0.09411764705882353,1);const float e1=0.13;const vec4 v1=vec4(0.35294117647058826,0.12549019607843137,0.13725490196078433,1);const float e2=0.25;const vec4 v2=vec4(0.5058823529411764,0.17254901960784313,0.13333333333333333,1);const float e3=0.38;const vec4 v3=vec4(0.6235294117647059,0.26666666666666666,0.09803921568627451,1);const float e4=0.5;const vec4 v4=vec4(0.7137254901960784,0.38823529411764707,0.07450980392156863,1);const float e5=0.63;const vec4 v5=vec4(0.7803921568627451,0.5254901960784314,0.08627450980392157,1);const float e6=0.75;const vec4 v6=vec4(0.8313725490196079,0.6705882352941176,0.13725490196078433,1);const float e7=0.88;const vec4 v7=vec4(0.8666666666666667,0.8235294117647058,0.21176470588235294,1);const float e8=1.0;const vec4 v8=vec4(0.8823529411764706,0.9921568627450981,0.29411764705882354,1);float a0=smoothstep(e0,e1,x_28);float a1=smoothstep(e1,e2,x_28);float a2=smoothstep(e2,e3,x_28);float a3=smoothstep(e3,e4,x_28);float a4=smoothstep(e4,e5,x_28);float a5=smoothstep(e5,e6,x_28);float a6=smoothstep(e6,e7,x_28);float a7=smoothstep(e7,e8,x_28);return max(mix(v0,v1,a0)*step(e0,x_28)*step(x_28,e1),max(mix(v1,v2,a1)*step(e1,x_28)*step(x_28,e2),max(mix(v2,v3,a2)*step(e2,x_28)*step(x_28,e3),max(mix(v3,v4,a3)*step(e3,x_28)*step(x_28,e4),max(mix(v4,v5,a4)*step(e4,x_28)*step(x_28,e5),max(mix(v5,v6,a5)*step(e5,x_28)*step(x_28,e6),max(mix(v6,v7,a6)*step(e6,x_28)*step(x_28,e7),mix(v7,v8,a7)*step(e7,x_28)*step(x_28,e8))))))));}vec4 phase(float x_39){const float e0=0.0;const vec4 v0=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.7215686274509804,0.2784313725490196,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.7294117647058823,0.22745098039215686,0.45098039215686275,1);const float e3=0.38;const vec4 v3=vec4(0.6274509803921569,0.2784313725490196,0.7254901960784313,1);const float e4=0.5;const vec4 v4=vec4(0.43137254901960786,0.3803921568627451,0.8549019607843137,1);const float e5=0.63;const vec4 v5=vec4(0.19607843137254902,0.4823529411764706,0.6431372549019608,1);const float e6=0.75;const vec4 v6=vec4(0.12156862745098039,0.5137254901960784,0.43137254901960786,1);const float e7=0.88;const vec4 v7=vec4(0.30196078431372547,0.5058823529411764,0.13333333333333333,1);const float e8=1.0;const vec4 v8=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);float a0=smoothstep(e0,e1,x_39);float a1=smoothstep(e1,e2,x_39);float a2=smoothstep(e2,e3,x_39);float a3=smoothstep(e3,e4,x_39);float a4=smoothstep(e4,e5,x_39);float a5=smoothstep(e5,e6,x_39);float a6=smoothstep(e6,e7,x_39);float a7=smoothstep(e7,e8,x_39);return max(mix(v0,v1,a0)*step(e0,x_39)*step(x_39,e1),max(mix(v1,v2,a1)*step(e1,x_39)*step(x_39,e2),max(mix(v2,v3,a2)*step(e2,x_39)*step(x_39,e3),max(mix(v3,v4,a3)*step(e3,x_39)*step(x_39,e4),max(mix(v4,v5,a4)*step(e4,x_39)*step(x_39,e5),max(mix(v5,v6,a5)*step(e5,x_39)*step(x_39,e6),max(mix(v6,v7,a6)*step(e6,x_39)*step(x_39,e7),mix(v7,v8,a7)*step(e7,x_39)*step(x_39,e8))))))));}vec4 salinity(float x_26){const float e0=0.0;const vec4 v0=vec4(0.16470588235294117,0.09411764705882353,0.4235294117647059,1);const float e1=0.13;const vec4 v1=vec4(0.12941176470588237,0.19607843137254902,0.6352941176470588,1);const float e2=0.25;const vec4 v2=vec4(0.058823529411764705,0.35294117647058826,0.5686274509803921,1);const float e3=0.38;const vec4 v3=vec4(0.1568627450980392,0.4627450980392157,0.5372549019607843,1);const float e4=0.5;const vec4 v4=vec4(0.23137254901960785,0.5725490196078431,0.5294117647058824,1);const float e5=0.63;const vec4 v5=vec4(0.30980392156862746,0.6862745098039216,0.49411764705882355,1);const float e6=0.75;const vec4 v6=vec4(0.47058823529411764,0.796078431372549,0.40784313725490196,1);const float e7=0.88;const vec4 v7=vec4(0.7568627450980392,0.8666666666666667,0.39215686274509803,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.9372549019607843,0.6039215686274509,1);float a0=smoothstep(e0,e1,x_26);float a1=smoothstep(e1,e2,x_26);float a2=smoothstep(e2,e3,x_26);float a3=smoothstep(e3,e4,x_26);float a4=smoothstep(e4,e5,x_26);float a5=smoothstep(e5,e6,x_26);float a6=smoothstep(e6,e7,x_26);float a7=smoothstep(e7,e8,x_26);return max(mix(v0,v1,a0)*step(e0,x_26)*step(x_26,e1),max(mix(v1,v2,a1)*step(e1,x_26)*step(x_26,e2),max(mix(v2,v3,a2)*step(e2,x_26)*step(x_26,e3),max(mix(v3,v4,a3)*step(e3,x_26)*step(x_26,e4),max(mix(v4,v5,a4)*step(e4,x_26)*step(x_26,e5),max(mix(v5,v6,a5)*step(e5,x_26)*step(x_26,e6),max(mix(v6,v7,a6)*step(e6,x_26)*step(x_26,e7),mix(v7,v8,a7)*step(e7,x_26)*step(x_26,e8))))))));}vec4 temperature(float x_8){const float e0=0.0;const vec4 v0=vec4(0.01568627450980392,0.13725490196078433,0.2,1);const float e1=0.13;const vec4 v1=vec4(0.09019607843137255,0.2,0.47843137254901963,1);const float e2=0.25;const vec4 v2=vec4(0.3333333333333333,0.23137254901960785,0.615686274509804,1);const float e3=0.38;const vec4 v3=vec4(0.5058823529411764,0.30980392156862746,0.5607843137254902,1);const float e4=0.5;const vec4 v4=vec4(0.6862745098039216,0.37254901960784315,0.5098039215686274,1);const float e5=0.63;const vec4 v5=vec4(0.8705882352941177,0.4392156862745098,0.396078431372549,1);const float e6=0.75;const vec4 v6=vec4(0.9764705882352941,0.5725490196078431,0.25882352941176473,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.7686274509803922,0.2549019607843137,1);const float e8=1.0;const vec4 v8=vec4(0.9098039215686274,0.9803921568627451,0.3568627450980392,1);float a0=smoothstep(e0,e1,x_8);float a1=smoothstep(e1,e2,x_8);float a2=smoothstep(e2,e3,x_8);float a3=smoothstep(e3,e4,x_8);float a4=smoothstep(e4,e5,x_8);float a5=smoothstep(e5,e6,x_8);float a6=smoothstep(e6,e7,x_8);float a7=smoothstep(e7,e8,x_8);return max(mix(v0,v1,a0)*step(e0,x_8)*step(x_8,e1),max(mix(v1,v2,a1)*step(e1,x_8)*step(x_8,e2),max(mix(v2,v3,a2)*step(e2,x_8)*step(x_8,e3),max(mix(v3,v4,a3)*step(e3,x_8)*step(x_8,e4),max(mix(v4,v5,a4)*step(e4,x_8)*step(x_8,e5),max(mix(v5,v6,a5)*step(e5,x_8)*step(x_8,e6),max(mix(v6,v7,a6)*step(e6,x_8)*step(x_8,e7),mix(v7,v8,a7)*step(e7,x_8)*step(x_8,e8))))))));}vec4 turbidity(float x_40){const float e0=0.0;const vec4 v0=vec4(0.13333333333333333,0.12156862745098039,0.10588235294117647,1);const float e1=0.13;const vec4 v1=vec4(0.2549019607843137,0.19607843137254902,0.1607843137254902,1);const float e2=0.25;const vec4 v2=vec4(0.3843137254901961,0.27058823529411763,0.20392156862745098,1);const float e3=0.38;const vec4 v3=vec4(0.5137254901960784,0.34901960784313724,0.2235294117647059,1);const float e4=0.5;const vec4 v4=vec4(0.6313725490196078,0.4392156862745098,0.23137254901960785,1);const float e5=0.63;const vec4 v5=vec4(0.7254901960784313,0.5490196078431373,0.25882352941176473,1);const float e6=0.75;const vec4 v6=vec4(0.792156862745098,0.6823529411764706,0.34509803921568627,1);const float e7=0.88;const vec4 v7=vec4(0.8470588235294118,0.8196078431372549,0.49411764705882355,1);const float e8=1.0;const vec4 v8=vec4(0.9137254901960784,0.9647058823529412,0.6705882352941176,1);float a0=smoothstep(e0,e1,x_40);float a1=smoothstep(e1,e2,x_40);float a2=smoothstep(e2,e3,x_40);float a3=smoothstep(e3,e4,x_40);float a4=smoothstep(e4,e5,x_40);float a5=smoothstep(e5,e6,x_40);float a6=smoothstep(e6,e7,x_40);float a7=smoothstep(e7,e8,x_40);return max(mix(v0,v1,a0)*step(e0,x_40)*step(x_40,e1),max(mix(v1,v2,a1)*step(e1,x_40)*step(x_40,e2),max(mix(v2,v3,a2)*step(e2,x_40)*step(x_40,e3),max(mix(v3,v4,a3)*step(e3,x_40)*step(x_40,e4),max(mix(v4,v5,a4)*step(e4,x_40)*step(x_40,e5),max(mix(v5,v6,a5)*step(e5,x_40)*step(x_40,e6),max(mix(v6,v7,a6)*step(e6,x_40)*step(x_40,e7),mix(v7,v8,a7)*step(e7,x_40)*step(x_40,e8))))))));}vec4 velocity_blue_297387650(float x_2){const float e0=0.0;const vec4 v0=vec4(0.06666666666666667,0.12549019607843137,0.25098039215686274,1);const float e1=0.13;const vec4 v1=vec4(0.13725490196078433,0.20392156862745098,0.4549019607843137,1);const float e2=0.25;const vec4 v2=vec4(0.11372549019607843,0.3176470588235294,0.611764705882353,1);const float e3=0.38;const vec4 v3=vec4(0.12156862745098039,0.44313725490196076,0.6352941176470588,1);const float e4=0.5;const vec4 v4=vec4(0.19607843137254902,0.5647058823529412,0.6627450980392157,1);const float e5=0.63;const vec4 v5=vec4(0.3411764705882353,0.6784313725490196,0.6901960784313725,1);const float e6=0.75;const vec4 v6=vec4(0.5843137254901961,0.7686274509803922,0.7411764705882353,1);const float e7=0.88;const vec4 v7=vec4(0.796078431372549,0.8666666666666667,0.8274509803921568,1);const float e8=1.0;const vec4 v8=vec4(0.996078431372549,0.984313725490196,0.9019607843137255,1);float a0=smoothstep(e0,e1,x_2);float a1=smoothstep(e1,e2,x_2);float a2=smoothstep(e2,e3,x_2);float a3=smoothstep(e3,e4,x_2);float a4=smoothstep(e4,e5,x_2);float a5=smoothstep(e5,e6,x_2);float a6=smoothstep(e6,e7,x_2);float a7=smoothstep(e7,e8,x_2);return max(mix(v0,v1,a0)*step(e0,x_2)*step(x_2,e1),max(mix(v1,v2,a1)*step(e1,x_2)*step(x_2,e2),max(mix(v2,v3,a2)*step(e2,x_2)*step(x_2,e3),max(mix(v3,v4,a3)*step(e3,x_2)*step(x_2,e4),max(mix(v4,v5,a4)*step(e4,x_2)*step(x_2,e5),max(mix(v5,v6,a5)*step(e5,x_2)*step(x_2,e6),max(mix(v6,v7,a6)*step(e6,x_2)*step(x_2,e7),mix(v7,v8,a7)*step(e7,x_2)*step(x_2,e8))))))));}vec4 velocity_green_2558432129(float x_27){const float e0=0.0;const vec4 v0=vec4(0.09019607843137255,0.13725490196078433,0.07450980392156863,1);const float e1=0.13;const vec4 v1=vec4(0.09411764705882353,0.25098039215686274,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.043137254901960784,0.37254901960784315,0.17647058823529413,1);const float e3=0.38;const vec4 v3=vec4(0.15294117647058825,0.4823529411764706,0.13725490196078433,1);const float e4=0.5;const vec4 v4=vec4(0.37254901960784315,0.5725490196078431,0.047058823529411764,1);const float e5=0.63;const vec4 v5=vec4(0.596078431372549,0.6470588235294118,0.07058823529411765,1);const float e6=0.75;const vec4 v6=vec4(0.788235294117647,0.7294117647058823,0.27058823529411763,1);const float e7=0.88;const vec4 v7=vec4(0.9137254901960784,0.8470588235294118,0.5372549019607843,1);const float e8=1.0;const vec4 v8=vec4(1,0.9921568627450981,0.803921568627451,1);float a0=smoothstep(e0,e1,x_27);float a1=smoothstep(e1,e2,x_27);float a2=smoothstep(e2,e3,x_27);float a3=smoothstep(e3,e4,x_27);float a4=smoothstep(e4,e5,x_27);float a5=smoothstep(e5,e6,x_27);float a6=smoothstep(e6,e7,x_27);float a7=smoothstep(e7,e8,x_27);return max(mix(v0,v1,a0)*step(e0,x_27)*step(x_27,e1),max(mix(v1,v2,a1)*step(e1,x_27)*step(x_27,e2),max(mix(v2,v3,a2)*step(e2,x_27)*step(x_27,e3),max(mix(v3,v4,a3)*step(e3,x_27)*step(x_27,e4),max(mix(v4,v5,a4)*step(e4,x_27)*step(x_27,e5),max(mix(v5,v6,a5)*step(e5,x_27)*step(x_27,e6),max(mix(v6,v7,a6)*step(e6,x_27)*step(x_27,e7),mix(v7,v8,a7)*step(e7,x_27)*step(x_27,e8))))))));}vec4 cubehelix(float x_37){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.07;const vec4 v1=vec4(0.08627450980392157,0.0196078431372549,0.23137254901960785,1);const float e2=0.13;const vec4 v2=vec4(0.23529411764705882,0.01568627450980392,0.4117647058823529,1);const float e3=0.2;const vec4 v3=vec4(0.42745098039215684,0.00392156862745098,0.5294117647058824,1);const float e4=0.27;const vec4 v4=vec4(0.6313725490196078,0,0.5764705882352941,1);const float e5=0.33;const vec4 v5=vec4(0.8235294117647058,0.00784313725490196,0.5568627450980392,1);const float e6=0.4;const vec4 v6=vec4(0.984313725490196,0.043137254901960784,0.4823529411764706,1);const float e7=0.47;const vec4 v7=vec4(1,0.11372549019607843,0.3803921568627451,1);const float e8=0.53;const vec4 v8=vec4(1,0.21176470588235294,0.27058823529411763,1);const float e9=0.6;const vec4 v9=vec4(1,0.3333333333333333,0.1803921568627451,1);const float e10=0.67;const vec4 v10=vec4(1,0.47058823529411764,0.13333333333333333,1);const float e11=0.73;const vec4 v11=vec4(1,0.615686274509804,0.1450980392156863,1);const float e12=0.8;const vec4 v12=vec4(0.9450980392156862,0.7490196078431373,0.2235294117647059,1);const float e13=0.87;const vec4 v13=vec4(0.8784313725490196,0.8627450980392157,0.36470588235294116,1);const float e14=0.93;const vec4 v14=vec4(0.8549019607843137,0.9450980392156862,0.5568627450980392,1);const float e15=1.0;const vec4 v15=vec4(0.8901960784313725,0.9921568627450981,0.7764705882352941,1);float a0=smoothstep(e0,e1,x_37);float a1=smoothstep(e1,e2,x_37);float a2=smoothstep(e2,e3,x_37);float a3=smoothstep(e3,e4,x_37);float a4=smoothstep(e4,e5,x_37);float a5=smoothstep(e5,e6,x_37);float a6=smoothstep(e6,e7,x_37);float a7=smoothstep(e7,e8,x_37);float a8=smoothstep(e8,e9,x_37);float a9=smoothstep(e9,e10,x_37);float a10=smoothstep(e10,e11,x_37);float a11=smoothstep(e11,e12,x_37);float a12=smoothstep(e12,e13,x_37);float a13=smoothstep(e13,e14,x_37);float a14=smoothstep(e14,e15,x_37);return max(mix(v0,v1,a0)*step(e0,x_37)*step(x_37,e1),max(mix(v1,v2,a1)*step(e1,x_37)*step(x_37,e2),max(mix(v2,v3,a2)*step(e2,x_37)*step(x_37,e3),max(mix(v3,v4,a3)*step(e3,x_37)*step(x_37,e4),max(mix(v4,v5,a4)*step(e4,x_37)*step(x_37,e5),max(mix(v5,v6,a5)*step(e5,x_37)*step(x_37,e6),max(mix(v6,v7,a6)*step(e6,x_37)*step(x_37,e7),max(mix(v7,v8,a7)*step(e7,x_37)*step(x_37,e8),max(mix(v8,v9,a8)*step(e8,x_37)*step(x_37,e9),max(mix(v9,v10,a9)*step(e9,x_37)*step(x_37,e10),max(mix(v10,v11,a10)*step(e10,x_37)*step(x_37,e11),max(mix(v11,v12,a11)*step(e11,x_37)*step(x_37,e12),max(mix(v12,v13,a12)*step(e12,x_37)*step(x_37,e13),max(mix(v13,v14,a13)*step(e13,x_37)*step(x_37,e14),mix(v14,v15,a14)*step(e14,x_37)*step(x_37,e15)))))))))))))));}float sample_and_apply_contrast_limits(SAMPLER_TYPE channel,vec2 vTexCoord,vec2 contrastLimits){float fragIntensity=float(texture(channel,vTexCoord).r);float contrastLimitsAppliedToIntensity=(fragIntensity-contrastLimits[0])/max(0.0005,(contrastLimits[1]-contrastLimits[0]));return max(0.,contrastLimitsAppliedToIntensity);}vec3 process_channel_intensity(float intensity,vec3 colors,int channelIndex,bool inLensAndUseLens,int lensSelection){float useColorValue=float(int((inLensAndUseLens&&channelIndex==lensSelection)||(!inLensAndUseLens)));vec3 rgb=max(0.,min(1.,intensity))*max(vec3(colors),(1.-useColorValue)*vec3(1.,1.,1.));return rgb;}vec4 apply_opacity(vec3 color,bool useTransparentColor,vec3 transparentColor,float opacity){return vec4(color,(color==transparentColor&&useTransparentColor)? 0. : opacity);}vec4 colormap(float intensity,float opacity,bool useTransparentColor){return apply_opacity(COLORMAP_FUNCTION(min(1.,intensity)).xyz,useTransparentColor,COLORMAP_FUNCTION(0.).xyz,opacity);}";
var channels$1 = {
  name: "channel-intensity-module",
  defines: {
    SAMPLER_TYPE: "usampler2D",
    COLORMAP_FUNCTION: ""
  },
  fs: fs$3
};
var fs$2 = "#define GLSLIFY 1\nbool frag_in_lens_bounds(vec2 lensCenter,vec2 vTexCoord,float majorLensAxis,float minorLensAxis,float lensBorderRadius){return pow((lensCenter.x-vTexCoord.x)/majorLensAxis,2.)+pow((lensCenter.y-vTexCoord.y)/minorLensAxis,2.)<(1.-lensBorderRadius);}bool frag_on_lens_bounds(vec2 lensCenter,vec2 vTexCoord,float majorLensAxis,float minorLensAxis,float lensBorderRadius){float ellipseDistance=pow((lensCenter.x-vTexCoord.x)/majorLensAxis,2.)+pow((lensCenter.y-vTexCoord.y)/minorLensAxis,2.);return ellipseDistance<=1.&&ellipseDistance>=(1.-lensBorderRadius);}";
var lens = {
  name: "lens-module",
  defines: {
    SAMPLER_TYPE: "usampler2D"
  },
  fs: fs$2
};
var MAX_COLOR_INTENSITY = 255;
var DEFAULT_COLOR_OFF = [0, 0, 0];
var MAX_CHANNELS = 6;
var DEFAULT_FONT_FAMILY = "-apple-system, 'Helvetica Neue', Arial, sans-serif";
var DTYPE_VALUES = {
  Uint8: {
    format: GL.R8UI,
    dataFormat: GL.RED_INTEGER,
    type: GL.UNSIGNED_BYTE,
    max: __pow(2, 8) - 1,
    sampler: "usampler2D"
  },
  Uint16: {
    format: GL.R16UI,
    dataFormat: GL.RED_INTEGER,
    type: GL.UNSIGNED_SHORT,
    max: __pow(2, 16) - 1,
    sampler: "usampler2D"
  },
  Uint32: {
    format: GL.R32UI,
    dataFormat: GL.RED_INTEGER,
    type: GL.UNSIGNED_INT,
    max: __pow(2, 32) - 1,
    sampler: "usampler2D"
  },
  Float32: {
    format: GL.R32F,
    dataFormat: GL.RED,
    type: GL.FLOAT,
    max: 3.4 * __pow(10, 38),
    sampler: "sampler2D"
  },
  Int8: {
    format: GL.R8I,
    dataFormat: GL.RED_INTEGER,
    type: GL.BYTE,
    max: __pow(2, 8 - 1) - 1,
    sampler: "isampler2D"
  },
  Int16: {
    format: GL.R16I,
    dataFormat: GL.RED_INTEGER,
    type: GL.SHORT,
    max: __pow(2, 16 - 1) - 1,
    sampler: "isampler2D"
  },
  Int32: {
    format: GL.R32I,
    dataFormat: GL.RED_INTEGER,
    type: GL.INT,
    max: __pow(2, 32 - 1) - 1,
    sampler: "isampler2D"
  },
  Float64: {
    format: GL.R32F,
    dataFormat: GL.RED,
    type: GL.FLOAT,
    max: 3.4 * __pow(10, 38),
    sampler: "sampler2D",
    cast: (data) => new Float32Array(data)
  }
};
var COLORMAPS = [
  "jet",
  "hsv",
  "hot",
  "cool",
  "spring",
  "summer",
  "autumn",
  "winter",
  "bone",
  "copper",
  "greys",
  "yignbu",
  "greens",
  "yiorrd",
  "bluered",
  "rdbu",
  "picnic",
  "rainbow",
  "portland",
  "blackbody",
  "earth",
  "electric",
  "alpha",
  "viridis",
  "inferno",
  "magma",
  "plasma",
  "warm",
  "rainbow-soft",
  "bathymetry",
  "cdom",
  "chlorophyll",
  "density",
  "freesurface-blue",
  "freesurface-red",
  "oxygen",
  "par",
  "phase",
  "salinity",
  "temperature",
  "turbidity",
  "velocity-blue",
  "velocity-green",
  "cubehelix"
];
var RENDERING_MODES;
(function(RENDERING_MODES2) {
  RENDERING_MODES2["MAX_INTENSITY_PROJECTION"] = "Maximum Intensity Projection";
  RENDERING_MODES2["MIN_INTENSITY_PROJECTION"] = "Minimum Intensity Projection";
  RENDERING_MODES2["ADDITIVE"] = "Additive";
})(RENDERING_MODES || (RENDERING_MODES = {}));
function range2(len) {
  return [...Array(len).keys()];
}
function padWithDefault(arr, defaultValue, padWidth) {
  for (let i = 0; i < padWidth; i += 1) {
    arr.push(defaultValue);
  }
  return arr;
}
function getDtypeValues(dtype) {
  const values = DTYPE_VALUES[dtype];
  if (!values) {
    const valid = Object.keys(DTYPE_VALUES);
    throw Error(`Dtype not supported, got ${dtype}. Must be one of ${valid}.`);
  }
  return values;
}
function padColorsAndWindows({
  contrastLimits,
  colors,
  channelsVisible,
  domain,
  dtype
}) {
  const lengths = [contrastLimits.length, colors.length];
  if (lengths.every((l) => l !== lengths[0])) {
    throw Error("Inconsistent number of slider values and colors provided");
  }
  const newColors = colors.map((color, i) => channelsVisible[i] ? color.map((c) => c / MAX_COLOR_INTENSITY) : DEFAULT_COLOR_OFF);
  const maxSliderValue = domain && domain[1] || getDtypeValues(dtype).max;
  const newContrastLimits = contrastLimits.map((slider, i) => channelsVisible[i] ? slider : [maxSliderValue, maxSliderValue]);
  const padSize = MAX_CHANNELS - newColors.length;
  if (padSize < 0) {
    throw Error(`${lengths} channels passed in, but only 6 are allowed.`);
  }
  const paddedColors = padWithDefault(newColors, DEFAULT_COLOR_OFF, padSize);
  const paddedContrastLimits = padWithDefault(newContrastLimits, [maxSliderValue, maxSliderValue], padSize);
  const paddedColorsAndWindows = {
    paddedContrastLimits: paddedContrastLimits.reduce((acc, val) => acc.concat(val), []),
    paddedColors: paddedColors.reduce((acc, val) => acc.concat(val), [])
  };
  return paddedColorsAndWindows;
}
function onPointer(layer) {
  const { viewportId, lensRadius } = layer.props;
  if (!viewportId) {
    layer.setState({ unprojectLensBounds: [0, 0, 0, 0] });
    return;
  }
  const { mousePosition } = layer.context;
  const layerView = layer.context.deck.viewManager.views.filter((view) => view.id === viewportId)[0];
  const viewState = layer.context.deck.viewManager.viewState[viewportId];
  const viewport = layerView.makeViewport(__spreadProps(__spreadValues({}, viewState), {
    viewState
  }));
  if (mousePosition && viewport.containsPixel(mousePosition)) {
    const offsetMousePosition = {
      x: mousePosition.x - viewport.x,
      y: mousePosition.y - viewport.y
    };
    const mousePositionBounds = [
      [offsetMousePosition.x - lensRadius, offsetMousePosition.y],
      [offsetMousePosition.x, offsetMousePosition.y + lensRadius],
      [offsetMousePosition.x + lensRadius, offsetMousePosition.y],
      [offsetMousePosition.x, offsetMousePosition.y - lensRadius]
    ];
    const unprojectLensBounds = mousePositionBounds.map((bounds, i) => viewport.unproject(bounds)[i % 2]);
    layer.setState({ unprojectLensBounds });
  } else {
    layer.setState({ unprojectLensBounds: [0, 0, 0, 0] });
  }
}
function getPhysicalSizeScalingMatrix(loader) {
  var _a2, _b2;
  const { x, y, z } = (_b2 = (_a2 = loader == null ? void 0 : loader.meta) == null ? void 0 : _a2.physicalSizes) != null ? _b2 : {};
  if ((x == null ? void 0 : x.size) && (y == null ? void 0 : y.size) && (z == null ? void 0 : z.size)) {
    const min = Math.min(z.size, x.size, y.size);
    const ratio = [x.size / min, y.size / min, z.size / min];
    return new Matrix4().scale(ratio);
  }
  return new Matrix4().identity();
}
var SHADER_MODULES = [
  { fs: fs1, fscmap: fsColormap1, vs: vs1 },
  { fs: fs2, fscmap: fsColormap2, vs: vs2 }
];
function validateWebGL2Filter(gl, interpolation) {
  const canShowFloat = hasFeature(gl, FEATURES.TEXTURE_FLOAT);
  const canShowLinear = hasFeature(gl, FEATURES.TEXTURE_FILTER_LINEAR_FLOAT);
  if (!canShowFloat) {
    throw new Error("WebGL1 context does not support floating point textures.  Unable to display raster data.");
  }
  if (!canShowLinear && interpolation === GL.LINEAR) {
    console.warn("LINEAR filtering not supported in WebGL1 context.  Falling back to NEAREST.");
    return GL.NEAREST;
  }
  return interpolation;
}
function getRenderingAttrs$1(dtype, gl, interpolation) {
  const isLinear = interpolation === GL.LINEAR;
  if (!isWebGL2(gl)) {
    return {
      format: GL.LUMINANCE,
      dataFormat: GL.LUMINANCE,
      type: GL.FLOAT,
      sampler: "sampler2D",
      shaderModule: SHADER_MODULES[0],
      filter: validateWebGL2Filter(gl, interpolation),
      cast: (data) => new Float32Array(data)
    };
  }
  const values = getDtypeValues(isLinear ? "Float32" : dtype);
  return __spreadProps(__spreadValues({}, values), {
    shaderModule: SHADER_MODULES[1],
    filter: interpolation,
    cast: isLinear ? (data) => new Float32Array(data) : (data) => data
  });
}
var defaultProps$8 = {
  pickable: { type: "boolean", value: true, compare: true },
  coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
  channelData: { type: "object", value: {}, compare: true },
  bounds: { type: "array", value: [0, 0, 1, 1], compare: true },
  colors: { type: "array", value: [], compare: true },
  contrastLimits: { type: "array", value: [], compare: true },
  channelsVisible: { type: "array", value: [], compare: true },
  opacity: { type: "number", value: 1, compare: true },
  dtype: { type: "string", value: "Uint16", compare: true },
  colormap: { type: "string", value: "", compare: true },
  isLensOn: { type: "boolean", value: false, compare: true },
  lensSelection: { type: "number", value: 0, compare: true },
  lensBorderColor: { type: "array", value: [255, 255, 255], compare: true },
  lensBorderRadius: { type: "number", value: 0.02, compare: true },
  unprojectLensBounds: { type: "array", value: [0, 0, 0, 0], compare: true },
  transparentColor: { type: "array", value: null, compare: true },
  interpolation: {
    type: "number",
    value: GL.NEAREST,
    compare: true
  }
};
var XRLayer = class extends Layer {
  getShaders() {
    const { colormap, dtype, interpolation } = this.props;
    const { shaderModule, sampler } = getRenderingAttrs$1(dtype, this.context.gl, interpolation);
    return super.getShaders({
      fs: colormap ? shaderModule.fscmap : shaderModule.fs,
      vs: shaderModule.vs,
      defines: {
        SAMPLER_TYPE: sampler,
        COLORMAP_FUNCTION: colormap || "viridis"
      },
      modules: [project32, picking, channels$1, lens]
    });
  }
  initializeState() {
    const { gl } = this.context;
    gl.pixelStorei(GL.UNPACK_ALIGNMENT, 1);
    gl.pixelStorei(GL.PACK_ALIGNMENT, 1);
    const attributeManager = this.getAttributeManager();
    attributeManager.add({
      positions: {
        size: 3,
        type: GL.DOUBLE,
        fp64: this.use64bitPositions(),
        update: this.calculatePositions,
        noAlloc: true
      }
    });
    this.setState({
      numInstances: 1,
      positions: new Float64Array(12)
    });
  }
  finalizeState() {
    super.finalizeState();
    if (this.state.textures) {
      Object.values(this.state.textures).forEach((tex) => tex && tex.delete());
    }
  }
  updateState({ props, oldProps, changeFlags }) {
    var _a2, _b2;
    if (changeFlags.extensionsChanged || props.colormap !== oldProps.colormap || props.interpolation !== oldProps.interpolation) {
      const { gl } = this.context;
      if (this.state.model) {
        this.state.model.delete();
      }
      this.setState({ model: this._getModel(gl) });
      this.getAttributeManager().invalidateAll();
    }
    if (props.channelData !== oldProps.channelData && ((_a2 = props.channelData) == null ? void 0 : _a2.data) !== ((_b2 = oldProps.channelData) == null ? void 0 : _b2.data) || props.interpolation !== oldProps.interpolation) {
      this.loadChannelTextures(props.channelData);
    }
    const attributeManager = this.getAttributeManager();
    if (props.bounds !== oldProps.bounds) {
      attributeManager.invalidate("positions");
    }
  }
  _getModel(gl) {
    if (!gl) {
      return null;
    }
    return new Model(gl, __spreadProps(__spreadValues({}, this.getShaders()), {
      id: this.props.id,
      geometry: new Geometry({
        drawMode: GL.TRIANGLE_FAN,
        vertexCount: 4,
        attributes: {
          texCoords: new Float32Array([0, 1, 0, 0, 1, 0, 1, 1])
        }
      }),
      isInstanced: false
    }));
  }
  calculatePositions(attributes) {
    const { positions } = this.state;
    const { bounds } = this.props;
    positions[0] = bounds[0];
    positions[1] = bounds[1];
    positions[2] = 0;
    positions[3] = bounds[0];
    positions[4] = bounds[3];
    positions[5] = 0;
    positions[6] = bounds[2];
    positions[7] = bounds[3];
    positions[8] = 0;
    positions[9] = bounds[2];
    positions[10] = bounds[1];
    positions[11] = 0;
    attributes.value = positions;
  }
  draw({ uniforms }) {
    const { textures, model } = this.state;
    if (textures && model) {
      const {
        contrastLimits,
        colors,
        opacity,
        domain,
        dtype,
        channelsVisible,
        unprojectLensBounds,
        bounds,
        isLensOn,
        lensSelection,
        lensBorderColor,
        lensBorderRadius,
        transparentColor
      } = this.props;
      const numTextures = Object.values(textures).filter((t) => t).length;
      const { paddedContrastLimits, paddedColors } = padColorsAndWindows({
        contrastLimits: contrastLimits.slice(0, numTextures),
        colors: colors.slice(0, numTextures),
        channelsVisible: channelsVisible.slice(0, numTextures),
        domain,
        dtype
      });
      const [
        leftMouseBound,
        bottomMouseBound,
        rightMouseBound,
        topMouseBound
      ] = unprojectLensBounds;
      const [left, bottom, right, top] = bounds;
      const leftMouseBoundScaled = (leftMouseBound - left) / (right - left);
      const bottomMouseBoundScaled = (bottomMouseBound - top) / (bottom - top);
      const rightMouseBoundScaled = (rightMouseBound - left) / (right - left);
      const topMouseBoundScaled = (topMouseBound - top) / (bottom - top);
      model.setUniforms(__spreadValues(__spreadProps(__spreadValues({}, uniforms), {
        colors: paddedColors,
        contrastLimits: paddedContrastLimits,
        opacity,
        majorLensAxis: (rightMouseBoundScaled - leftMouseBoundScaled) / 2,
        minorLensAxis: (bottomMouseBoundScaled - topMouseBoundScaled) / 2,
        lensCenter: [
          (rightMouseBoundScaled + leftMouseBoundScaled) / 2,
          (bottomMouseBoundScaled + topMouseBoundScaled) / 2
        ],
        isLensOn,
        lensSelection,
        lensBorderColor,
        lensBorderRadius,
        transparentColor: (transparentColor || [0, 0, 0]).map((i) => i / 255),
        useTransparentColor: Boolean(transparentColor)
      }), textures)).draw();
    }
  }
  loadChannelTextures(channelData) {
    const textures = {
      channel0: null,
      channel1: null,
      channel2: null,
      channel3: null,
      channel4: null,
      channel5: null
    };
    if (this.state.textures) {
      Object.values(this.state.textures).forEach((tex) => tex && tex.delete());
    }
    if (channelData && Object.keys(channelData).length > 0 && channelData.data) {
      channelData.data.forEach((d, i) => {
        textures[`channel${i}`] = this.dataToTexture(d, channelData.width, channelData.height);
      }, this);
      this.setState({ textures });
    }
  }
  dataToTexture(data, width, height) {
    var _a2, _b2;
    const { interpolation } = this.props;
    const attrs = getRenderingAttrs$1(this.props.dtype, this.context.gl, interpolation);
    return new Texture2D(this.context.gl, {
      width,
      height,
      data: (_b2 = (_a2 = attrs.cast) == null ? void 0 : _a2.call(attrs, data)) != null ? _b2 : data,
      mipmaps: false,
      parameters: {
        [GL.TEXTURE_MIN_FILTER]: attrs.filter,
        [GL.TEXTURE_MAG_FILTER]: attrs.filter,
        [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,
        [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE
      },
      format: attrs.format,
      dataFormat: attrs.dataFormat,
      type: attrs.type
    });
  }
};
XRLayer.layerName = "XRLayer";
XRLayer.defaultProps = defaultProps$8;
var PHOTOMETRIC_INTERPRETATIONS = {
  WhiteIsZero: 0,
  BlackIsZero: 1,
  RGB: 2,
  Palette: 3,
  TransparencyMask: 4,
  CMYK: 5,
  YCbCr: 6,
  CIELab: 8,
  ICCLab: 9
};
var defaultProps$7 = __spreadProps(__spreadValues({}, BitmapLayer$1.defaultProps), {
  pickable: { type: "boolean", value: true, compare: true },
  coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN
});
var getPhotometricInterpretationShader = (photometricInterpretation, transparentColorInHook) => {
  const useTransparentColor = transparentColorInHook ? "true" : "false";
  const transparentColorVector = `vec3(${(transparentColorInHook || [0, 0, 0]).map((i) => String(i / 255)).join(",")})`;
  switch (photometricInterpretation) {
    case PHOTOMETRIC_INTERPRETATIONS.RGB:
      return `color[3] = (${useTransparentColor} && (color.rgb == ${transparentColorVector})) ? 0.0 : color.a;`;
    case PHOTOMETRIC_INTERPRETATIONS.WhiteIsZero:
      return `          float value = 1.0 - (color.r / 256.0);
          color = vec4(value, value, value, (${useTransparentColor} && vec3(value, value, value) == ${transparentColorVector}) ? 0.0 : color.a);
        `;
    case PHOTOMETRIC_INTERPRETATIONS.BlackIsZero:
      return `          float value = (color.r / 256.0);
          color = vec4(value, value, value, (${useTransparentColor} && vec3(value, value, value) == ${transparentColorVector}) ? 0.0 : color.a);
        `;
    case PHOTOMETRIC_INTERPRETATIONS.YCbCr:
      return `          float y = color[0];
          float cb = color[1];
          float cr = color[2];
          color[0] = (y + (1.40200 * (cr - .5)));
          color[1] = (y - (0.34414 * (cb - .5)) - (0.71414 * (cr - .5)));
          color[2] = (y + (1.77200 * (cb - .5)));
          color[3] = (${useTransparentColor} && distance(color.rgb, ${transparentColorVector}) < 0.01) ? 0.0 : color.a;
        `;
    default:
      console.error("Unsupported photometric interpretation or none provided.  No transformation will be done to image data");
      return "";
  }
};
var getTransparentColor = (photometricInterpretation) => {
  switch (photometricInterpretation) {
    case PHOTOMETRIC_INTERPRETATIONS.RGB:
      return [0, 0, 0, 0];
    case PHOTOMETRIC_INTERPRETATIONS.WhiteIsZero:
      return [255, 255, 255, 0];
    case PHOTOMETRIC_INTERPRETATIONS.BlackIsZero:
      return [0, 0, 0, 0];
    case PHOTOMETRIC_INTERPRETATIONS.YCbCr:
      return [16, 128, 128, 0];
    default:
      console.error("Unsupported photometric interpretation or none provided.  No transformation will be done to image data");
      return [0, 0, 0, 0];
  }
};
var BitmapLayerWrapper = class extends BitmapLayer$1 {
  _getModel(gl) {
    const { photometricInterpretation, transparentColorInHook } = this.props;
    const photometricInterpretationShader = getPhotometricInterpretationShader(photometricInterpretation, transparentColorInHook);
    if (!gl) {
      return null;
    }
    return new Model(gl, __spreadProps(__spreadValues({}, this.getShaders()), {
      id: this.props.id,
      geometry: new Geometry({
        drawMode: GL.TRIANGLES,
        vertexCount: 6
      }),
      isInstanced: false,
      inject: {
        "fs:DECKGL_FILTER_COLOR": photometricInterpretationShader
      }
    }));
  }
};
var BitmapLayer = class extends CompositeLayer {
  initializeState(args) {
    const { gl } = this.context;
    gl.pixelStorei(GL.UNPACK_ALIGNMENT, 1);
    gl.pixelStorei(GL.PACK_ALIGNMENT, 1);
    super.initializeState(args);
  }
  renderLayers() {
    const {
      photometricInterpretation,
      transparentColor: transparentColorInHook
    } = this.props;
    const transparentColor = getTransparentColor(photometricInterpretation);
    return new BitmapLayerWrapper(this.props, {
      transparentColor,
      transparentColorInHook,
      id: `${this.props.id}-wrapped`
    });
  }
};
BitmapLayer.layerName = "BitmapLayer";
BitmapLayer.PHOTOMETRIC_INTERPRETATIONS = PHOTOMETRIC_INTERPRETATIONS;
BitmapLayer.defaultProps = __spreadProps(__spreadValues({}, defaultProps$7), {
  image: { type: "object", value: {}, compare: true },
  transparentColor: { type: "array", value: [0, 0, 0], compare: true },
  photometricInterpretation: { type: "number", value: 2, compare: true }
});
BitmapLayerWrapper.defaultProps = defaultProps$7;
BitmapLayerWrapper.layerName = "BitmapLayerWrapper";
function getChannelStats(arr) {
  let len = arr.length;
  let min = Infinity;
  let max2 = -Infinity;
  let total = 0;
  while (len--) {
    if (arr[len] < min) {
      min = arr[len];
    }
    if (arr[len] > max2) {
      max2 = arr[len];
    }
    total += arr[len];
  }
  const mean = total / arr.length;
  len = arr.length;
  let sumSquared = 0;
  while (len--) {
    sumSquared += __pow(arr[len] - mean, 2);
  }
  const sd = __pow(sumSquared / arr.length, 0.5);
  const mid = Math.floor(arr.length / 2);
  const firstQuartileLocation = Math.floor(arr.length / 4);
  const thirdQuartileLocation = 3 * Math.floor(arr.length / 4);
  quickselect(arr, mid);
  const median = arr[mid];
  quickselect(arr, firstQuartileLocation, 0, mid);
  const q1 = arr[firstQuartileLocation];
  quickselect(arr, thirdQuartileLocation, mid, arr.length - 1);
  const q3 = arr[thirdQuartileLocation];
  const cutoffArr = arr.filter((i) => i > 0);
  const cutoffPercentile = 5e-4;
  const topCutoffLocation = Math.floor(cutoffArr.length * (1 - cutoffPercentile));
  const bottomCutoffLocation = Math.floor(cutoffArr.length * cutoffPercentile);
  quickselect(cutoffArr, topCutoffLocation);
  quickselect(cutoffArr, bottomCutoffLocation, 0, topCutoffLocation);
  const contrastLimits = [
    cutoffArr[bottomCutoffLocation] || 0,
    cutoffArr[topCutoffLocation] || 0
  ];
  return {
    mean,
    sd,
    q1,
    q3,
    median,
    domain: [min, max2],
    contrastLimits
  };
}
function ensureArray(x) {
  return Array.isArray(x) ? x : [x];
}
function intToRgba(int) {
  if (!Number.isInteger(int)) {
    throw Error("Not an integer.");
  }
  const buffer = new ArrayBuffer(4);
  const view = new DataView(buffer);
  view.setInt32(0, int, false);
  const bytes = new Uint8Array(buffer);
  return Array.from(bytes);
}
function isInterleaved(shape) {
  const lastDimSize = shape[shape.length - 1];
  return lastDimSize === 3 || lastDimSize === 4;
}
function getLabels(dimOrder) {
  return dimOrder.toLowerCase().split("").reverse();
}
function getDims(labels) {
  const lookup = new Map(labels.map((name2, i) => [name2, i]));
  if (lookup.size !== labels.length) {
    throw Error("Labels must be unique, found duplicated label.");
  }
  return (name2) => {
    const index = lookup.get(name2);
    if (index === void 0) {
      throw Error("Invalid dimension.");
    }
    return index;
  };
}
function getImageSize(source) {
  const interleaved = isInterleaved(source.shape);
  const [height, width] = source.shape.slice(interleaved ? -3 : -2);
  return { height, width };
}
function prevPowerOf2(x) {
  return __pow(2, Math.floor(Math.log2(x)));
}
var SIGNAL_ABORTED = "__vivSignalAborted";
function renderSubLayers(props) {
  const {
    bbox: { left, top, right, bottom },
    x,
    y,
    z
  } = props.tile;
  const { data, id, loader, maxZoom } = props;
  if ([left, bottom, right, top].some((v) => v < 0) || !data) {
    return null;
  }
  const base = loader[0];
  const { height, width } = getImageSize(base);
  const bounds = [
    left,
    data.height < base.tileSize ? height : bottom,
    data.width < base.tileSize ? width : right,
    top
  ];
  if (isInterleaved(base.shape)) {
    const { photometricInterpretation = 2 } = base.meta;
    return new BitmapLayer(props, {
      image: data,
      photometricInterpretation,
      bounds,
      id: `tile-sub-layer-${bounds}-${id}`,
      tileId: { x, y, z }
    });
  }
  return new XRLayer(props, {
    channelData: data,
    bounds,
    id: `tile-sub-layer-${bounds}-${id}`,
    tileId: { x, y, z },
    interpolation: z === maxZoom ? GL.NEAREST : GL.LINEAR
  });
}
var defaultProps$6 = {
  pickable: { type: "boolean", value: true, compare: true },
  coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
  contrastLimits: { type: "array", value: [], compare: true },
  colors: { type: "array", value: [], compare: true },
  channelsVisible: { type: "array", value: [], compare: true },
  renderSubLayers: { type: "function", value: renderSubLayers, compare: false },
  colormap: { type: "string", value: "", compare: true },
  dtype: { type: "string", value: "Uint16", compare: true },
  domain: { type: "array", value: [], compare: true },
  viewportId: { type: "string", value: "", compare: true },
  unprojectLensBounds: { type: "array", value: [0, 0, 0, 0], compare: true },
  isLensOn: { type: "boolean", value: false, compare: true },
  lensSelection: { type: "number", value: 0, compare: true },
  lensRadius: { type: "number", value: 100, compare: true },
  lensBorderColor: { type: "array", value: [255, 255, 255], compare: true },
  lensBorderRadius: { type: "number", value: 0.02, compare: true },
  transparentColor: { type: "array", value: null, compare: true },
  interpolation: { type: "number", value: null, compare: true }
};
var MultiscaleImageLayerBase = class extends TileLayer {
  _updateTileset() {
    if (!this.props.viewportId) {
      super._updateTileset();
    }
    if (this.props.viewportId && this.context.viewport.id === this.props.viewportId || !this.state.tileset._viewport) {
      super._updateTileset();
    }
  }
};
MultiscaleImageLayerBase.layerName = "MultiscaleImageLayerBase";
MultiscaleImageLayerBase.defaultProps = defaultProps$6;
var defaultProps$5 = {
  pickable: { type: "boolean", value: true, compare: true },
  coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
  contrastLimits: { type: "array", value: [], compare: true },
  channelsVisible: { type: "array", value: [], compare: true },
  colors: { type: "array", value: [], compare: true },
  selections: { type: "array", value: [], compare: true },
  colormap: { type: "string", value: "", compare: true },
  domain: { type: "array", value: [], compare: true },
  viewportId: { type: "string", value: "", compare: true },
  loader: {
    type: "object",
    value: {
      getRaster: () => __async(void 0, null, function* () {
        return { data: [], height: 0, width: 0 };
      }),
      dtype: "Uint16"
    },
    compare: true
  },
  isLensOn: { type: "boolean", value: false, compare: true },
  lensSelection: { type: "number", value: 0, compare: true },
  lensRadius: { type: "number", value: 100, compare: true },
  lensBorderColor: { type: "array", value: [255, 255, 255], compare: true },
  lensBorderRadius: { type: "number", value: 0.02, compare: true },
  onClick: { type: "function", value: null, compare: true },
  transparentColor: { type: "array", value: null, compare: true },
  onViewportLoad: { type: "function", value: null, compare: true },
  interpolation: {
    type: "number",
    value: GL.NEAREST,
    compare: true
  }
};
var ImageLayer = class extends CompositeLayer {
  initializeState() {
    this.state = {
      unprojectLensBounds: [0, 0, 0, 0],
      width: 0,
      height: 0,
      data: []
    };
    if (this.context.deck) {
      this.context.deck.eventManager.on({
        pointermove: () => onPointer(this),
        pointerleave: () => onPointer(this),
        wheel: () => onPointer(this)
      });
    }
  }
  finalizeState() {
    this.state.abortController.abort();
  }
  updateState({ props, oldProps }) {
    const loaderChanged = props.loader !== oldProps.loader;
    const selectionsChanged = props.selections !== oldProps.selections;
    if (loaderChanged || selectionsChanged) {
      const { loader, selections = [], onViewportLoad } = this.props;
      const abortController = new AbortController();
      this.setState({ abortController });
      const { signal } = abortController;
      const getRaster = (selection) => loader.getRaster({ selection, signal });
      const dataPromises = selections.map(getRaster);
      Promise.all(dataPromises).then((rasters) => {
        const raster = {
          data: rasters.map((d) => d.data),
          width: rasters[0].width,
          height: rasters[0].height
        };
        if (isInterleaved(loader.shape)) {
          raster.data = raster.data[0];
          if (raster.data.length === raster.width * raster.height * 3) {
            raster.format = GL.RGB;
            raster.dataFormat = GL.RGB;
          }
        }
        if (onViewportLoad) {
          onViewportLoad(raster);
        }
        this.setState(__spreadValues({}, raster));
      }).catch((e) => {
        if (e !== SIGNAL_ABORTED) {
          throw e;
        }
      });
    }
  }
  getPickingInfo({ info, sourceLayer }) {
    info.sourceLayer = sourceLayer;
    info.tile = sourceLayer.props.tile;
    return info;
  }
  renderLayers() {
    const { loader, id } = this.props;
    const { dtype } = loader;
    const { width, height, data, unprojectLensBounds } = this.state;
    if (!(width && height))
      return null;
    const bounds = [0, height, width, 0];
    if (isInterleaved(loader.shape)) {
      const { photometricInterpretation = 2 } = loader.meta;
      return new BitmapLayer(this.props, {
        image: this.state,
        photometricInterpretation,
        bounds,
        id: `image-sub-layer-${bounds}-${id}`
      });
    }
    return new XRLayer(this.props, {
      channelData: { data, height, width },
      bounds,
      id: `image-sub-layer-${bounds}-${id}`,
      dtype,
      unprojectLensBounds
    });
  }
};
ImageLayer.layerName = "ImageLayer";
ImageLayer.defaultProps = defaultProps$5;
var defaultProps$4 = {
  pickable: { type: "boolean", value: true, compare: true },
  onHover: { type: "function", value: null, compare: false },
  contrastLimits: { type: "array", value: [], compare: true },
  colors: { type: "array", value: [], compare: true },
  channelsVisible: { type: "array", value: [], compare: true },
  opacity: { type: "number", value: 1, compare: true },
  colormap: { type: "string", value: "", compare: true },
  domain: { type: "array", value: [], compare: true },
  viewportId: { type: "string", value: "", compare: true },
  isLensOn: { type: "boolean", value: false, compare: true },
  lensSelection: { type: "number", value: 0, compare: true },
  lensRadius: { type: "number", value: 100, compare: true },
  lensBorderColor: { type: "array", value: [255, 255, 255], compare: true },
  lensBorderRadius: { type: "number", value: 0.02, compare: true },
  maxRequests: { type: "number", value: 10, compare: true },
  onClick: { type: "function", value: null, compare: true },
  transparentColor: { type: "array", value: null, compare: true },
  refinementStrategy: { type: "string", value: null, compare: true },
  excludeBackground: { type: "boolean", value: false, compare: true }
};
var MultiscaleImageLayer = class extends CompositeLayer {
  initializeState() {
    this.state = {
      unprojectLensBounds: [0, 0, 0, 0]
    };
    if (this.context.deck) {
      this.context.deck.eventManager.on({
        pointermove: () => onPointer(this),
        pointerleave: () => onPointer(this),
        wheel: () => onPointer(this)
      });
    }
  }
  renderLayers() {
    const {
      loader,
      selections,
      opacity,
      viewportId,
      onTileError,
      onHover,
      id,
      onClick,
      modelMatrix,
      transparentColor,
      excludeBackground,
      refinementStrategy
    } = this.props;
    const { tileSize, dtype } = loader[0];
    const { unprojectLensBounds } = this.state;
    const getTileData = (_0) => __async(this, [_0], function* ({ x, y, z, signal }) {
      if (!selections || selections.length === 0) {
        return null;
      }
      const resolution = Math.round(-z);
      const getTile = (selection) => {
        const config = { x, y, selection, signal };
        return loader[resolution].getTile(config);
      };
      try {
        const tiles = yield Promise.all(selections.map(getTile));
        const tile = {
          data: tiles.map((d) => d.data),
          width: tiles[0].width,
          height: tiles[0].height
        };
        if (isInterleaved(loader[resolution].shape)) {
          tile.data = tile.data[0];
          if (tile.data.length === tile.width * tile.height * 3) {
            tile.format = GL.RGB;
            tile.dataFormat = GL.RGB;
          }
          return tile;
        }
        return tile;
      } catch (err) {
        if (err === SIGNAL_ABORTED) {
          return null;
        }
        throw err;
      }
    });
    const { height, width } = getImageSize(loader[0]);
    const tiledLayer = new MultiscaleImageLayerBase(this.props, {
      id: `Tiled-Image-${id}`,
      getTileData,
      dtype,
      tileSize,
      zoomOffset: Math.round(Math.log2(modelMatrix ? modelMatrix.getScale()[0] : 1)),
      extent: [0, 0, width, height],
      minZoom: Math.round(-(loader.length - 1)),
      maxZoom: 0,
      refinementStrategy: refinementStrategy || (opacity === 1 ? "best-available" : "no-overlap"),
      updateTriggers: {
        getTileData: [loader, selections]
      },
      onTileError: onTileError || loader[0].onTileError,
      unprojectLensBounds
    });
    const lowestResolution = loader[loader.length - 1];
    const implementsGetRaster = typeof lowestResolution.getRaster === "function";
    const layerModelMatrix = modelMatrix ? modelMatrix.clone() : new Matrix4();
    const baseLayer = implementsGetRaster && !excludeBackground && new ImageLayer(this.props, {
      id: `Background-Image-${id}`,
      loader: lowestResolution,
      modelMatrix: layerModelMatrix.scale(__pow(2, loader.length - 1)),
      visible: opacity === 1 && (!viewportId || this.context.viewport.id === viewportId) && !transparentColor,
      pickable: { type: "boolean", value: true, compare: true },
      onHover,
      onClick,
      interpolation: GL.LINEAR
    });
    const layers = [baseLayer, tiledLayer];
    return layers;
  }
};
MultiscaleImageLayer.layerName = "MultiscaleImageLayer";
MultiscaleImageLayer.defaultProps = defaultProps$4;
var defaultProps$3 = {
  pickable: { type: "boolean", value: true, compare: true },
  loader: {
    type: "object",
    value: {
      getRaster: () => __async(void 0, null, function* () {
        return { data: [], height: 0, width: 0 };
      }),
      getRasterSize: () => ({ height: 0, width: 0 }),
      dtype: "<u2"
    },
    compare: true
  },
  id: { type: "string", value: "", compare: true },
  boundingBox: {
    type: "array",
    value: [
      [0, 0],
      [0, 1],
      [1, 1],
      [1, 0]
    ],
    compare: true
  },
  boundingBoxColor: { type: "array", value: [255, 0, 0], compare: true },
  boundingBoxOutlineWidth: { type: "number", value: 1, compare: true },
  viewportOutlineColor: { type: "array", value: [255, 190, 0], compare: true },
  viewportOutlineWidth: { type: "number", value: 2, compare: true },
  overviewScale: { type: "number", value: 1, compare: true },
  zoom: { type: "number", value: 1, compare: true }
};
var OverviewLayer = class extends CompositeLayer {
  renderLayers() {
    const {
      loader,
      id,
      zoom,
      boundingBox,
      boundingBoxColor,
      boundingBoxOutlineWidth,
      viewportOutlineColor,
      viewportOutlineWidth,
      overviewScale
    } = this.props;
    const { width, height } = getImageSize(loader[0]);
    const z = loader.length - 1;
    const lowestResolution = loader[z];
    const overview = new ImageLayer(this.props, {
      id: `viewport-${id}`,
      modelMatrix: new Matrix4().scale(__pow(2, z) * overviewScale),
      loader: lowestResolution
    });
    const boundingBoxOutline = new PolygonLayer({
      id: `bounding-box-overview-${id}`,
      coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
      data: [boundingBox],
      getPolygon: (f) => f,
      filled: false,
      stroked: true,
      getLineColor: boundingBoxColor,
      getLineWidth: boundingBoxOutlineWidth * __pow(2, zoom)
    });
    const viewportOutline = new PolygonLayer({
      id: `viewport-outline-${id}`,
      coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
      data: [
        [
          [0, 0],
          [width * overviewScale, 0],
          [width * overviewScale, height * overviewScale],
          [0, height * overviewScale]
        ]
      ],
      getPolygon: (f) => f,
      filled: false,
      stroked: true,
      getLineColor: viewportOutlineColor,
      getLineWidth: viewportOutlineWidth * __pow(2, zoom)
    });
    const layers = [overview, boundingBoxOutline, viewportOutline];
    return layers;
  }
};
OverviewLayer.layerName = "OverviewLayer";
OverviewLayer.defaultProps = defaultProps$3;
function makeBoundingBox(viewState) {
  const viewport = new OrthographicView().makeViewport({
    viewState,
    height: viewState.height,
    width: viewState.width
  });
  return [
    viewport.unproject([0, 0]),
    viewport.unproject([viewport.width, 0]),
    viewport.unproject([viewport.width, viewport.height]),
    viewport.unproject([0, viewport.height])
  ];
}
function getDefaultInitialViewState(loader, viewSize, zoomBackOff = 0, use3d = false, modelMatrix) {
  const source = Array.isArray(loader) ? loader[0] : loader;
  const { width, height } = getImageSize(source);
  const depth = source.shape[source.labels.indexOf("z")];
  const zoom = Math.log2(Math.min(viewSize.width / width, viewSize.height / height)) - zoomBackOff;
  const physicalSizeScalingMatrix = getPhysicalSizeScalingMatrix(source);
  const loaderInitialViewState = {
    target: (modelMatrix || new Matrix4()).transformPoint((use3d ? physicalSizeScalingMatrix : new Matrix4()).transformPoint([
      width / 2,
      height / 2,
      use3d ? depth / 2 : 0
    ])),
    zoom
  };
  return loaderInitialViewState;
}
function getPosition(boundingBox, position, length) {
  const viewLength = boundingBox[2][0] - boundingBox[0][0];
  switch (position) {
    case "bottom-right": {
      const yCoord = boundingBox[2][1] - (boundingBox[2][1] - boundingBox[0][1]) * length;
      const xLeftCoord = boundingBox[2][0] - viewLength * length;
      return [yCoord, xLeftCoord];
    }
    case "top-right": {
      const yCoord = (boundingBox[2][1] - boundingBox[0][1]) * length;
      const xLeftCoord = boundingBox[2][0] - viewLength * length;
      return [yCoord, xLeftCoord];
    }
    case "top-left": {
      const yCoord = (boundingBox[2][1] - boundingBox[0][1]) * length;
      const xLeftCoord = viewLength * length;
      return [yCoord, xLeftCoord];
    }
    case "bottom-left": {
      const yCoord = boundingBox[2][1] - (boundingBox[2][1] - boundingBox[0][1]) * length;
      const xLeftCoord = viewLength * length;
      return [yCoord, xLeftCoord];
    }
    default: {
      throw new Error(`Position ${position} not found`);
    }
  }
}
var defaultProps$2 = {
  pickable: { type: "boolean", value: true, compare: true },
  viewState: {
    type: "object",
    value: { zoom: 0, target: [0, 0, 0] },
    compare: true
  },
  unit: { type: "string", value: "", compare: true },
  size: { type: "number", value: 1, compare: true },
  position: { type: "string", value: "bottom-right", compare: true },
  length: { type: "number", value: 0.085, compare: true }
};
var ScaleBarLayer = class extends CompositeLayer {
  renderLayers() {
    const { id, unit: unit2, size, position, viewState, length } = this.props;
    const boundingBox = makeBoundingBox(viewState);
    const { zoom } = viewState;
    const viewLength = boundingBox[2][0] - boundingBox[0][0];
    const barLength = viewLength * 0.05;
    const barHeight = Math.max(__pow(2, -zoom + 1.5), (boundingBox[2][1] - boundingBox[0][1]) * 7e-3);
    const numUnits = barLength * size;
    const [yCoord, xLeftCoord] = getPosition(boundingBox, position, length);
    const lengthBar = new LineLayer({
      id: `scale-bar-length-${id}`,
      coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
      data: [
        [
          [xLeftCoord, yCoord],
          [xLeftCoord + barLength, yCoord]
        ]
      ],
      getSourcePosition: (d) => d[0],
      getTargetPosition: (d) => d[1],
      getWidth: 2,
      getColor: [220, 220, 220]
    });
    const tickBoundsLeft = new LineLayer({
      id: `scale-bar-height-left-${id}`,
      coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
      data: [
        [
          [xLeftCoord, yCoord - barHeight],
          [xLeftCoord, yCoord + barHeight]
        ]
      ],
      getSourcePosition: (d) => d[0],
      getTargetPosition: (d) => d[1],
      getWidth: 2,
      getColor: [220, 220, 220]
    });
    const tickBoundsRight = new LineLayer({
      id: `scale-bar-height-right-${id}`,
      coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
      data: [
        [
          [xLeftCoord + barLength, yCoord - barHeight],
          [xLeftCoord + barLength, yCoord + barHeight]
        ]
      ],
      getSourcePosition: (d) => d[0],
      getTargetPosition: (d) => d[1],
      getWidth: 2,
      getColor: [220, 220, 220]
    });
    const textLayer = new TextLayer({
      id: `units-label-layer-${id}`,
      coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
      data: [
        {
          text: String(numUnits).slice(0, 5).replace(/\.$/, "") + unit2,
          position: [xLeftCoord + barLength * 0.5, yCoord + barHeight * 4]
        }
      ],
      getColor: [220, 220, 220, 255],
      getSize: 12,
      fontFamily: DEFAULT_FONT_FAMILY,
      sizeUnits: "meters",
      sizeScale: __pow(2, -zoom),
      characterSet: [...unit2.split(""), ...range2(10).map((i) => String(i)), "."]
    });
    return [lengthBar, tickBoundsLeft, tickBoundsRight, textLayer];
  }
};
ScaleBarLayer.layerName = "ScaleBarLayer";
ScaleBarLayer.defaultProps = defaultProps$2;
var vs = '#version 300 es\n#define GLSLIFY 1\n#define SHADER_NAME xr-layer-vertex-shader\nin vec3 positions;uniform vec3 eye_pos;uniform mat4 proj;uniform mat4 model;uniform mat4 view;uniform mat4 scale;uniform mat4 resolution;out vec3 vray_dir;flat out vec3 transformed_eye;void main(){gl_Position=proj*view*model*scale*resolution*vec4(positions,1.);/*This first diagram is a skewed volume(i.e a "shear" model matrix applied)top down with the eye marked as #,all in world space^___|__\\|\\\\|\\|____|||\n#\nThis next diagram shows the volume after the inverse model matrix has placed it back in model coordinates,but the eye still in world space.^___|___|||||||__|__||||\n#\nFinally,we apply the inverse model matrix transformation to the eye as well to bring it too into world space.Notice that the ray here matches the "voxels" through which the first ray also passes,as desired.^____/__|/||/||/____|///\n#\n*/transformed_eye=(inverse(resolution)*inverse(scale)*inverse(model)*(vec4(eye_pos,1.))).xyz;vray_dir=positions-transformed_eye;}';
var fs$1 = "#version 300 es\nprecision highp int;precision highp float;precision highp SAMPLER_TYPE;\n#define GLSLIFY 1\nuniform highp SAMPLER_TYPE volume0;uniform highp SAMPLER_TYPE volume1;uniform highp SAMPLER_TYPE volume2;uniform highp SAMPLER_TYPE volume3;uniform highp SAMPLER_TYPE volume4;uniform highp SAMPLER_TYPE volume5;uniform vec3 scaledDimensions;uniform mat4 scale;uniform vec3 normals[NUM_PLANES];uniform float distances[NUM_PLANES];uniform vec2 contrastLimits[6];uniform vec3 colors[6];uniform vec2 xSlice;uniform vec2 ySlice;uniform vec2 zSlice;in vec3 vray_dir;flat in vec3 transformed_eye;out vec4 color;vec2 intersect_box(vec3 orig,vec3 dir){vec3 box_min=vec3(xSlice[0],ySlice[0],zSlice[0]);vec3 box_max=vec3(xSlice[1],ySlice[1],zSlice[1]);vec3 inv_dir=1./dir;vec3 tmin_tmp=(box_min-orig)*inv_dir;vec3 tmax_tmp=(box_max-orig)*inv_dir;vec3 tmin=min(tmin_tmp,tmax_tmp);vec3 tmax=max(tmin_tmp,tmax_tmp);float t0=max(tmin.x,max(tmin.y,tmin.z));float t1=min(tmax.x,min(tmax.y,tmax.z));vec2 val=vec2(t0,t1);return val;}float linear_to_srgb(float x){if(x<=0.0031308f){return 12.92f*x;}return 1.055f*pow(x,1.f/2.4f)-0.055f;}float wang_hash(int seed){seed=(seed ^ 61)^(seed>>16);seed*=9;seed=seed ^(seed>>4);seed*=0x27d4eb2d;seed=seed ^(seed>>15);return float(seed % 2147483647)/float(2147483647);}void main(void){vec3 ray_dir=normalize(vray_dir);vec2 t_hit=intersect_box(transformed_eye,ray_dir);if(t_hit.x>t_hit.y){discard;}t_hit.x=max(t_hit.x,0.);vec3 dt_vec=1./(scale*vec4(abs(ray_dir),1.)).xyz;float dt=1.*min(dt_vec.x,min(dt_vec.y,dt_vec.z));float offset=wang_hash(int(gl_FragCoord.x+640.*gl_FragCoord.y));vec3 p=transformed_eye+(t_hit.x+offset*dt)*ray_dir;_BEFORE_RENDERfor(float t=t_hit.x;t<t_hit.y;t+=dt){float canShow=1.;for(int i=0;i<NUM_PLANES;i+=1){canShow*=max(0.,sign(dot(normals[i],p)+distances[i]));}float canShowXCoordinate=max(p.x-0.,0.)*max(1.-p.x,0.);float canShowYCoordinate=max(p.y-0.,0.)*max(1.-p.y,0.);float canShowZCoordinate=max(p.z-0.,0.)*max(1.-p.z,0.);float canShowCoordinate=float(ceil(canShowXCoordinate*canShowYCoordinate*canShowZCoordinate));canShow=canShowCoordinate*canShow;float intensityValue0=canShow*sample_and_apply_contrast_limits(volume0,p,contrastLimits[0]);float intensityValue1=canShow*sample_and_apply_contrast_limits(volume1,p,contrastLimits[1]);float intensityValue2=canShow*sample_and_apply_contrast_limits(volume2,p,contrastLimits[2]);float intensityValue3=canShow*sample_and_apply_contrast_limits(volume3,p,contrastLimits[3]);float intensityValue4=canShow*sample_and_apply_contrast_limits(volume4,p,contrastLimits[4]);float intensityValue5=canShow*sample_and_apply_contrast_limits(volume5,p,contrastLimits[5]);_RENDERp+=ray_dir*dt;}_AFTER_RENDERcolor.r=linear_to_srgb(color.r);color.g=linear_to_srgb(color.g);color.b=linear_to_srgb(color.b);}";
var fs = "#define GLSLIFY 1\nvec4 jet(float x_17){const float e0=0.0;const vec4 v0=vec4(0,0,0.5137254901960784,1);const float e1=0.125;const vec4 v1=vec4(0,0.23529411764705882,0.6666666666666666,1);const float e2=0.375;const vec4 v2=vec4(0.0196078431372549,1,1,1);const float e3=0.625;const vec4 v3=vec4(1,1,0,1);const float e4=0.875;const vec4 v4=vec4(0.9803921568627451,0,0,1);const float e5=1.0;const vec4 v5=vec4(0.5019607843137255,0,0,1);float a0=smoothstep(e0,e1,x_17);float a1=smoothstep(e1,e2,x_17);float a2=smoothstep(e2,e3,x_17);float a3=smoothstep(e3,e4,x_17);float a4=smoothstep(e4,e5,x_17);return max(mix(v0,v1,a0)*step(e0,x_17)*step(x_17,e1),max(mix(v1,v2,a1)*step(e1,x_17)*step(x_17,e2),max(mix(v2,v3,a2)*step(e2,x_17)*step(x_17,e3),max(mix(v3,v4,a3)*step(e3,x_17)*step(x_17,e4),mix(v4,v5,a4)*step(e4,x_17)*step(x_17,e5)))));}vec4 hsv(float x_18){const float e0=0.0;const vec4 v0=vec4(1,0,0,1);const float e1=0.169;const vec4 v1=vec4(0.9921568627450981,1,0.00784313725490196,1);const float e2=0.173;const vec4 v2=vec4(0.9686274509803922,1,0.00784313725490196,1);const float e3=0.337;const vec4 v3=vec4(0,0.9882352941176471,0.01568627450980392,1);const float e4=0.341;const vec4 v4=vec4(0,0.9882352941176471,0.0392156862745098,1);const float e5=0.506;const vec4 v5=vec4(0.00392156862745098,0.9764705882352941,1,1);const float e6=0.671;const vec4 v6=vec4(0.00784313725490196,0,0.9921568627450981,1);const float e7=0.675;const vec4 v7=vec4(0.03137254901960784,0,0.9921568627450981,1);const float e8=0.839;const vec4 v8=vec4(1,0,0.984313725490196,1);const float e9=0.843;const vec4 v9=vec4(1,0,0.9607843137254902,1);const float e10=1.0;const vec4 v10=vec4(1,0,0.023529411764705882,1);float a0=smoothstep(e0,e1,x_18);float a1=smoothstep(e1,e2,x_18);float a2=smoothstep(e2,e3,x_18);float a3=smoothstep(e3,e4,x_18);float a4=smoothstep(e4,e5,x_18);float a5=smoothstep(e5,e6,x_18);float a6=smoothstep(e6,e7,x_18);float a7=smoothstep(e7,e8,x_18);float a8=smoothstep(e8,e9,x_18);float a9=smoothstep(e9,e10,x_18);return max(mix(v0,v1,a0)*step(e0,x_18)*step(x_18,e1),max(mix(v1,v2,a1)*step(e1,x_18)*step(x_18,e2),max(mix(v2,v3,a2)*step(e2,x_18)*step(x_18,e3),max(mix(v3,v4,a3)*step(e3,x_18)*step(x_18,e4),max(mix(v4,v5,a4)*step(e4,x_18)*step(x_18,e5),max(mix(v5,v6,a5)*step(e5,x_18)*step(x_18,e6),max(mix(v6,v7,a6)*step(e6,x_18)*step(x_18,e7),max(mix(v7,v8,a7)*step(e7,x_18)*step(x_18,e8),max(mix(v8,v9,a8)*step(e8,x_18)*step(x_18,e9),mix(v9,v10,a9)*step(e9,x_18)*step(x_18,e10))))))))));}vec4 hot(float x_13){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.3;const vec4 v1=vec4(0.9019607843137255,0,0,1);const float e2=0.6;const vec4 v2=vec4(1,0.8235294117647058,0,1);const float e3=1.0;const vec4 v3=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_13);float a1=smoothstep(e1,e2,x_13);float a2=smoothstep(e2,e3,x_13);return max(mix(v0,v1,a0)*step(e0,x_13)*step(x_13,e1),max(mix(v1,v2,a1)*step(e1,x_13)*step(x_13,e2),mix(v2,v3,a2)*step(e2,x_13)*step(x_13,e3)));}vec4 cool(float x_24){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.13;const vec4 v1=vec4(0.4549019607843137,0,0.8549019607843137,1);const float e2=0.25;const vec4 v2=vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);const float e3=0.38;const vec4 v3=vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);const float e4=0.5;const vec4 v4=vec4(0,0.8,0.7725490196078432,1);const float e5=0.63;const vec4 v5=vec4(0,0.9686274509803922,0.5725490196078431,1);const float e6=0.75;const vec4 v6=vec4(0,1,0.34509803921568627,1);const float e7=0.88;const vec4 v7=vec4(0.1568627450980392,1,0.03137254901960784,1);const float e8=1.0;const vec4 v8=vec4(0.5764705882352941,1,0,1);float a0=smoothstep(e0,e1,x_24);float a1=smoothstep(e1,e2,x_24);float a2=smoothstep(e2,e3,x_24);float a3=smoothstep(e3,e4,x_24);float a4=smoothstep(e4,e5,x_24);float a5=smoothstep(e5,e6,x_24);float a6=smoothstep(e6,e7,x_24);float a7=smoothstep(e7,e8,x_24);return max(mix(v0,v1,a0)*step(e0,x_24)*step(x_24,e1),max(mix(v1,v2,a1)*step(e1,x_24)*step(x_24,e2),max(mix(v2,v3,a2)*step(e2,x_24)*step(x_24,e3),max(mix(v3,v4,a3)*step(e3,x_24)*step(x_24,e4),max(mix(v4,v5,a4)*step(e4,x_24)*step(x_24,e5),max(mix(v5,v6,a5)*step(e5,x_24)*step(x_24,e6),max(mix(v6,v7,a6)*step(e6,x_24)*step(x_24,e7),mix(v7,v8,a7)*step(e7,x_24)*step(x_24,e8))))))));}vec4 spring(float x_5){const float e0=0.0;const vec4 v0=vec4(1,0,1,1);const float e1=1.0;const vec4 v1=vec4(1,1,0,1);float a0=smoothstep(e0,e1,x_5);return mix(v0,v1,a0)*step(e0,x_5)*step(x_5,e1);}vec4 summer(float x_12){const float e0=0.0;const vec4 v0=vec4(0,0.5019607843137255,0.4,1);const float e1=1.0;const vec4 v1=vec4(1,1,0.4,1);float a0=smoothstep(e0,e1,x_12);return mix(v0,v1,a0)*step(e0,x_12)*step(x_12,e1);}vec4 autumn(float x_25){const float e0=0.0;const vec4 v0=vec4(1,0,0,1);const float e1=1.0;const vec4 v1=vec4(1,1,0,1);float a0=smoothstep(e0,e1,x_25);return mix(v0,v1,a0)*step(e0,x_25)*step(x_25,e1);}vec4 winter(float x_16){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=1.0;const vec4 v1=vec4(0,1,0.5019607843137255,1);float a0=smoothstep(e0,e1,x_16);return mix(v0,v1,a0)*step(e0,x_16)*step(x_16,e1);}vec4 bone(float x_15){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.376;const vec4 v1=vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);const float e2=0.753;const vec4 v2=vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);const float e3=1.0;const vec4 v3=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_15);float a1=smoothstep(e1,e2,x_15);float a2=smoothstep(e2,e3,x_15);return max(mix(v0,v1,a0)*step(e0,x_15)*step(x_15,e1),max(mix(v1,v2,a1)*step(e1,x_15)*step(x_15,e2),mix(v2,v3,a2)*step(e2,x_15)*step(x_15,e3)));}vec4 copper(float x_10){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.804;const vec4 v1=vec4(1,0.6274509803921569,0.4,1);const float e2=1.0;const vec4 v2=vec4(1,0.7803921568627451,0.4980392156862745,1);float a0=smoothstep(e0,e1,x_10);float a1=smoothstep(e1,e2,x_10);return max(mix(v0,v1,a0)*step(e0,x_10)*step(x_10,e1),mix(v1,v2,a1)*step(e1,x_10)*step(x_10,e2));}vec4 greys(float x_4){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=1.0;const vec4 v1=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_4);return mix(v0,v1,a0)*step(e0,x_4)*step(x_4,e1);}vec4 yignbu(float x_32){const float e0=0.0;const vec4 v0=vec4(0.03137254901960784,0.11372549019607843,0.34509803921568627,1);const float e1=0.125;const vec4 v1=vec4(0.1450980392156863,0.20392156862745098,0.5803921568627451,1);const float e2=0.25;const vec4 v2=vec4(0.13333333333333333,0.3686274509803922,0.6588235294117647,1);const float e3=0.375;const vec4 v3=vec4(0.11372549019607843,0.5686274509803921,0.7529411764705882,1);const float e4=0.5;const vec4 v4=vec4(0.2549019607843137,0.7137254901960784,0.7686274509803922,1);const float e5=0.625;const vec4 v5=vec4(0.4980392156862745,0.803921568627451,0.7333333333333333,1);const float e6=0.75;const vec4 v6=vec4(0.7803921568627451,0.9137254901960784,0.7058823529411765,1);const float e7=0.875;const vec4 v7=vec4(0.9294117647058824,0.9725490196078431,0.8509803921568627,1);const float e8=1.0;const vec4 v8=vec4(1,1,0.8509803921568627,1);float a0=smoothstep(e0,e1,x_32);float a1=smoothstep(e1,e2,x_32);float a2=smoothstep(e2,e3,x_32);float a3=smoothstep(e3,e4,x_32);float a4=smoothstep(e4,e5,x_32);float a5=smoothstep(e5,e6,x_32);float a6=smoothstep(e6,e7,x_32);float a7=smoothstep(e7,e8,x_32);return max(mix(v0,v1,a0)*step(e0,x_32)*step(x_32,e1),max(mix(v1,v2,a1)*step(e1,x_32)*step(x_32,e2),max(mix(v2,v3,a2)*step(e2,x_32)*step(x_32,e3),max(mix(v3,v4,a3)*step(e3,x_32)*step(x_32,e4),max(mix(v4,v5,a4)*step(e4,x_32)*step(x_32,e5),max(mix(v5,v6,a5)*step(e5,x_32)*step(x_32,e6),max(mix(v6,v7,a6)*step(e6,x_32)*step(x_32,e7),mix(v7,v8,a7)*step(e7,x_32)*step(x_32,e8))))))));}vec4 greens(float x_34){const float e0=0.0;const vec4 v0=vec4(0,0.26666666666666666,0.10588235294117647,1);const float e1=0.125;const vec4 v1=vec4(0,0.42745098039215684,0.17254901960784313,1);const float e2=0.25;const vec4 v2=vec4(0.13725490196078433,0.5450980392156862,0.27058823529411763,1);const float e3=0.375;const vec4 v3=vec4(0.2549019607843137,0.6705882352941176,0.36470588235294116,1);const float e4=0.5;const vec4 v4=vec4(0.4549019607843137,0.7686274509803922,0.4627450980392157,1);const float e5=0.625;const vec4 v5=vec4(0.6313725490196078,0.8509803921568627,0.6078431372549019,1);const float e6=0.75;const vec4 v6=vec4(0.7803921568627451,0.9137254901960784,0.7529411764705882,1);const float e7=0.875;const vec4 v7=vec4(0.8980392156862745,0.9607843137254902,0.8784313725490196,1);const float e8=1.0;const vec4 v8=vec4(0.9686274509803922,0.9882352941176471,0.9607843137254902,1);float a0=smoothstep(e0,e1,x_34);float a1=smoothstep(e1,e2,x_34);float a2=smoothstep(e2,e3,x_34);float a3=smoothstep(e3,e4,x_34);float a4=smoothstep(e4,e5,x_34);float a5=smoothstep(e5,e6,x_34);float a6=smoothstep(e6,e7,x_34);float a7=smoothstep(e7,e8,x_34);return max(mix(v0,v1,a0)*step(e0,x_34)*step(x_34,e1),max(mix(v1,v2,a1)*step(e1,x_34)*step(x_34,e2),max(mix(v2,v3,a2)*step(e2,x_34)*step(x_34,e3),max(mix(v3,v4,a3)*step(e3,x_34)*step(x_34,e4),max(mix(v4,v5,a4)*step(e4,x_34)*step(x_34,e5),max(mix(v5,v6,a5)*step(e5,x_34)*step(x_34,e6),max(mix(v6,v7,a6)*step(e6,x_34)*step(x_34,e7),mix(v7,v8,a7)*step(e7,x_34)*step(x_34,e8))))))));}vec4 yiorrd(float x_41){const float e0=0.0;const vec4 v0=vec4(0.5019607843137255,0,0.14901960784313725,1);const float e1=0.125;const vec4 v1=vec4(0.7411764705882353,0,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.8901960784313725,0.10196078431372549,0.10980392156862745,1);const float e3=0.375;const vec4 v3=vec4(0.9882352941176471,0.3058823529411765,0.16470588235294117,1);const float e4=0.5;const vec4 v4=vec4(0.9921568627450981,0.5529411764705883,0.23529411764705882,1);const float e5=0.625;const vec4 v5=vec4(0.996078431372549,0.6980392156862745,0.2980392156862745,1);const float e6=0.75;const vec4 v6=vec4(0.996078431372549,0.8509803921568627,0.4627450980392157,1);const float e7=0.875;const vec4 v7=vec4(1,0.9294117647058824,0.6274509803921569,1);const float e8=1.0;const vec4 v8=vec4(1,1,0.8,1);float a0=smoothstep(e0,e1,x_41);float a1=smoothstep(e1,e2,x_41);float a2=smoothstep(e2,e3,x_41);float a3=smoothstep(e3,e4,x_41);float a4=smoothstep(e4,e5,x_41);float a5=smoothstep(e5,e6,x_41);float a6=smoothstep(e6,e7,x_41);float a7=smoothstep(e7,e8,x_41);return max(mix(v0,v1,a0)*step(e0,x_41)*step(x_41,e1),max(mix(v1,v2,a1)*step(e1,x_41)*step(x_41,e2),max(mix(v2,v3,a2)*step(e2,x_41)*step(x_41,e3),max(mix(v3,v4,a3)*step(e3,x_41)*step(x_41,e4),max(mix(v4,v5,a4)*step(e4,x_41)*step(x_41,e5),max(mix(v5,v6,a5)*step(e5,x_41)*step(x_41,e6),max(mix(v6,v7,a6)*step(e6,x_41)*step(x_41,e7),mix(v7,v8,a7)*step(e7,x_41)*step(x_41,e8))))))));}vec4 bluered(float x_23){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=1.0;const vec4 v1=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_23);return mix(v0,v1,a0)*step(e0,x_23)*step(x_23,e1);}vec4 rdbu(float x_1){const float e0=0.0;const vec4 v0=vec4(0.0196078431372549,0.0392156862745098,0.6745098039215687,1);const float e1=0.35;const vec4 v1=vec4(0.41568627450980394,0.5372549019607843,0.9686274509803922,1);const float e2=0.5;const vec4 v2=vec4(0.7450980392156863,0.7450980392156863,0.7450980392156863,1);const float e3=0.6;const vec4 v3=vec4(0.8627450980392157,0.6666666666666666,0.5176470588235295,1);const float e4=0.7;const vec4 v4=vec4(0.9019607843137255,0.5686274509803921,0.35294117647058826,1);const float e5=1.0;const vec4 v5=vec4(0.6980392156862745,0.0392156862745098,0.10980392156862745,1);float a0=smoothstep(e0,e1,x_1);float a1=smoothstep(e1,e2,x_1);float a2=smoothstep(e2,e3,x_1);float a3=smoothstep(e3,e4,x_1);float a4=smoothstep(e4,e5,x_1);return max(mix(v0,v1,a0)*step(e0,x_1)*step(x_1,e1),max(mix(v1,v2,a1)*step(e1,x_1)*step(x_1,e2),max(mix(v2,v3,a2)*step(e2,x_1)*step(x_1,e3),max(mix(v3,v4,a3)*step(e3,x_1)*step(x_1,e4),mix(v4,v5,a4)*step(e4,x_1)*step(x_1,e5)))));}vec4 picnic(float x_42){const float e0=0.0;const vec4 v0=vec4(0,0,1,1);const float e1=0.1;const vec4 v1=vec4(0.2,0.6,1,1);const float e2=0.2;const vec4 v2=vec4(0.4,0.8,1,1);const float e3=0.3;const vec4 v3=vec4(0.6,0.8,1,1);const float e4=0.4;const vec4 v4=vec4(0.8,0.8,1,1);const float e5=0.5;const vec4 v5=vec4(1,1,1,1);const float e6=0.6;const vec4 v6=vec4(1,0.8,1,1);const float e7=0.7;const vec4 v7=vec4(1,0.6,1,1);const float e8=0.8;const vec4 v8=vec4(1,0.4,0.8,1);const float e9=0.9;const vec4 v9=vec4(1,0.4,0.4,1);const float e10=1.0;const vec4 v10=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_42);float a1=smoothstep(e1,e2,x_42);float a2=smoothstep(e2,e3,x_42);float a3=smoothstep(e3,e4,x_42);float a4=smoothstep(e4,e5,x_42);float a5=smoothstep(e5,e6,x_42);float a6=smoothstep(e6,e7,x_42);float a7=smoothstep(e7,e8,x_42);float a8=smoothstep(e8,e9,x_42);float a9=smoothstep(e9,e10,x_42);return max(mix(v0,v1,a0)*step(e0,x_42)*step(x_42,e1),max(mix(v1,v2,a1)*step(e1,x_42)*step(x_42,e2),max(mix(v2,v3,a2)*step(e2,x_42)*step(x_42,e3),max(mix(v3,v4,a3)*step(e3,x_42)*step(x_42,e4),max(mix(v4,v5,a4)*step(e4,x_42)*step(x_42,e5),max(mix(v5,v6,a5)*step(e5,x_42)*step(x_42,e6),max(mix(v6,v7,a6)*step(e6,x_42)*step(x_42,e7),max(mix(v7,v8,a7)*step(e7,x_42)*step(x_42,e8),max(mix(v8,v9,a8)*step(e8,x_42)*step(x_42,e9),mix(v9,v10,a9)*step(e9,x_42)*step(x_42,e10))))))))));}vec4 rainbow(float x_31){const float e0=0.0;const vec4 v0=vec4(0.5882352941176471,0,0.35294117647058826,1);const float e1=0.125;const vec4 v1=vec4(0,0,0.7843137254901961,1);const float e2=0.25;const vec4 v2=vec4(0,0.09803921568627451,1,1);const float e3=0.375;const vec4 v3=vec4(0,0.596078431372549,1,1);const float e4=0.5;const vec4 v4=vec4(0.17254901960784313,1,0.5882352941176471,1);const float e5=0.625;const vec4 v5=vec4(0.592156862745098,1,0,1);const float e6=0.75;const vec4 v6=vec4(1,0.9176470588235294,0,1);const float e7=0.875;const vec4 v7=vec4(1,0.43529411764705883,0,1);const float e8=1.0;const vec4 v8=vec4(1,0,0,1);float a0=smoothstep(e0,e1,x_31);float a1=smoothstep(e1,e2,x_31);float a2=smoothstep(e2,e3,x_31);float a3=smoothstep(e3,e4,x_31);float a4=smoothstep(e4,e5,x_31);float a5=smoothstep(e5,e6,x_31);float a6=smoothstep(e6,e7,x_31);float a7=smoothstep(e7,e8,x_31);return max(mix(v0,v1,a0)*step(e0,x_31)*step(x_31,e1),max(mix(v1,v2,a1)*step(e1,x_31)*step(x_31,e2),max(mix(v2,v3,a2)*step(e2,x_31)*step(x_31,e3),max(mix(v3,v4,a3)*step(e3,x_31)*step(x_31,e4),max(mix(v4,v5,a4)*step(e4,x_31)*step(x_31,e5),max(mix(v5,v6,a5)*step(e5,x_31)*step(x_31,e6),max(mix(v6,v7,a6)*step(e6,x_31)*step(x_31,e7),mix(v7,v8,a7)*step(e7,x_31)*step(x_31,e8))))))));}vec4 portland(float x_21){const float e0=0.0;const vec4 v0=vec4(0.047058823529411764,0.2,0.5137254901960784,1);const float e1=0.25;const vec4 v1=vec4(0.0392156862745098,0.5333333333333333,0.7294117647058823,1);const float e2=0.5;const vec4 v2=vec4(0.9490196078431372,0.8274509803921568,0.2196078431372549,1);const float e3=0.75;const vec4 v3=vec4(0.9490196078431372,0.5607843137254902,0.2196078431372549,1);const float e4=1.0;const vec4 v4=vec4(0.8509803921568627,0.11764705882352941,0.11764705882352941,1);float a0=smoothstep(e0,e1,x_21);float a1=smoothstep(e1,e2,x_21);float a2=smoothstep(e2,e3,x_21);float a3=smoothstep(e3,e4,x_21);return max(mix(v0,v1,a0)*step(e0,x_21)*step(x_21,e1),max(mix(v1,v2,a1)*step(e1,x_21)*step(x_21,e2),max(mix(v2,v3,a2)*step(e2,x_21)*step(x_21,e3),mix(v3,v4,a3)*step(e3,x_21)*step(x_21,e4))));}vec4 blackbody(float x_38){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.2;const vec4 v1=vec4(0.9019607843137255,0,0,1);const float e2=0.4;const vec4 v2=vec4(0.9019607843137255,0.8235294117647058,0,1);const float e3=0.7;const vec4 v3=vec4(1,1,1,1);const float e4=1.0;const vec4 v4=vec4(0.6274509803921569,0.7843137254901961,1,1);float a0=smoothstep(e0,e1,x_38);float a1=smoothstep(e1,e2,x_38);float a2=smoothstep(e2,e3,x_38);float a3=smoothstep(e3,e4,x_38);return max(mix(v0,v1,a0)*step(e0,x_38)*step(x_38,e1),max(mix(v1,v2,a1)*step(e1,x_38)*step(x_38,e2),max(mix(v2,v3,a2)*step(e2,x_38)*step(x_38,e3),mix(v3,v4,a3)*step(e3,x_38)*step(x_38,e4))));}vec4 earth(float x_29){const float e0=0.0;const vec4 v0=vec4(0,0,0.5098039215686274,1);const float e1=0.1;const vec4 v1=vec4(0,0.7058823529411765,0.7058823529411765,1);const float e2=0.2;const vec4 v2=vec4(0.1568627450980392,0.8235294117647058,0.1568627450980392,1);const float e3=0.4;const vec4 v3=vec4(0.9019607843137255,0.9019607843137255,0.19607843137254902,1);const float e4=0.6;const vec4 v4=vec4(0.47058823529411764,0.27450980392156865,0.0784313725490196,1);const float e5=1.0;const vec4 v5=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_29);float a1=smoothstep(e1,e2,x_29);float a2=smoothstep(e2,e3,x_29);float a3=smoothstep(e3,e4,x_29);float a4=smoothstep(e4,e5,x_29);return max(mix(v0,v1,a0)*step(e0,x_29)*step(x_29,e1),max(mix(v1,v2,a1)*step(e1,x_29)*step(x_29,e2),max(mix(v2,v3,a2)*step(e2,x_29)*step(x_29,e3),max(mix(v3,v4,a3)*step(e3,x_29)*step(x_29,e4),mix(v4,v5,a4)*step(e4,x_29)*step(x_29,e5)))));}vec4 electric(float x_9){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.15;const vec4 v1=vec4(0.11764705882352941,0,0.39215686274509803,1);const float e2=0.4;const vec4 v2=vec4(0.47058823529411764,0,0.39215686274509803,1);const float e3=0.6;const vec4 v3=vec4(0.6274509803921569,0.35294117647058826,0,1);const float e4=0.8;const vec4 v4=vec4(0.9019607843137255,0.7843137254901961,0,1);const float e5=1.0;const vec4 v5=vec4(1,0.9803921568627451,0.8627450980392157,1);float a0=smoothstep(e0,e1,x_9);float a1=smoothstep(e1,e2,x_9);float a2=smoothstep(e2,e3,x_9);float a3=smoothstep(e3,e4,x_9);float a4=smoothstep(e4,e5,x_9);return max(mix(v0,v1,a0)*step(e0,x_9)*step(x_9,e1),max(mix(v1,v2,a1)*step(e1,x_9)*step(x_9,e2),max(mix(v2,v3,a2)*step(e2,x_9)*step(x_9,e3),max(mix(v3,v4,a3)*step(e3,x_9)*step(x_9,e4),mix(v4,v5,a4)*step(e4,x_9)*step(x_9,e5)))));}vec4 alpha(float x_0){const float e0=0.0;const vec4 v0=vec4(1,1,1,0);const float e1=1.0;const vec4 v1=vec4(1,1,1,1);float a0=smoothstep(e0,e1,x_0);return mix(v0,v1,a0)*step(e0,x_0)*step(x_0,e1);}vec4 viridis(float x_22){const float e0=0.0;const vec4 v0=vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);const float e1=0.13;const vec4 v1=vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);const float e2=0.25;const vec4 v2=vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);const float e4=0.5;const vec4 v4=vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);const float e5=0.63;const vec4 v5=vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);const float e6=0.75;const vec4 v6=vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);const float e7=0.88;const vec4 v7=vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);float a0=smoothstep(e0,e1,x_22);float a1=smoothstep(e1,e2,x_22);float a2=smoothstep(e2,e3,x_22);float a3=smoothstep(e3,e4,x_22);float a4=smoothstep(e4,e5,x_22);float a5=smoothstep(e5,e6,x_22);float a6=smoothstep(e6,e7,x_22);float a7=smoothstep(e7,e8,x_22);return max(mix(v0,v1,a0)*step(e0,x_22)*step(x_22,e1),max(mix(v1,v2,a1)*step(e1,x_22)*step(x_22,e2),max(mix(v2,v3,a2)*step(e2,x_22)*step(x_22,e3),max(mix(v3,v4,a3)*step(e3,x_22)*step(x_22,e4),max(mix(v4,v5,a4)*step(e4,x_22)*step(x_22,e5),max(mix(v5,v6,a5)*step(e5,x_22)*step(x_22,e6),max(mix(v6,v7,a6)*step(e6,x_22)*step(x_22,e7),mix(v7,v8,a7)*step(e7,x_22)*step(x_22,e8))))))));}vec4 inferno(float x_30){const float e0=0.0;const vec4 v0=vec4(0,0,0.01568627450980392,1);const float e1=0.13;const vec4 v1=vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);const float e2=0.25;const vec4 v2=vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);const float e3=0.38;const vec4 v3=vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);const float e4=0.5;const vec4 v4=vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);const float e5=0.63;const vec4 v5=vec4(0.8901960784313725,0.34901960784313724,0.2,1);const float e6=0.75;const vec4 v6=vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);const float e8=1.0;const vec4 v8=vec4(0.9882352941176471,1,0.6431372549019608,1);float a0=smoothstep(e0,e1,x_30);float a1=smoothstep(e1,e2,x_30);float a2=smoothstep(e2,e3,x_30);float a3=smoothstep(e3,e4,x_30);float a4=smoothstep(e4,e5,x_30);float a5=smoothstep(e5,e6,x_30);float a6=smoothstep(e6,e7,x_30);float a7=smoothstep(e7,e8,x_30);return max(mix(v0,v1,a0)*step(e0,x_30)*step(x_30,e1),max(mix(v1,v2,a1)*step(e1,x_30)*step(x_30,e2),max(mix(v2,v3,a2)*step(e2,x_30)*step(x_30,e3),max(mix(v3,v4,a3)*step(e3,x_30)*step(x_30,e4),max(mix(v4,v5,a4)*step(e4,x_30)*step(x_30,e5),max(mix(v5,v6,a5)*step(e5,x_30)*step(x_30,e6),max(mix(v6,v7,a6)*step(e6,x_30)*step(x_30,e7),mix(v7,v8,a7)*step(e7,x_30)*step(x_30,e8))))))));}vec4 magma(float x_33){const float e0=0.0;const vec4 v0=vec4(0,0,0.01568627450980392,1);const float e1=0.13;const vec4 v1=vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);const float e2=0.25;const vec4 v2=vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);const float e3=0.38;const vec4 v3=vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);const float e4=0.5;const vec4 v4=vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);const float e5=0.63;const vec4 v5=vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);const float e6=0.75;const vec4 v6=vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);const float e8=1.0;const vec4 v8=vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);float a0=smoothstep(e0,e1,x_33);float a1=smoothstep(e1,e2,x_33);float a2=smoothstep(e2,e3,x_33);float a3=smoothstep(e3,e4,x_33);float a4=smoothstep(e4,e5,x_33);float a5=smoothstep(e5,e6,x_33);float a6=smoothstep(e6,e7,x_33);float a7=smoothstep(e7,e8,x_33);return max(mix(v0,v1,a0)*step(e0,x_33)*step(x_33,e1),max(mix(v1,v2,a1)*step(e1,x_33)*step(x_33,e2),max(mix(v2,v3,a2)*step(e2,x_33)*step(x_33,e3),max(mix(v3,v4,a3)*step(e3,x_33)*step(x_33,e4),max(mix(v4,v5,a4)*step(e4,x_33)*step(x_33,e5),max(mix(v5,v6,a5)*step(e5,x_33)*step(x_33,e6),max(mix(v6,v7,a6)*step(e6,x_33)*step(x_33,e7),mix(v7,v8,a7)*step(e7,x_33)*step(x_33,e8))))))));}vec4 plasma(float x_3){const float e0=0.0;const vec4 v0=vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);const float e1=0.13;const vec4 v1=vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);const float e2=0.25;const vec4 v2=vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);const float e3=0.38;const vec4 v3=vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);const float e4=0.5;const vec4 v4=vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);const float e5=0.63;const vec4 v5=vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);const float e6=0.75;const vec4 v6=vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);const float e7=0.88;const vec4 v7=vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);const float e8=1.0;const vec4 v8=vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);float a0=smoothstep(e0,e1,x_3);float a1=smoothstep(e1,e2,x_3);float a2=smoothstep(e2,e3,x_3);float a3=smoothstep(e3,e4,x_3);float a4=smoothstep(e4,e5,x_3);float a5=smoothstep(e5,e6,x_3);float a6=smoothstep(e6,e7,x_3);float a7=smoothstep(e7,e8,x_3);return max(mix(v0,v1,a0)*step(e0,x_3)*step(x_3,e1),max(mix(v1,v2,a1)*step(e1,x_3)*step(x_3,e2),max(mix(v2,v3,a2)*step(e2,x_3)*step(x_3,e3),max(mix(v3,v4,a3)*step(e3,x_3)*step(x_3,e4),max(mix(v4,v5,a4)*step(e4,x_3)*step(x_3,e5),max(mix(v5,v6,a5)*step(e5,x_3)*step(x_3,e6),max(mix(v6,v7,a6)*step(e6,x_3)*step(x_3,e7),mix(v7,v8,a7)*step(e7,x_3)*step(x_3,e8))))))));}vec4 warm(float x_43){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.13;const vec4 v1=vec4(0.6745098039215687,0,0.7333333333333333,1);const float e2=0.25;const vec4 v2=vec4(0.8588235294117647,0,0.6666666666666666,1);const float e3=0.38;const vec4 v3=vec4(1,0,0.5098039215686274,1);const float e4=0.5;const vec4 v4=vec4(1,0.24705882352941178,0.2901960784313726,1);const float e5=0.63;const vec4 v5=vec4(1,0.4823529411764706,0,1);const float e6=0.75;const vec4 v6=vec4(0.9176470588235294,0.6901960784313725,0,1);const float e7=0.88;const vec4 v7=vec4(0.7450980392156863,0.8941176470588236,0,1);const float e8=1.0;const vec4 v8=vec4(0.5764705882352941,1,0,1);float a0=smoothstep(e0,e1,x_43);float a1=smoothstep(e1,e2,x_43);float a2=smoothstep(e2,e3,x_43);float a3=smoothstep(e3,e4,x_43);float a4=smoothstep(e4,e5,x_43);float a5=smoothstep(e5,e6,x_43);float a6=smoothstep(e6,e7,x_43);float a7=smoothstep(e7,e8,x_43);return max(mix(v0,v1,a0)*step(e0,x_43)*step(x_43,e1),max(mix(v1,v2,a1)*step(e1,x_43)*step(x_43,e2),max(mix(v2,v3,a2)*step(e2,x_43)*step(x_43,e3),max(mix(v3,v4,a3)*step(e3,x_43)*step(x_43,e4),max(mix(v4,v5,a4)*step(e4,x_43)*step(x_43,e5),max(mix(v5,v6,a5)*step(e5,x_43)*step(x_43,e6),max(mix(v6,v7,a6)*step(e6,x_43)*step(x_43,e7),mix(v7,v8,a7)*step(e7,x_43)*step(x_43,e8))))))));}vec4 rainbow_soft_1310269270(float x_14){const float e0=0.0;const vec4 v0=vec4(0.49019607843137253,0,0.7019607843137254,1);const float e1=0.1;const vec4 v1=vec4(0.7803921568627451,0,0.7058823529411765,1);const float e2=0.2;const vec4 v2=vec4(1,0,0.4745098039215686,1);const float e3=0.3;const vec4 v3=vec4(1,0.4235294117647059,0,1);const float e4=0.4;const vec4 v4=vec4(0.8705882352941177,0.7607843137254902,0,1);const float e5=0.5;const vec4 v5=vec4(0.5882352941176471,1,0,1);const float e6=0.6;const vec4 v6=vec4(0,1,0.21568627450980393,1);const float e7=0.7;const vec4 v7=vec4(0,0.9647058823529412,0.5882352941176471,1);const float e8=0.8;const vec4 v8=vec4(0.19607843137254902,0.6549019607843137,0.8705882352941177,1);const float e9=0.9;const vec4 v9=vec4(0.403921568627451,0.2,0.9215686274509803,1);const float e10=1.0;const vec4 v10=vec4(0.48627450980392156,0,0.7294117647058823,1);float a0=smoothstep(e0,e1,x_14);float a1=smoothstep(e1,e2,x_14);float a2=smoothstep(e2,e3,x_14);float a3=smoothstep(e3,e4,x_14);float a4=smoothstep(e4,e5,x_14);float a5=smoothstep(e5,e6,x_14);float a6=smoothstep(e6,e7,x_14);float a7=smoothstep(e7,e8,x_14);float a8=smoothstep(e8,e9,x_14);float a9=smoothstep(e9,e10,x_14);return max(mix(v0,v1,a0)*step(e0,x_14)*step(x_14,e1),max(mix(v1,v2,a1)*step(e1,x_14)*step(x_14,e2),max(mix(v2,v3,a2)*step(e2,x_14)*step(x_14,e3),max(mix(v3,v4,a3)*step(e3,x_14)*step(x_14,e4),max(mix(v4,v5,a4)*step(e4,x_14)*step(x_14,e5),max(mix(v5,v6,a5)*step(e5,x_14)*step(x_14,e6),max(mix(v6,v7,a6)*step(e6,x_14)*step(x_14,e7),max(mix(v7,v8,a7)*step(e7,x_14)*step(x_14,e8),max(mix(v8,v9,a8)*step(e8,x_14)*step(x_14,e9),mix(v9,v10,a9)*step(e9,x_14)*step(x_14,e10))))))))));}vec4 bathymetry(float x_36){const float e0=0.0;const vec4 v0=vec4(0.1568627450980392,0.10196078431372549,0.17254901960784313,1);const float e1=0.13;const vec4 v1=vec4(0.23137254901960785,0.19215686274509805,0.35294117647058826,1);const float e2=0.25;const vec4 v2=vec4(0.25098039215686274,0.2980392156862745,0.5450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.24705882352941178,0.43137254901960786,0.592156862745098,1);const float e4=0.5;const vec4 v4=vec4(0.2823529411764706,0.5568627450980392,0.6196078431372549,1);const float e5=0.63;const vec4 v5=vec4(0.3333333333333333,0.6823529411764706,0.6392156862745098,1);const float e6=0.75;const vec4 v6=vec4(0.47058823529411764,0.807843137254902,0.6392156862745098,1);const float e7=0.88;const vec4 v7=vec4(0.7333333333333333,0.9019607843137255,0.6745098039215687,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.996078431372549,0.8,1);float a0=smoothstep(e0,e1,x_36);float a1=smoothstep(e1,e2,x_36);float a2=smoothstep(e2,e3,x_36);float a3=smoothstep(e3,e4,x_36);float a4=smoothstep(e4,e5,x_36);float a5=smoothstep(e5,e6,x_36);float a6=smoothstep(e6,e7,x_36);float a7=smoothstep(e7,e8,x_36);return max(mix(v0,v1,a0)*step(e0,x_36)*step(x_36,e1),max(mix(v1,v2,a1)*step(e1,x_36)*step(x_36,e2),max(mix(v2,v3,a2)*step(e2,x_36)*step(x_36,e3),max(mix(v3,v4,a3)*step(e3,x_36)*step(x_36,e4),max(mix(v4,v5,a4)*step(e4,x_36)*step(x_36,e5),max(mix(v5,v6,a5)*step(e5,x_36)*step(x_36,e6),max(mix(v6,v7,a6)*step(e6,x_36)*step(x_36,e7),mix(v7,v8,a7)*step(e7,x_36)*step(x_36,e8))))))));}vec4 cdom(float x_7){const float e0=0.0;const vec4 v0=vec4(0.1843137254901961,0.058823529411764705,0.24313725490196078,1);const float e1=0.13;const vec4 v1=vec4(0.3411764705882353,0.09019607843137255,0.33725490196078434,1);const float e2=0.25;const vec4 v2=vec4(0.5098039215686274,0.10980392156862745,0.38823529411764707,1);const float e3=0.38;const vec4 v3=vec4(0.6705882352941176,0.1607843137254902,0.3764705882352941,1);const float e4=0.5;const vec4 v4=vec4(0.807843137254902,0.2627450980392157,0.33725490196078434,1);const float e5=0.63;const vec4 v5=vec4(0.9019607843137255,0.41568627450980394,0.32941176470588235,1);const float e6=0.75;const vec4 v6=vec4(0.9490196078431372,0.5843137254901961,0.403921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.7568627450980392,0.5294117647058824,1);const float e8=1.0;const vec4 v8=vec4(0.996078431372549,0.9294117647058824,0.6901960784313725,1);float a0=smoothstep(e0,e1,x_7);float a1=smoothstep(e1,e2,x_7);float a2=smoothstep(e2,e3,x_7);float a3=smoothstep(e3,e4,x_7);float a4=smoothstep(e4,e5,x_7);float a5=smoothstep(e5,e6,x_7);float a6=smoothstep(e6,e7,x_7);float a7=smoothstep(e7,e8,x_7);return max(mix(v0,v1,a0)*step(e0,x_7)*step(x_7,e1),max(mix(v1,v2,a1)*step(e1,x_7)*step(x_7,e2),max(mix(v2,v3,a2)*step(e2,x_7)*step(x_7,e3),max(mix(v3,v4,a3)*step(e3,x_7)*step(x_7,e4),max(mix(v4,v5,a4)*step(e4,x_7)*step(x_7,e5),max(mix(v5,v6,a5)*step(e5,x_7)*step(x_7,e6),max(mix(v6,v7,a6)*step(e6,x_7)*step(x_7,e7),mix(v7,v8,a7)*step(e7,x_7)*step(x_7,e8))))))));}vec4 chlorophyll(float x_6){const float e0=0.0;const vec4 v0=vec4(0.07058823529411765,0.1411764705882353,0.0784313725490196,1);const float e1=0.13;const vec4 v1=vec4(0.09803921568627451,0.24705882352941178,0.1607843137254902,1);const float e2=0.25;const vec4 v2=vec4(0.09411764705882353,0.3568627450980392,0.23137254901960785,1);const float e3=0.38;const vec4 v3=vec4(0.050980392156862744,0.4666666666666667,0.2823529411764706,1);const float e4=0.5;const vec4 v4=vec4(0.07058823529411765,0.5803921568627451,0.3137254901960784,1);const float e5=0.63;const vec4 v5=vec4(0.3137254901960784,0.6784313725490196,0.34901960784313724,1);const float e6=0.75;const vec4 v6=vec4(0.5176470588235295,0.7686274509803922,0.47843137254901963,1);const float e7=0.88;const vec4 v7=vec4(0.6862745098039216,0.8666666666666667,0.6352941176470588,1);const float e8=1.0;const vec4 v8=vec4(0.8431372549019608,0.9764705882352941,0.8156862745098039,1);float a0=smoothstep(e0,e1,x_6);float a1=smoothstep(e1,e2,x_6);float a2=smoothstep(e2,e3,x_6);float a3=smoothstep(e3,e4,x_6);float a4=smoothstep(e4,e5,x_6);float a5=smoothstep(e5,e6,x_6);float a6=smoothstep(e6,e7,x_6);float a7=smoothstep(e7,e8,x_6);return max(mix(v0,v1,a0)*step(e0,x_6)*step(x_6,e1),max(mix(v1,v2,a1)*step(e1,x_6)*step(x_6,e2),max(mix(v2,v3,a2)*step(e2,x_6)*step(x_6,e3),max(mix(v3,v4,a3)*step(e3,x_6)*step(x_6,e4),max(mix(v4,v5,a4)*step(e4,x_6)*step(x_6,e5),max(mix(v5,v6,a5)*step(e5,x_6)*step(x_6,e6),max(mix(v6,v7,a6)*step(e6,x_6)*step(x_6,e7),mix(v7,v8,a7)*step(e7,x_6)*step(x_6,e8))))))));}vec4 density(float x_19){const float e0=0.0;const vec4 v0=vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);const float e1=0.13;const vec4 v1=vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);const float e2=0.25;const vec4 v2=vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);const float e3=0.38;const vec4 v3=vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);const float e4=0.5;const vec4 v4=vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);const float e5=0.63;const vec4 v5=vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);const float e6=0.75;const vec4 v6=vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);const float e7=0.88;const vec4 v7=vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);const float e8=1.0;const vec4 v8=vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);float a0=smoothstep(e0,e1,x_19);float a1=smoothstep(e1,e2,x_19);float a2=smoothstep(e2,e3,x_19);float a3=smoothstep(e3,e4,x_19);float a4=smoothstep(e4,e5,x_19);float a5=smoothstep(e5,e6,x_19);float a6=smoothstep(e6,e7,x_19);float a7=smoothstep(e7,e8,x_19);return max(mix(v0,v1,a0)*step(e0,x_19)*step(x_19,e1),max(mix(v1,v2,a1)*step(e1,x_19)*step(x_19,e2),max(mix(v2,v3,a2)*step(e2,x_19)*step(x_19,e3),max(mix(v3,v4,a3)*step(e3,x_19)*step(x_19,e4),max(mix(v4,v5,a4)*step(e4,x_19)*step(x_19,e5),max(mix(v5,v6,a5)*step(e5,x_19)*step(x_19,e6),max(mix(v6,v7,a6)*step(e6,x_19)*step(x_19,e7),mix(v7,v8,a7)*step(e7,x_19)*step(x_19,e8))))))));}vec4 freesurface_blue_3154355989(float x_35){const float e0=0.0;const vec4 v0=vec4(0.11764705882352941,0.01568627450980392,0.43137254901960786,1);const float e1=0.13;const vec4 v1=vec4(0.1843137254901961,0.054901960784313725,0.6901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.1607843137254902,0.17647058823529413,0.9254901960784314,1);const float e3=0.38;const vec4 v3=vec4(0.09803921568627451,0.38823529411764707,0.8313725490196079,1);const float e4=0.5;const vec4 v4=vec4(0.26666666666666666,0.5137254901960784,0.7843137254901961,1);const float e5=0.63;const vec4 v5=vec4(0.4470588235294118,0.611764705882353,0.7725490196078432,1);const float e6=0.75;const vec4 v6=vec4(0.615686274509804,0.7098039215686275,0.796078431372549,1);const float e7=0.88;const vec4 v7=vec4(0.7843137254901961,0.8156862745098039,0.8470588235294118,1);const float e8=1.0;const vec4 v8=vec4(0.9450980392156862,0.9294117647058824,0.9254901960784314,1);float a0=smoothstep(e0,e1,x_35);float a1=smoothstep(e1,e2,x_35);float a2=smoothstep(e2,e3,x_35);float a3=smoothstep(e3,e4,x_35);float a4=smoothstep(e4,e5,x_35);float a5=smoothstep(e5,e6,x_35);float a6=smoothstep(e6,e7,x_35);float a7=smoothstep(e7,e8,x_35);return max(mix(v0,v1,a0)*step(e0,x_35)*step(x_35,e1),max(mix(v1,v2,a1)*step(e1,x_35)*step(x_35,e2),max(mix(v2,v3,a2)*step(e2,x_35)*step(x_35,e3),max(mix(v3,v4,a3)*step(e3,x_35)*step(x_35,e4),max(mix(v4,v5,a4)*step(e4,x_35)*step(x_35,e5),max(mix(v5,v6,a5)*step(e5,x_35)*step(x_35,e6),max(mix(v6,v7,a6)*step(e6,x_35)*step(x_35,e7),mix(v7,v8,a7)*step(e7,x_35)*step(x_35,e8))))))));}vec4 freesurface_red_1679163293(float x_20){const float e0=0.0;const vec4 v0=vec4(0.23529411764705882,0.03529411764705882,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.39215686274509803,0.06666666666666667,0.10588235294117647,1);const float e2=0.25;const vec4 v2=vec4(0.5568627450980392,0.0784313725490196,0.11372549019607843,1);const float e3=0.38;const vec4 v3=vec4(0.6941176470588235,0.16862745098039217,0.10588235294117647,1);const float e4=0.5;const vec4 v4=vec4(0.7529411764705882,0.3411764705882353,0.24705882352941178,1);const float e5=0.63;const vec4 v5=vec4(0.803921568627451,0.49019607843137253,0.4117647058823529,1);const float e6=0.75;const vec4 v6=vec4(0.8470588235294118,0.6352941176470588,0.5803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.8901960784313725,0.7803921568627451,0.7568627450980392,1);const float e8=1.0;const vec4 v8=vec4(0.9450980392156862,0.9294117647058824,0.9254901960784314,1);float a0=smoothstep(e0,e1,x_20);float a1=smoothstep(e1,e2,x_20);float a2=smoothstep(e2,e3,x_20);float a3=smoothstep(e3,e4,x_20);float a4=smoothstep(e4,e5,x_20);float a5=smoothstep(e5,e6,x_20);float a6=smoothstep(e6,e7,x_20);float a7=smoothstep(e7,e8,x_20);return max(mix(v0,v1,a0)*step(e0,x_20)*step(x_20,e1),max(mix(v1,v2,a1)*step(e1,x_20)*step(x_20,e2),max(mix(v2,v3,a2)*step(e2,x_20)*step(x_20,e3),max(mix(v3,v4,a3)*step(e3,x_20)*step(x_20,e4),max(mix(v4,v5,a4)*step(e4,x_20)*step(x_20,e5),max(mix(v5,v6,a5)*step(e5,x_20)*step(x_20,e6),max(mix(v6,v7,a6)*step(e6,x_20)*step(x_20,e7),mix(v7,v8,a7)*step(e7,x_20)*step(x_20,e8))))))));}vec4 oxygen(float x_11){const float e0=0.0;const vec4 v0=vec4(0.25098039215686274,0.0196078431372549,0.0196078431372549,1);const float e1=0.13;const vec4 v1=vec4(0.41568627450980394,0.023529411764705882,0.058823529411764705,1);const float e2=0.25;const vec4 v2=vec4(0.5647058823529412,0.10196078431372549,0.027450980392156862,1);const float e3=0.38;const vec4 v3=vec4(0.6588235294117647,0.25098039215686274,0.011764705882352941,1);const float e4=0.5;const vec4 v4=vec4(0.7372549019607844,0.39215686274509803,0.01568627450980392,1);const float e5=0.63;const vec4 v5=vec4(0.807843137254902,0.5333333333333333,0.043137254901960784,1);const float e6=0.75;const vec4 v6=vec4(0.8627450980392157,0.6823529411764706,0.09803921568627451,1);const float e7=0.88;const vec4 v7=vec4(0.9058823529411765,0.8431372549019608,0.17254901960784313,1);const float e8=1.0;const vec4 v8=vec4(0.9725490196078431,0.996078431372549,0.4117647058823529,1);float a0=smoothstep(e0,e1,x_11);float a1=smoothstep(e1,e2,x_11);float a2=smoothstep(e2,e3,x_11);float a3=smoothstep(e3,e4,x_11);float a4=smoothstep(e4,e5,x_11);float a5=smoothstep(e5,e6,x_11);float a6=smoothstep(e6,e7,x_11);float a7=smoothstep(e7,e8,x_11);return max(mix(v0,v1,a0)*step(e0,x_11)*step(x_11,e1),max(mix(v1,v2,a1)*step(e1,x_11)*step(x_11,e2),max(mix(v2,v3,a2)*step(e2,x_11)*step(x_11,e3),max(mix(v3,v4,a3)*step(e3,x_11)*step(x_11,e4),max(mix(v4,v5,a4)*step(e4,x_11)*step(x_11,e5),max(mix(v5,v6,a5)*step(e5,x_11)*step(x_11,e6),max(mix(v6,v7,a6)*step(e6,x_11)*step(x_11,e7),mix(v7,v8,a7)*step(e7,x_11)*step(x_11,e8))))))));}vec4 par(float x_28){const float e0=0.0;const vec4 v0=vec4(0.2,0.0784313725490196,0.09411764705882353,1);const float e1=0.13;const vec4 v1=vec4(0.35294117647058826,0.12549019607843137,0.13725490196078433,1);const float e2=0.25;const vec4 v2=vec4(0.5058823529411764,0.17254901960784313,0.13333333333333333,1);const float e3=0.38;const vec4 v3=vec4(0.6235294117647059,0.26666666666666666,0.09803921568627451,1);const float e4=0.5;const vec4 v4=vec4(0.7137254901960784,0.38823529411764707,0.07450980392156863,1);const float e5=0.63;const vec4 v5=vec4(0.7803921568627451,0.5254901960784314,0.08627450980392157,1);const float e6=0.75;const vec4 v6=vec4(0.8313725490196079,0.6705882352941176,0.13725490196078433,1);const float e7=0.88;const vec4 v7=vec4(0.8666666666666667,0.8235294117647058,0.21176470588235294,1);const float e8=1.0;const vec4 v8=vec4(0.8823529411764706,0.9921568627450981,0.29411764705882354,1);float a0=smoothstep(e0,e1,x_28);float a1=smoothstep(e1,e2,x_28);float a2=smoothstep(e2,e3,x_28);float a3=smoothstep(e3,e4,x_28);float a4=smoothstep(e4,e5,x_28);float a5=smoothstep(e5,e6,x_28);float a6=smoothstep(e6,e7,x_28);float a7=smoothstep(e7,e8,x_28);return max(mix(v0,v1,a0)*step(e0,x_28)*step(x_28,e1),max(mix(v1,v2,a1)*step(e1,x_28)*step(x_28,e2),max(mix(v2,v3,a2)*step(e2,x_28)*step(x_28,e3),max(mix(v3,v4,a3)*step(e3,x_28)*step(x_28,e4),max(mix(v4,v5,a4)*step(e4,x_28)*step(x_28,e5),max(mix(v5,v6,a5)*step(e5,x_28)*step(x_28,e6),max(mix(v6,v7,a6)*step(e6,x_28)*step(x_28,e7),mix(v7,v8,a7)*step(e7,x_28)*step(x_28,e8))))))));}vec4 phase(float x_39){const float e0=0.0;const vec4 v0=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);const float e1=0.13;const vec4 v1=vec4(0.7215686274509804,0.2784313725490196,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.7294117647058823,0.22745098039215686,0.45098039215686275,1);const float e3=0.38;const vec4 v3=vec4(0.6274509803921569,0.2784313725490196,0.7254901960784313,1);const float e4=0.5;const vec4 v4=vec4(0.43137254901960786,0.3803921568627451,0.8549019607843137,1);const float e5=0.63;const vec4 v5=vec4(0.19607843137254902,0.4823529411764706,0.6431372549019608,1);const float e6=0.75;const vec4 v6=vec4(0.12156862745098039,0.5137254901960784,0.43137254901960786,1);const float e7=0.88;const vec4 v7=vec4(0.30196078431372547,0.5058823529411764,0.13333333333333333,1);const float e8=1.0;const vec4 v8=vec4(0.5686274509803921,0.4117647058823529,0.07058823529411765,1);float a0=smoothstep(e0,e1,x_39);float a1=smoothstep(e1,e2,x_39);float a2=smoothstep(e2,e3,x_39);float a3=smoothstep(e3,e4,x_39);float a4=smoothstep(e4,e5,x_39);float a5=smoothstep(e5,e6,x_39);float a6=smoothstep(e6,e7,x_39);float a7=smoothstep(e7,e8,x_39);return max(mix(v0,v1,a0)*step(e0,x_39)*step(x_39,e1),max(mix(v1,v2,a1)*step(e1,x_39)*step(x_39,e2),max(mix(v2,v3,a2)*step(e2,x_39)*step(x_39,e3),max(mix(v3,v4,a3)*step(e3,x_39)*step(x_39,e4),max(mix(v4,v5,a4)*step(e4,x_39)*step(x_39,e5),max(mix(v5,v6,a5)*step(e5,x_39)*step(x_39,e6),max(mix(v6,v7,a6)*step(e6,x_39)*step(x_39,e7),mix(v7,v8,a7)*step(e7,x_39)*step(x_39,e8))))))));}vec4 salinity(float x_26){const float e0=0.0;const vec4 v0=vec4(0.16470588235294117,0.09411764705882353,0.4235294117647059,1);const float e1=0.13;const vec4 v1=vec4(0.12941176470588237,0.19607843137254902,0.6352941176470588,1);const float e2=0.25;const vec4 v2=vec4(0.058823529411764705,0.35294117647058826,0.5686274509803921,1);const float e3=0.38;const vec4 v3=vec4(0.1568627450980392,0.4627450980392157,0.5372549019607843,1);const float e4=0.5;const vec4 v4=vec4(0.23137254901960785,0.5725490196078431,0.5294117647058824,1);const float e5=0.63;const vec4 v5=vec4(0.30980392156862746,0.6862745098039216,0.49411764705882355,1);const float e6=0.75;const vec4 v6=vec4(0.47058823529411764,0.796078431372549,0.40784313725490196,1);const float e7=0.88;const vec4 v7=vec4(0.7568627450980392,0.8666666666666667,0.39215686274509803,1);const float e8=1.0;const vec4 v8=vec4(0.9921568627450981,0.9372549019607843,0.6039215686274509,1);float a0=smoothstep(e0,e1,x_26);float a1=smoothstep(e1,e2,x_26);float a2=smoothstep(e2,e3,x_26);float a3=smoothstep(e3,e4,x_26);float a4=smoothstep(e4,e5,x_26);float a5=smoothstep(e5,e6,x_26);float a6=smoothstep(e6,e7,x_26);float a7=smoothstep(e7,e8,x_26);return max(mix(v0,v1,a0)*step(e0,x_26)*step(x_26,e1),max(mix(v1,v2,a1)*step(e1,x_26)*step(x_26,e2),max(mix(v2,v3,a2)*step(e2,x_26)*step(x_26,e3),max(mix(v3,v4,a3)*step(e3,x_26)*step(x_26,e4),max(mix(v4,v5,a4)*step(e4,x_26)*step(x_26,e5),max(mix(v5,v6,a5)*step(e5,x_26)*step(x_26,e6),max(mix(v6,v7,a6)*step(e6,x_26)*step(x_26,e7),mix(v7,v8,a7)*step(e7,x_26)*step(x_26,e8))))))));}vec4 temperature(float x_8){const float e0=0.0;const vec4 v0=vec4(0.01568627450980392,0.13725490196078433,0.2,1);const float e1=0.13;const vec4 v1=vec4(0.09019607843137255,0.2,0.47843137254901963,1);const float e2=0.25;const vec4 v2=vec4(0.3333333333333333,0.23137254901960785,0.615686274509804,1);const float e3=0.38;const vec4 v3=vec4(0.5058823529411764,0.30980392156862746,0.5607843137254902,1);const float e4=0.5;const vec4 v4=vec4(0.6862745098039216,0.37254901960784315,0.5098039215686274,1);const float e5=0.63;const vec4 v5=vec4(0.8705882352941177,0.4392156862745098,0.396078431372549,1);const float e6=0.75;const vec4 v6=vec4(0.9764705882352941,0.5725490196078431,0.25882352941176473,1);const float e7=0.88;const vec4 v7=vec4(0.9764705882352941,0.7686274509803922,0.2549019607843137,1);const float e8=1.0;const vec4 v8=vec4(0.9098039215686274,0.9803921568627451,0.3568627450980392,1);float a0=smoothstep(e0,e1,x_8);float a1=smoothstep(e1,e2,x_8);float a2=smoothstep(e2,e3,x_8);float a3=smoothstep(e3,e4,x_8);float a4=smoothstep(e4,e5,x_8);float a5=smoothstep(e5,e6,x_8);float a6=smoothstep(e6,e7,x_8);float a7=smoothstep(e7,e8,x_8);return max(mix(v0,v1,a0)*step(e0,x_8)*step(x_8,e1),max(mix(v1,v2,a1)*step(e1,x_8)*step(x_8,e2),max(mix(v2,v3,a2)*step(e2,x_8)*step(x_8,e3),max(mix(v3,v4,a3)*step(e3,x_8)*step(x_8,e4),max(mix(v4,v5,a4)*step(e4,x_8)*step(x_8,e5),max(mix(v5,v6,a5)*step(e5,x_8)*step(x_8,e6),max(mix(v6,v7,a6)*step(e6,x_8)*step(x_8,e7),mix(v7,v8,a7)*step(e7,x_8)*step(x_8,e8))))))));}vec4 turbidity(float x_40){const float e0=0.0;const vec4 v0=vec4(0.13333333333333333,0.12156862745098039,0.10588235294117647,1);const float e1=0.13;const vec4 v1=vec4(0.2549019607843137,0.19607843137254902,0.1607843137254902,1);const float e2=0.25;const vec4 v2=vec4(0.3843137254901961,0.27058823529411763,0.20392156862745098,1);const float e3=0.38;const vec4 v3=vec4(0.5137254901960784,0.34901960784313724,0.2235294117647059,1);const float e4=0.5;const vec4 v4=vec4(0.6313725490196078,0.4392156862745098,0.23137254901960785,1);const float e5=0.63;const vec4 v5=vec4(0.7254901960784313,0.5490196078431373,0.25882352941176473,1);const float e6=0.75;const vec4 v6=vec4(0.792156862745098,0.6823529411764706,0.34509803921568627,1);const float e7=0.88;const vec4 v7=vec4(0.8470588235294118,0.8196078431372549,0.49411764705882355,1);const float e8=1.0;const vec4 v8=vec4(0.9137254901960784,0.9647058823529412,0.6705882352941176,1);float a0=smoothstep(e0,e1,x_40);float a1=smoothstep(e1,e2,x_40);float a2=smoothstep(e2,e3,x_40);float a3=smoothstep(e3,e4,x_40);float a4=smoothstep(e4,e5,x_40);float a5=smoothstep(e5,e6,x_40);float a6=smoothstep(e6,e7,x_40);float a7=smoothstep(e7,e8,x_40);return max(mix(v0,v1,a0)*step(e0,x_40)*step(x_40,e1),max(mix(v1,v2,a1)*step(e1,x_40)*step(x_40,e2),max(mix(v2,v3,a2)*step(e2,x_40)*step(x_40,e3),max(mix(v3,v4,a3)*step(e3,x_40)*step(x_40,e4),max(mix(v4,v5,a4)*step(e4,x_40)*step(x_40,e5),max(mix(v5,v6,a5)*step(e5,x_40)*step(x_40,e6),max(mix(v6,v7,a6)*step(e6,x_40)*step(x_40,e7),mix(v7,v8,a7)*step(e7,x_40)*step(x_40,e8))))))));}vec4 velocity_blue_297387650(float x_2){const float e0=0.0;const vec4 v0=vec4(0.06666666666666667,0.12549019607843137,0.25098039215686274,1);const float e1=0.13;const vec4 v1=vec4(0.13725490196078433,0.20392156862745098,0.4549019607843137,1);const float e2=0.25;const vec4 v2=vec4(0.11372549019607843,0.3176470588235294,0.611764705882353,1);const float e3=0.38;const vec4 v3=vec4(0.12156862745098039,0.44313725490196076,0.6352941176470588,1);const float e4=0.5;const vec4 v4=vec4(0.19607843137254902,0.5647058823529412,0.6627450980392157,1);const float e5=0.63;const vec4 v5=vec4(0.3411764705882353,0.6784313725490196,0.6901960784313725,1);const float e6=0.75;const vec4 v6=vec4(0.5843137254901961,0.7686274509803922,0.7411764705882353,1);const float e7=0.88;const vec4 v7=vec4(0.796078431372549,0.8666666666666667,0.8274509803921568,1);const float e8=1.0;const vec4 v8=vec4(0.996078431372549,0.984313725490196,0.9019607843137255,1);float a0=smoothstep(e0,e1,x_2);float a1=smoothstep(e1,e2,x_2);float a2=smoothstep(e2,e3,x_2);float a3=smoothstep(e3,e4,x_2);float a4=smoothstep(e4,e5,x_2);float a5=smoothstep(e5,e6,x_2);float a6=smoothstep(e6,e7,x_2);float a7=smoothstep(e7,e8,x_2);return max(mix(v0,v1,a0)*step(e0,x_2)*step(x_2,e1),max(mix(v1,v2,a1)*step(e1,x_2)*step(x_2,e2),max(mix(v2,v3,a2)*step(e2,x_2)*step(x_2,e3),max(mix(v3,v4,a3)*step(e3,x_2)*step(x_2,e4),max(mix(v4,v5,a4)*step(e4,x_2)*step(x_2,e5),max(mix(v5,v6,a5)*step(e5,x_2)*step(x_2,e6),max(mix(v6,v7,a6)*step(e6,x_2)*step(x_2,e7),mix(v7,v8,a7)*step(e7,x_2)*step(x_2,e8))))))));}vec4 velocity_green_2558432129(float x_27){const float e0=0.0;const vec4 v0=vec4(0.09019607843137255,0.13725490196078433,0.07450980392156863,1);const float e1=0.13;const vec4 v1=vec4(0.09411764705882353,0.25098039215686274,0.14901960784313725,1);const float e2=0.25;const vec4 v2=vec4(0.043137254901960784,0.37254901960784315,0.17647058823529413,1);const float e3=0.38;const vec4 v3=vec4(0.15294117647058825,0.4823529411764706,0.13725490196078433,1);const float e4=0.5;const vec4 v4=vec4(0.37254901960784315,0.5725490196078431,0.047058823529411764,1);const float e5=0.63;const vec4 v5=vec4(0.596078431372549,0.6470588235294118,0.07058823529411765,1);const float e6=0.75;const vec4 v6=vec4(0.788235294117647,0.7294117647058823,0.27058823529411763,1);const float e7=0.88;const vec4 v7=vec4(0.9137254901960784,0.8470588235294118,0.5372549019607843,1);const float e8=1.0;const vec4 v8=vec4(1,0.9921568627450981,0.803921568627451,1);float a0=smoothstep(e0,e1,x_27);float a1=smoothstep(e1,e2,x_27);float a2=smoothstep(e2,e3,x_27);float a3=smoothstep(e3,e4,x_27);float a4=smoothstep(e4,e5,x_27);float a5=smoothstep(e5,e6,x_27);float a6=smoothstep(e6,e7,x_27);float a7=smoothstep(e7,e8,x_27);return max(mix(v0,v1,a0)*step(e0,x_27)*step(x_27,e1),max(mix(v1,v2,a1)*step(e1,x_27)*step(x_27,e2),max(mix(v2,v3,a2)*step(e2,x_27)*step(x_27,e3),max(mix(v3,v4,a3)*step(e3,x_27)*step(x_27,e4),max(mix(v4,v5,a4)*step(e4,x_27)*step(x_27,e5),max(mix(v5,v6,a5)*step(e5,x_27)*step(x_27,e6),max(mix(v6,v7,a6)*step(e6,x_27)*step(x_27,e7),mix(v7,v8,a7)*step(e7,x_27)*step(x_27,e8))))))));}vec4 cubehelix(float x_37){const float e0=0.0;const vec4 v0=vec4(0,0,0,1);const float e1=0.07;const vec4 v1=vec4(0.08627450980392157,0.0196078431372549,0.23137254901960785,1);const float e2=0.13;const vec4 v2=vec4(0.23529411764705882,0.01568627450980392,0.4117647058823529,1);const float e3=0.2;const vec4 v3=vec4(0.42745098039215684,0.00392156862745098,0.5294117647058824,1);const float e4=0.27;const vec4 v4=vec4(0.6313725490196078,0,0.5764705882352941,1);const float e5=0.33;const vec4 v5=vec4(0.8235294117647058,0.00784313725490196,0.5568627450980392,1);const float e6=0.4;const vec4 v6=vec4(0.984313725490196,0.043137254901960784,0.4823529411764706,1);const float e7=0.47;const vec4 v7=vec4(1,0.11372549019607843,0.3803921568627451,1);const float e8=0.53;const vec4 v8=vec4(1,0.21176470588235294,0.27058823529411763,1);const float e9=0.6;const vec4 v9=vec4(1,0.3333333333333333,0.1803921568627451,1);const float e10=0.67;const vec4 v10=vec4(1,0.47058823529411764,0.13333333333333333,1);const float e11=0.73;const vec4 v11=vec4(1,0.615686274509804,0.1450980392156863,1);const float e12=0.8;const vec4 v12=vec4(0.9450980392156862,0.7490196078431373,0.2235294117647059,1);const float e13=0.87;const vec4 v13=vec4(0.8784313725490196,0.8627450980392157,0.36470588235294116,1);const float e14=0.93;const vec4 v14=vec4(0.8549019607843137,0.9450980392156862,0.5568627450980392,1);const float e15=1.0;const vec4 v15=vec4(0.8901960784313725,0.9921568627450981,0.7764705882352941,1);float a0=smoothstep(e0,e1,x_37);float a1=smoothstep(e1,e2,x_37);float a2=smoothstep(e2,e3,x_37);float a3=smoothstep(e3,e4,x_37);float a4=smoothstep(e4,e5,x_37);float a5=smoothstep(e5,e6,x_37);float a6=smoothstep(e6,e7,x_37);float a7=smoothstep(e7,e8,x_37);float a8=smoothstep(e8,e9,x_37);float a9=smoothstep(e9,e10,x_37);float a10=smoothstep(e10,e11,x_37);float a11=smoothstep(e11,e12,x_37);float a12=smoothstep(e12,e13,x_37);float a13=smoothstep(e13,e14,x_37);float a14=smoothstep(e14,e15,x_37);return max(mix(v0,v1,a0)*step(e0,x_37)*step(x_37,e1),max(mix(v1,v2,a1)*step(e1,x_37)*step(x_37,e2),max(mix(v2,v3,a2)*step(e2,x_37)*step(x_37,e3),max(mix(v3,v4,a3)*step(e3,x_37)*step(x_37,e4),max(mix(v4,v5,a4)*step(e4,x_37)*step(x_37,e5),max(mix(v5,v6,a5)*step(e5,x_37)*step(x_37,e6),max(mix(v6,v7,a6)*step(e6,x_37)*step(x_37,e7),max(mix(v7,v8,a7)*step(e7,x_37)*step(x_37,e8),max(mix(v8,v9,a8)*step(e8,x_37)*step(x_37,e9),max(mix(v9,v10,a9)*step(e9,x_37)*step(x_37,e10),max(mix(v10,v11,a10)*step(e10,x_37)*step(x_37,e11),max(mix(v11,v12,a11)*step(e11,x_37)*step(x_37,e12),max(mix(v12,v13,a12)*step(e12,x_37)*step(x_37,e13),max(mix(v13,v14,a13)*step(e13,x_37)*step(x_37,e14),mix(v14,v15,a14)*step(e14,x_37)*step(x_37,e15)))))))))))))));}float sample_and_apply_contrast_limits(SAMPLER_TYPE channel,vec3 vTexCoord,vec2 contrastLimits){float fragIntensity=float(texture(channel,vTexCoord).r);float contrastLimitsAppliedToIntensity=(fragIntensity-contrastLimits[0])/max(0.0005,(contrastLimits[1]-contrastLimits[0]));return max(0.,contrastLimitsAppliedToIntensity);}vec4 colormap(float intensity,float opacity){return vec4(COLORMAP_FUNCTION(min(1.,intensity)).xyz,opacity);}";
var channels = {
  name: "channel-intensity-module",
  fs
};
var RENDERING_MODES_BLEND = {
  [RENDERING_MODES.MAX_INTENSITY_PROJECTION]: {
    _BEFORE_RENDER: `      float maxVals[6] = float[6](-1.0, -1.0, -1.0, -1.0, -1.0, -1.0);
    `,
    _RENDER: `    
      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);

      for(int i = 0; i < 6; i++) {
        if(intensityArray[i] > maxVals[i]) {
          maxVals[i] = intensityArray[i];
        }
      }
    `,
    _AFTER_RENDER: `      vec3 rgbCombo = vec3(0.0);
      for(int i = 0; i < 6; i++) {
        rgbCombo += max(0.0, min(1.0, maxVals[i])) * vec3(colors[i]);
      }
      color = vec4(rgbCombo, 1.0);
    `
  },
  [RENDERING_MODES.MIN_INTENSITY_PROJECTION]: {
    _BEFORE_RENDER: `      float minVals[6] = float[6](1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0.);
    `,
    _RENDER: `    
      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);

      for(int i = 0; i < 6; i++) {
        if(intensityArray[i] < minVals[i]) {
          minVals[i] = intensityArray[i];
        }
      }
    `,
    _AFTER_RENDER: `      vec3 rgbCombo = vec3(0.0);
      for(int i = 0; i < 6; i++) {
        rgbCombo += max(0.0, min(1.0, minVals[i])) * vec3(colors[i]);
      }
      color = vec4(rgbCombo, 1.0);
    `
  },
  [RENDERING_MODES.ADDITIVE]: {
    _BEFORE_RENDER: ``,
    _RENDER: `      vec3 rgbCombo = vec3(0.0);
      vec3 hsvCombo = vec3(0.0);
      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);
      float total = 0.0;
      for(int i = 0; i < 6; i++) {
        float intensityValue = intensityArray[i];
        rgbCombo += max(0.0, min(1.0, intensityValue)) * colors[i];
        total += intensityValue;
      }
      // Do not go past 1 in opacity.
      total = min(total, 1.0);
      vec4 val_color = vec4(rgbCombo, total);
      // Opacity correction
      val_color.a = 1.0 - pow(1.0 - val_color.a, 1.0);
      color.rgb += (1.0 - color.a) * val_color.a * val_color.rgb;
      color.a += (1.0 - color.a) * val_color.a;
      if (color.a >= 0.95) {
        break;
      }
    `,
    _AFTER_RENDER: ``
  }
};
var RENDERING_MODES_COLORMAP = {
  [RENDERING_MODES.MAX_INTENSITY_PROJECTION]: {
    _BEFORE_RENDER: `      float maxVals[6] = float[6](-1.0, -1.0, -1.0, -1.0, -1.0, -1.0);
    `,
    _RENDER: `    
      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);

      for(int i = 0; i < 6; i++) {
        if(intensityArray[i] > maxVals[i]) {
          maxVals[i] = intensityArray[i];
        }
      }
    `,
    _AFTER_RENDER: `      float total = 0.0;
      for(int i = 0; i < 6; i++) {
        total += maxVals[i];
      }
      // Do not go past 1 in opacity/colormap value.
      total = min(total, 1.0);
      color = colormap(total, total);
    `
  },
  [RENDERING_MODES.MIN_INTENSITY_PROJECTION]: {
    _BEFORE_RENDER: `      float minVals[6] = float[6](1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0., 1. / 0.);
    `,
    _RENDER: `    
      float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);

      for(int i = 0; i < 6; i++) {
        if(intensityArray[i] < minVals[i]) {
          minVals[i] = intensityArray[i];
        }
      }
    `,
    _AFTER_RENDER: `      float total = 0.0;
      for(int i = 0; i < 6; i++) {
        total += minVals[i];
      }
      // Do not go past 1 in opacity/colormap value.
      total = min(total, 1.0);
      color = colormap(total, total);
    `
  },
  [RENDERING_MODES.ADDITIVE]: {
    _BEFORE_RENDER: ``,
    _RENDER: `    float intensityArray[6] = float[6](intensityValue0, intensityValue1, intensityValue2, intensityValue3, intensityValue4, intensityValue5);
		float total = 0.0;

		for(int i = 0; i < 6; i++) {
			total += intensityArray[i];
		}
		// Do not go past 1 in opacity/colormap value.
		total = min(total, 1.0);

		vec4 val_color = colormap(total, total);

		// Opacity correction
		val_color.a = 1.0 - pow(1.0 - val_color.a, 1.0);
		color.rgb += (1.0 - color.a) * val_color.a * val_color.rgb;
		color.a += (1.0 - color.a) * val_color.a;
		if (color.a >= 0.95) {
			break;
		}
    p += ray_dir * dt;
    `,
    _AFTER_RENDER: ``
  }
};
var CUBE_STRIP = [
  1,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  0,
  1,
  0,
  0,
  0,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  1,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  1,
  0,
  0,
  0,
  0,
  0
];
var NUM_PLANES_DEFAULT = 1;
var defaultProps$1 = {
  pickable: false,
  coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
  channelData: { type: "object", value: {}, compare: true },
  colors: { type: "array", value: [], compare: true },
  contrastLimits: { type: "array", value: [], compare: true },
  dtype: { type: "string", value: "Uint8", compare: true },
  colormap: { type: "string", value: "", compare: true },
  xSlice: { type: "array", value: null, compare: true },
  ySlice: { type: "array", value: null, compare: true },
  zSlice: { type: "array", value: null, compare: true },
  clippingPlanes: { type: "array", value: [], compare: true },
  renderingMode: {
    type: "string",
    value: RENDERING_MODES.ADDITIVE,
    compare: true
  },
  resolutionMatrix: { type: "object", value: new Matrix4(), compare: true }
};
function getRenderingAttrs() {
  const values = getDtypeValues("Float32");
  return __spreadProps(__spreadValues({}, values), {
    sampler: values.sampler.replace("2D", "3D"),
    cast: (data) => new Float32Array(data)
  });
}
function removeExtraColormapFunctionsFromShader(colormap) {
  const discardColormaps = COLORMAPS.filter((i) => i !== (colormap || "viridis")).map((i) => i.replace(/-/g, "_"));
  const discardRegex = new RegExp(`vec4 (${discardColormaps.join("(_([0-9]*))?|")})\\(float x_[0-9]+\\){([^}]+)}`, "g");
  const channelsModules = __spreadProps(__spreadValues({}, channels), {
    fs: channels.fs.replace(discardRegex, ""),
    defines: {
      COLORMAP_FUNCTION: colormap || "viridis"
    }
  });
  return channelsModules;
}
var XR3DLayer = class extends Layer {
  initializeState() {
    const { gl } = this.context;
    this.setState({
      model: this._getModel(gl)
    });
    gl.pixelStorei(GL.UNPACK_ALIGNMENT, 1);
    gl.pixelStorei(GL.PACK_ALIGNMENT, 1);
  }
  getShaders() {
    const { colormap, renderingMode, clippingPlanes } = this.props;
    const { sampler } = getRenderingAttrs();
    const { _BEFORE_RENDER, _RENDER, _AFTER_RENDER } = colormap ? RENDERING_MODES_COLORMAP[renderingMode] : RENDERING_MODES_BLEND[renderingMode];
    const channelsModules = removeExtraColormapFunctionsFromShader(colormap);
    return super.getShaders({
      vs,
      fs: fs$1.replace("_BEFORE_RENDER", _BEFORE_RENDER).replace("_RENDER", _RENDER).replace("_AFTER_RENDER", _AFTER_RENDER),
      defines: {
        SAMPLER_TYPE: sampler,
        COLORMAP_FUNCTION: colormap || "viridis",
        NUM_PLANES: String(clippingPlanes.length || NUM_PLANES_DEFAULT)
      },
      modules: [channelsModules]
    });
  }
  finalizeState() {
    super.finalizeState();
    if (this.state.textures) {
      Object.values(this.state.textures).forEach((tex) => tex && tex.delete());
    }
  }
  updateState({ props, oldProps, changeFlags }) {
    var _a2, _b2;
    if (changeFlags.extensionsChanged || props.colormap !== oldProps.colormap || props.renderingMode !== oldProps.renderingMode || props.clippingPlanes.length !== oldProps.clippingPlanes.length) {
      const { gl } = this.context;
      if (this.state.model) {
        this.state.model.delete();
      }
      this.setState({ model: this._getModel(gl) });
    }
    if (props.channelData && ((_a2 = props == null ? void 0 : props.channelData) == null ? void 0 : _a2.data) !== ((_b2 = oldProps == null ? void 0 : oldProps.channelData) == null ? void 0 : _b2.data)) {
      this.loadTexture(props.channelData);
    }
  }
  _getModel(gl) {
    if (!gl) {
      return null;
    }
    return new Model(gl, __spreadProps(__spreadValues({}, this.getShaders()), {
      geometry: new Geometry({
        drawMode: gl.TRIANGLE_STRIP,
        attributes: {
          positions: new Float32Array(CUBE_STRIP)
        }
      })
    }));
  }
  draw({ uniforms }) {
    const { textures, model, scaleMatrix } = this.state;
    const {
      contrastLimits,
      colors,
      xSlice,
      ySlice,
      zSlice,
      modelMatrix,
      channelsVisible,
      domain,
      dtype,
      clippingPlanes,
      resolutionMatrix
    } = this.props;
    const {
      viewMatrix,
      viewMatrixInverse,
      projectionMatrix
    } = this.context.viewport;
    if (textures && model && scaleMatrix) {
      const { paddedContrastLimits, paddedColors } = padColorsAndWindows({
        contrastLimits,
        colors,
        channelsVisible,
        domain,
        dtype
      });
      const invertedScaleMatrix = scaleMatrix.clone().invert();
      const invertedResolutionMatrix = resolutionMatrix.clone().invert();
      const paddedClippingPlanes = padWithDefault(clippingPlanes.map((p) => p.clone().transform(invertedScaleMatrix).transform(invertedResolutionMatrix)), new Plane([1, 0, 0]), clippingPlanes.length || NUM_PLANES_DEFAULT);
      const normals = paddedClippingPlanes.map((plane) => plane.normal).flat();
      const distances = paddedClippingPlanes.map((plane) => plane.distance);
      model.setUniforms(__spreadProps(__spreadValues(__spreadValues({}, uniforms), textures), {
        contrastLimits: paddedContrastLimits,
        colors: paddedColors,
        xSlice: new Float32Array(xSlice ? xSlice.map((i) => i / scaleMatrix[0] / resolutionMatrix[0]) : [0, 1]),
        ySlice: new Float32Array(ySlice ? ySlice.map((i) => i / scaleMatrix[5] / resolutionMatrix[5]) : [0, 1]),
        zSlice: new Float32Array(zSlice ? zSlice.map((i) => i / scaleMatrix[10] / resolutionMatrix[10]) : [0, 1]),
        eye_pos: new Float32Array([
          viewMatrixInverse[12],
          viewMatrixInverse[13],
          viewMatrixInverse[14]
        ]),
        view: viewMatrix,
        proj: projectionMatrix,
        scale: scaleMatrix,
        resolution: resolutionMatrix,
        model: modelMatrix || new Matrix4(),
        normals,
        distances
      })).draw();
    }
  }
  loadTexture(channelData) {
    const textures = {
      volume0: null,
      volume1: null,
      volume2: null,
      volume3: null,
      volume4: null,
      volume5: null
    };
    if (this.state.textures) {
      Object.values(this.state.textures).forEach((tex) => tex && tex.delete());
    }
    if (channelData && Object.keys(channelData).length > 0 && channelData.data) {
      const { height, width, depth } = channelData;
      channelData.data.forEach((d, i) => {
        textures[`volume${i}`] = this.dataToTexture(d, width, height, depth);
      }, this);
      this.setState({
        textures,
        scaleMatrix: new Matrix4().scale(this.props.physicalSizeScalingMatrix.transformPoint([
          width,
          height,
          depth
        ]))
      });
    }
  }
  dataToTexture(data, width, height, depth) {
    var _a2, _b2;
    const attrs = getRenderingAttrs();
    const texture = new Texture3D(this.context.gl, {
      width,
      height,
      depth,
      data: (_b2 = (_a2 = attrs.cast) == null ? void 0 : _a2.call(attrs, data)) != null ? _b2 : data,
      format: attrs.dataFormat,
      dataFormat: attrs.format,
      type: attrs.type,
      mipmaps: false,
      parameters: {
        [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,
        [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,
        [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,
        [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE,
        [GL.TEXTURE_WRAP_R]: GL.CLAMP_TO_EDGE
      }
    });
    return texture;
  }
};
XR3DLayer.layerName = "XR3DLayer";
XR3DLayer.defaultProps = defaultProps$1;
function getVolume(_0) {
  return __async(this, arguments, function* ({
    source,
    selection,
    onUpdate = () => {
    },
    downsampleDepth = 1,
    signal
  }) {
    const { shape, labels, dtype } = source;
    const { height, width } = getImageSize(source);
    const depth = shape[labels.indexOf("z")];
    const depthDownsampled = Math.max(1, Math.floor(depth / downsampleDepth));
    const rasterSize = height * width;
    const name2 = `${dtype}Array`;
    const TypedArray = globalThis[name2];
    const volumeData = new TypedArray(rasterSize * depthDownsampled);
    yield Promise.all(new Array(depthDownsampled).fill(0).map((_, z) => __async(this, null, function* () {
      const depthSelection = __spreadProps(__spreadValues({}, selection), {
        z: z * downsampleDepth
      });
      const { data: rasterData } = yield source.getRaster({
        selection: depthSelection,
        signal
      });
      let r = 0;
      onUpdate();
      while (r < rasterSize) {
        const volIndex = z * rasterSize + (rasterSize - r - 1);
        const rasterIndex = (width - r - 1) % width + width * Math.floor(r / width);
        volumeData[volIndex] = rasterData[rasterIndex];
        r += 1;
      }
      onUpdate();
    })));
    return {
      data: volumeData,
      height,
      width,
      depth: depthDownsampled
    };
  });
}
var getTextLayer = (text, viewport, id) => {
  return new TextLayer({
    id: `text-${id}`,
    coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
    data: [
      {
        text,
        position: viewport.position
      }
    ],
    getColor: [220, 220, 220, 255],
    getSize: 25,
    sizeUnits: "meters",
    sizeScale: __pow(2, -viewport.zoom),
    fontFamily: "Helvetica"
  });
};
var defaultProps = {
  pickable: false,
  coordinateSystem: COORDINATE_SYSTEM2.CARTESIAN,
  contrastLimits: { type: "array", value: [], compare: true },
  channelsVisible: { type: "array", value: [], compare: true },
  colors: { type: "array", value: [], compare: true },
  colormap: { type: "string", value: "", compare: true },
  selections: { type: "array", value: [], compare: true },
  resolution: { type: "number", value: 0, compare: true },
  domain: { type: "array", value: [], compare: true },
  loader: {
    type: "object",
    value: [
      {
        getRaster: () => __async(void 0, null, function* () {
          return { data: [], height: 0, width: 0 };
        }),
        dtype: "Uint16",
        shape: [1],
        labels: ["z"]
      }
    ],
    compare: true
  },
  xSlice: { type: "array", value: null, compare: true },
  ySlice: { type: "array", value: null, compare: true },
  zSlice: { type: "array", value: null, compare: true },
  clippingPlanes: { type: "array", value: [], compare: true },
  renderingMode: {
    type: "string",
    value: RENDERING_MODES.MAX_INTENSITY_PROJECTION,
    compare: true
  },
  onUpdate: { type: "function", value: () => {
  }, compare: true },
  useProgressIndicator: { type: "boolean", value: true, compare: true },
  useWebGL1Warning: { type: "boolean", value: true, compare: true }
};
var VolumeLayer = class extends CompositeLayer {
  clearState() {
    this.setState({
      height: null,
      width: null,
      depth: null,
      data: null,
      physicalSizeScalingMatrix: null,
      resolutionMatrix: null,
      progress: 0,
      abortController: null
    });
  }
  finalizeState() {
    this.state.abortController.abort();
  }
  updateState({ oldProps, props }) {
    const loaderChanged = props.loader !== oldProps.loader;
    const resolutionChanged = props.resolution !== oldProps.resolution;
    const selectionsChanged = props.selections !== oldProps.selections;
    if (resolutionChanged) {
      this.clearState();
    }
    if (loaderChanged || selectionsChanged || resolutionChanged) {
      const {
        loader,
        selections = [],
        resolution,
        onViewportLoad
      } = this.props;
      const source = loader[resolution];
      let progress = 0;
      const totalRequests = (source.shape[source.labels.indexOf("z")] >> resolution) * selections.length;
      const onUpdate = () => {
        progress += 0.5 / totalRequests;
        if (this.props.onUpdate) {
          this.props.onUpdate({ progress });
        }
        this.setState({ progress });
      };
      const abortController = new AbortController();
      this.setState({ abortController });
      const { signal } = abortController;
      const volumePromises = selections.map((selection) => getVolume({
        selection,
        source,
        onUpdate,
        downsampleDepth: __pow(2, resolution),
        signal
      }));
      const physicalSizeScalingMatrix = getPhysicalSizeScalingMatrix(loader[resolution]);
      Promise.all(volumePromises).then((volumes) => {
        if (onViewportLoad) {
          onViewportLoad(volumes);
        }
        const volume = {
          data: volumes.map((d) => d.data),
          width: volumes[0].width,
          height: volumes[0].height,
          depth: volumes[0].depth
        };
        this.setState(__spreadProps(__spreadValues({}, volume), {
          physicalSizeScalingMatrix,
          resolutionMatrix: new Matrix4().scale(__pow(2, resolution))
        }));
      });
    }
  }
  renderLayers() {
    const {
      loader,
      id,
      resolution,
      useProgressIndicator,
      useWebGL1Warning
    } = this.props;
    const { dtype } = loader[resolution];
    const {
      data,
      width,
      height,
      depth,
      progress,
      physicalSizeScalingMatrix,
      resolutionMatrix
    } = this.state;
    const { gl } = this.context;
    if (!isWebGL2(gl) && useWebGL1Warning) {
      const { viewport } = this.context;
      return getTextLayer([
        "Volume rendering is only available on browsers that support WebGL2. If you",
        "are using Safari, you can turn on WebGL2 by navigating in the top menubar",
        "to check Develop > Experimental Features > WebGL 2.0 and then refreshing",
        "the page."
      ].join("\n"), viewport, id);
    }
    if (!(width && height) && useProgressIndicator) {
      const { viewport } = this.context;
      return getTextLayer(`Loading Volume ${String((progress || 0) * 100).slice(0, 5)}%...`, viewport, id);
    }
    return new XR3DLayer(this.props, {
      channelData: { data, width, height, depth },
      id: `XR3DLayer-${0}-${height}-${width}-${0}-${resolution}-${id}`,
      physicalSizeScalingMatrix,
      parameters: {
        [GL.CULL_FACE]: true,
        [GL.CULL_FACE_MODE]: GL.FRONT,
        [GL.DEPTH_TEST]: false,
        blendFunc: [GL.SRC_ALPHA, GL.ONE],
        blend: true
      },
      resolutionMatrix,
      dtype
    });
  }
};
VolumeLayer.layerName = "VolumeLayer";
VolumeLayer.defaultProps = defaultProps;
var VIV_PROXY_KEY = "__viv";
var OFFSETS_PROXY_KEY = `${VIV_PROXY_KEY}-offsets`;
function checkProxies(tiff) {
  if (!isProxy(tiff, OFFSETS_PROXY_KEY)) {
    console.warn("GeoTIFF source is missing offsets proxy.");
  }
}
function isProxy(tiff, proxyFlag) {
  return tiff[proxyFlag];
}
function createOffsetsProxy(tiff, offsets) {
  const get = (target, key) => {
    if (key === "getImage") {
      return (index) => {
        if (!(index in target.ifdRequests) && index in offsets) {
          const offset = offsets[index];
          target.ifdRequests[index] = target.parseFileDirectoryAt(offset);
        }
        return target.getImage(index);
      };
    }
    if (key === OFFSETS_PROXY_KEY) {
      return true;
    }
    return Reflect.get(target, key);
  };
  return new Proxy(tiff, { get });
}
var encodedJs = "";
var blob = typeof window !== "undefined" && window.Blob && new Blob([atob(encodedJs)], { type: "text/javascript;charset=utf-8" });
function WorkerWrapper() {
  const objURL = blob && (window.URL || window.webkitURL).createObjectURL(blob);
  try {
    return objURL ? new Worker(objURL) : new Worker("data:application/javascript;base64," + encodedJs, { type: "module" });
  } finally {
    objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
  }
}
var _a, _b;
var defaultPoolSize = (_b = (_a = globalThis == null ? void 0 : globalThis.navigator) == null ? void 0 : _a.hardwareConcurrency) != null ? _b : 4;
var Pool = class {
  constructor(size = defaultPoolSize) {
    __publicField(this, "workers");
    __publicField(this, "idleWorkers");
    __publicField(this, "waitQueue");
    __publicField(this, "decoder");
    this.workers = [];
    this.idleWorkers = [];
    this.waitQueue = [];
    this.decoder = null;
    for (let i = 0; i < size; ++i) {
      const w = new WorkerWrapper();
      this.workers.push(w);
      this.idleWorkers.push(w);
    }
  }
  decode(fileDirectory, buffer) {
    return __async(this, null, function* () {
      const currentWorker = yield this.waitForWorker();
      return new Promise((resolve, reject) => {
        currentWorker.onmessage = (event) => {
          this.finishTask(currentWorker);
          resolve(event.data);
        };
        currentWorker.onerror = (error) => {
          this.finishTask(currentWorker);
          reject(error);
        };
        currentWorker.postMessage(["decode", fileDirectory, buffer], [buffer]);
      });
    });
  }
  waitForWorker() {
    return __async(this, null, function* () {
      const idleWorker = this.idleWorkers.pop();
      if (idleWorker) {
        return idleWorker;
      }
      const waiter = {};
      const promise = new Promise((resolve) => {
        waiter.resolve = resolve;
      });
      this.waitQueue.push(waiter);
      return promise;
    });
  }
  finishTask(currentWorker) {
    return __async(this, null, function* () {
      const waiter = this.waitQueue.pop();
      if (waiter) {
        waiter.resolve(currentWorker);
      } else {
        this.idleWorkers.push(currentWorker);
      }
    });
  }
  destroy() {
    for (let i = 0; i < this.workers.length; ++i) {
      this.workers[i].terminate();
    }
  }
};
var PARSER_OPTIONS = {
  attributeNamePrefix: "",
  attrNodeName: "attr",
  parseNodeValue: true,
  parseAttributeValue: true,
  ignoreAttributes: false
};
var parse = (str) => parser.parse(str, PARSER_OPTIONS);
function fromString(str) {
  const res = parse(str);
  if (!res.OME) {
    throw Error("Failed to parse OME-XML metadata.");
  }
  return ensureArray(res.OME.Image).map((img) => {
    const Channels = ensureArray(img.Pixels.Channel).map((c) => {
      if ("Color" in c.attr) {
        return __spreadProps(__spreadValues({}, c.attr), { Color: intToRgba(c.attr.Color) });
      }
      return __spreadValues({}, c.attr);
    });
    const { AquisitionDate = "", Description: Description2 = "" } = img;
    const image = __spreadProps(__spreadValues({}, img.attr), {
      AquisitionDate,
      Description: Description2,
      Pixels: __spreadProps(__spreadValues({}, img.Pixels.attr), {
        Channels
      })
    });
    return __spreadProps(__spreadValues({}, image), {
      format() {
        const { Pixels } = image;
        const sizes = ["X", "Y", "Z"].map((name2) => {
          const size = Pixels[`PhysicalSize${name2}`];
          const unit2 = Pixels[`PhysicalSize${name2}Unit`];
          return size && unit2 ? `${size} ${unit2}` : "-";
        }).join(" x ");
        return {
          "Acquisition Date": image.AquisitionDate,
          "Dimensions (XY)": `${Pixels.SizeX} x ${Pixels.SizeY}`,
          "Pixels Type": Pixels.Type,
          "Pixels Size (XYZ)": sizes,
          "Z-sections/Timepoints": `${Pixels.SizeZ} x ${Pixels.SizeT}`,
          Channels: Pixels.SizeC
        };
      }
    });
  });
}
var TiffPixelSource = class {
  constructor(indexer, dtype, tileSize, shape, labels, meta, pool) {
    __publicField(this, "_indexer");
    this.dtype = dtype;
    this.tileSize = tileSize;
    this.shape = shape;
    this.labels = labels;
    this.meta = meta;
    this.pool = pool;
    this._indexer = indexer;
  }
  getRaster(_0) {
    return __async(this, arguments, function* ({ selection, signal }) {
      const image = yield this._indexer(selection);
      return this._readRasters(image, { signal });
    });
  }
  getTile(_0) {
    return __async(this, arguments, function* ({ x, y, selection, signal }) {
      const { height, width } = this._getTileExtent(x, y);
      const x0 = x * this.tileSize;
      const y0 = y * this.tileSize;
      const window2 = [x0, y0, x0 + width, y0 + height];
      const image = yield this._indexer(selection);
      return this._readRasters(image, { window: window2, width, height, signal });
    });
  }
  _readRasters(image, props) {
    return __async(this, null, function* () {
      var _a2;
      const interleave = isInterleaved(this.shape);
      const raster = yield image.readRasters(__spreadProps(__spreadValues({
        interleave
      }, props), {
        pool: this.pool
      }));
      if ((_a2 = props == null ? void 0 : props.signal) == null ? void 0 : _a2.aborted) {
        throw SIGNAL_ABORTED;
      }
      const data = interleave ? raster : raster[0];
      return {
        data,
        width: raster.width,
        height: raster.height
      };
    });
  }
  _getTileExtent(x, y) {
    const { height: zoomLevelHeight, width: zoomLevelWidth } = getImageSize(this);
    let height = this.tileSize;
    let width = this.tileSize;
    const maxXTileCoord = Math.floor(zoomLevelWidth / this.tileSize);
    const maxYTileCoord = Math.floor(zoomLevelHeight / this.tileSize);
    if (x === maxXTileCoord) {
      width = zoomLevelWidth % this.tileSize;
    }
    if (y === maxYTileCoord) {
      height = zoomLevelHeight % this.tileSize;
    }
    return { height, width };
  }
  onTileError(err) {
    console.error(err);
  }
};
function getOmeLegacyIndexer(tiff, rootMeta) {
  const imgMeta = rootMeta[0];
  const { SizeT, SizeC, SizeZ } = imgMeta.Pixels;
  const ifdIndexer = getOmeIFDIndexer(imgMeta);
  return (sel, pyramidLevel) => {
    const index = ifdIndexer(sel);
    const pyramidIndex = pyramidLevel * SizeZ * SizeT * SizeC;
    return tiff.getImage(index + pyramidIndex);
  };
}
function getOmeSubIFDIndexer(tiff, rootMeta) {
  const imgMeta = rootMeta[0];
  const ifdIndexer = getOmeIFDIndexer(imgMeta);
  const ifdCache = new Map();
  return (sel, pyramidLevel) => __async(this, null, function* () {
    const index = ifdIndexer(sel);
    const baseImage = yield tiff.getImage(index);
    if (pyramidLevel === 0) {
      return baseImage;
    }
    const { SubIFDs } = baseImage.fileDirectory;
    if (!SubIFDs) {
      throw Error("Indexing Error: OME-TIFF is missing SubIFDs.");
    }
    const key = `${sel.t}-${sel.c}-${sel.z}-${pyramidLevel}`;
    if (!ifdCache.has(key)) {
      const subIfdOffset = SubIFDs[pyramidLevel - 1];
      ifdCache.set(key, tiff.parseFileDirectoryAt(subIfdOffset));
    }
    const ifd = yield ifdCache.get(key);
    return new baseImage.constructor(ifd.fileDirectory, ifd.geoKeyDirectory, tiff.dataView, tiff.littleEndian, tiff.cache, tiff.source);
  });
}
function getOmeIFDIndexer(imgMeta) {
  const { SizeC, SizeZ, SizeT, DimensionOrder } = imgMeta.Pixels;
  switch (DimensionOrder) {
    case "XYZCT": {
      return ({ t, c, z }) => t * SizeZ * SizeC + c * SizeZ + z;
    }
    case "XYZTC": {
      return ({ t, c, z }) => c * SizeZ * SizeT + t * SizeZ + z;
    }
    case "XYCTZ": {
      return ({ t, c, z }) => z * SizeC * SizeT + t * SizeC + c;
    }
    case "XYCZT": {
      return ({ t, c, z }) => t * SizeC * SizeZ + z * SizeC + c;
    }
    case "XYTCZ": {
      return ({ t, c, z }) => z * SizeT * SizeC + c * SizeT + t;
    }
    case "XYTZC": {
      return ({ t, c, z }) => c * SizeT * SizeZ + z * SizeT + t;
    }
    default: {
      throw new Error(`Invalid OME-XML DimensionOrder, got ${DimensionOrder}.`);
    }
  }
}
var DTYPE_LOOKUP$1 = {
  uint8: "Uint8",
  uint16: "Uint16",
  uint32: "Uint32",
  float: "Float32",
  double: "Float64",
  int8: "Int8",
  int16: "Int16",
  int32: "Int32"
};
function getOmePixelSourceMeta({ Pixels }) {
  const labels = getLabels(Pixels.DimensionOrder);
  const dims = getDims(labels);
  const shape = Array(labels.length).fill(0);
  shape[dims("t")] = Pixels.SizeT;
  shape[dims("c")] = Pixels.SizeC;
  shape[dims("z")] = Pixels.SizeZ;
  if (Pixels.Interleaved) {
    labels.push("_c");
    shape.push(3);
  }
  const getShape = (level) => {
    const s = [...shape];
    s[dims("x")] = Pixels.SizeX >> level;
    s[dims("y")] = Pixels.SizeY >> level;
    return s;
  };
  if (!(Pixels.Type in DTYPE_LOOKUP$1)) {
    throw Error(`Pixel type ${Pixels.Type} not supported.`);
  }
  const dtype = DTYPE_LOOKUP$1[Pixels.Type];
  if (Pixels.PhysicalSizeX && Pixels.PhysicalSizeY) {
    const physicalSizes = {
      x: {
        size: Pixels.PhysicalSizeX,
        unit: Pixels.PhysicalSizeXUnit
      },
      y: {
        size: Pixels.PhysicalSizeY,
        unit: Pixels.PhysicalSizeYUnit
      }
    };
    if (Pixels.PhysicalSizeZ) {
      physicalSizes.z = {
        size: Pixels.PhysicalSizeZ,
        unit: Pixels.PhysicalSizeZUnit
      };
    }
    return { labels, getShape, physicalSizes, dtype };
  }
  return { labels, getShape, dtype };
}
function guessTileSize$1(image) {
  const tileWidth = image.getTileWidth();
  const tileHeight = image.getTileHeight();
  const size = Math.min(tileWidth, tileHeight);
  return prevPowerOf2(size);
}
function load$2(tiff, pool) {
  return __async(this, null, function* () {
    const firstImage = yield tiff.getImage(0);
    const {
      ImageDescription,
      SubIFDs,
      PhotometricInterpretation: photometricInterpretation
    } = firstImage.fileDirectory;
    const omexml = fromString(ImageDescription);
    let levels;
    let pyramidIndexer;
    if (SubIFDs) {
      levels = SubIFDs.length + 1;
      pyramidIndexer = getOmeSubIFDIndexer(tiff, omexml);
    } else {
      levels = omexml.length;
      pyramidIndexer = getOmeLegacyIndexer(tiff, omexml);
    }
    const imgMeta = omexml[0];
    const { labels, getShape, physicalSizes, dtype } = getOmePixelSourceMeta(imgMeta);
    const tileSize = guessTileSize$1(firstImage);
    const meta = { photometricInterpretation, physicalSizes };
    const data = Array.from({ length: levels }).map((_, resolution) => {
      const shape = getShape(resolution);
      const indexer = (sel) => pyramidIndexer(sel, resolution);
      const source = new TiffPixelSource(indexer, dtype, tileSize, shape, labels, meta, pool);
      return source;
    });
    return {
      data,
      metadata: imgMeta
    };
  });
}
function loadOmeTiff(_0) {
  return __async(this, arguments, function* (source, opts = {}) {
    const { headers, offsets, pool = true } = opts;
    let tiff;
    if (typeof source === "string") {
      tiff = yield fromUrl(source, __spreadProps(__spreadValues({}, headers), { cacheSize: Infinity }));
    } else {
      tiff = yield fromBlob(source);
    }
    if (offsets) {
      tiff = createOffsetsProxy(tiff, offsets);
    }
    checkProxies(tiff);
    return pool ? load$2(tiff, new Pool()) : load$2(tiff);
  });
}
function loadMultiscales(store, path = "") {
  return __async(this, null, function* () {
    const grp = yield openGroup(store, path);
    const rootAttrs = yield grp.attrs.asObject();
    let paths = ["0"];
    if ("multiscales" in rootAttrs) {
      const { datasets } = rootAttrs.multiscales[0];
      paths = datasets.map((d) => d.path);
    }
    const data = paths.map((path2) => grp.getItem(path2));
    return {
      data: yield Promise.all(data),
      rootAttrs
    };
  });
}
function guessTileSize(arr) {
  const interleaved = isInterleaved(arr.shape);
  const [yChunk, xChunk] = arr.chunks.slice(interleaved ? -3 : -2);
  const size = Math.min(yChunk, xChunk);
  return prevPowerOf2(size);
}
function getIndexer(labels) {
  const size = labels.length;
  const dims = getDims(labels);
  return (sel) => {
    if (Array.isArray(sel)) {
      return [...sel];
    }
    const selection = Array(size).fill(0);
    for (const [key, value] of Object.entries(sel)) {
      selection[dims(key)] = value;
    }
    return selection;
  };
}
var DTYPE_LOOKUP = {
  u1: "Uint8",
  u2: "Uint16",
  u4: "Uint32",
  f4: "Float32",
  f8: "Float64",
  i1: "Int8",
  i2: "Int16",
  i4: "Int32"
};
var ZarrPixelSource = class {
  constructor(data, labels, tileSize) {
    __publicField(this, "_data");
    __publicField(this, "_indexer");
    __publicField(this, "_readChunks");
    this.labels = labels;
    this.tileSize = tileSize;
    this._indexer = getIndexer(labels);
    this._data = data;
    const xChunkSize = data.chunks[this._xIndex];
    const yChunkSize = data.chunks[this._xIndex - 1];
    this._readChunks = tileSize === xChunkSize && tileSize === yChunkSize;
  }
  get shape() {
    return this._data.shape;
  }
  get dtype() {
    const suffix = this._data.dtype.slice(1);
    if (!(suffix in DTYPE_LOOKUP)) {
      throw Error(`Zarr dtype not supported, got ${suffix}.`);
    }
    return DTYPE_LOOKUP[suffix];
  }
  get _xIndex() {
    const interleave = isInterleaved(this._data.shape);
    return this._data.shape.length - (interleave ? 2 : 1);
  }
  _chunkIndex(selection, x, y) {
    const sel = this._indexer(selection);
    sel[this._xIndex] = x;
    sel[this._xIndex - 1] = y;
    return sel;
  }
  _getSlices(x, y) {
    const { height, width } = getImageSize(this);
    const [xStart, xStop] = [
      x * this.tileSize,
      Math.min((x + 1) * this.tileSize, width)
    ];
    const [yStart, yStop] = [
      y * this.tileSize,
      Math.min((y + 1) * this.tileSize, height)
    ];
    if (xStart === xStop || yStart === yStop) {
      throw new BoundsCheckError("Tile slice is zero-sized.");
    }
    return [slice(xStart, xStop), slice(yStart, yStop)];
  }
  getRaster(_0) {
    return __async(this, arguments, function* ({ selection }) {
      const sel = this._chunkIndex(selection, null, null);
      const { data, shape } = yield this._data.getRaw(sel);
      const [height, width] = shape;
      return { data, width, height };
    });
  }
  getTile(props) {
    return __async(this, null, function* () {
      const { x, y, selection, signal } = props;
      let res;
      if (this._readChunks) {
        const sel = this._chunkIndex(selection, x, y);
        res = yield this._data.getRawChunk(sel, { storeOptions: { signal } });
      } else {
        const [xSlice, ySlice] = this._getSlices(x, y);
        const sel = this._chunkIndex(selection, xSlice, ySlice);
        res = yield this._data.getRaw(sel);
      }
      const {
        data,
        shape: [height, width]
      } = res;
      return { data, width, height };
    });
  }
  onTileError(err) {
    if (!(err instanceof BoundsCheckError)) {
      throw err;
    }
  }
};
function load(store) {
  return __async(this, null, function* () {
    const { data, rootAttrs } = yield loadMultiscales(store);
    const labels = ["t", "c", "z", "y", "x"];
    const tileSize = guessTileSize(data[0]);
    const pyramid = data.map((arr) => new ZarrPixelSource(arr, labels, tileSize));
    return {
      data: pyramid,
      metadata: rootAttrs
    };
  });
}
function loadOmeZarr(_0) {
  return __async(this, arguments, function* (source, options = {}) {
    const store = new HTTPStore(source, options);
    if ((options == null ? void 0 : options.type) !== "multiscales") {
      throw Error("Only multiscale OME-Zarr is supported.");
    }
    return load(store);
  });
}

// src/components/spatial/constants.js
var GLOBAL_LABELS = ["z", "t"];
var DEFAULT_RASTER_DOMAIN_TYPE = "Min/Max";
var DEFAULT_RASTER_LAYER_PROPS = {
  visible: true,
  colormap: null,
  opacity: 1,
  domainType: DEFAULT_RASTER_DOMAIN_TYPE,
  transparentColor: [0, 0, 0],
  renderingMode: RENDERING_MODES.ADDITIVE,
  use3d: false
};
var DEFAULT_MOLECULES_LAYER = {
  opacity: 1,
  radius: 20,
  visible: true
};
var DEFAULT_CELLS_LAYER = {
  opacity: 1,
  radius: 50,
  visible: true,
  stroked: false
};
var DEFAULT_NEIGHBORHOODS_LAYER = {
  visible: false
};

// src/app/state/coordination.js
var COORDINATION_TYPES = {
  DATASET: "dataset",
  EMBEDDING_TYPE: "embeddingType",
  EMBEDDING_ZOOM: "embeddingZoom",
  EMBEDDING_ROTATION: "embeddingRotation",
  EMBEDDING_TARGET_X: "embeddingTargetX",
  EMBEDDING_TARGET_Y: "embeddingTargetY",
  EMBEDDING_TARGET_Z: "embeddingTargetZ",
  EMBEDDING_CELL_SET_POLYGONS_VISIBLE: "embeddingCellSetPolygonsVisible",
  EMBEDDING_CELL_SET_LABELS_VISIBLE: "embeddingCellSetLabelsVisible",
  EMBEDDING_CELL_SET_LABEL_SIZE: "embeddingCellSetLabelSize",
  EMBEDDING_CELL_RADIUS: "embeddingCellRadius",
  EMBEDDING_CELL_OPACITY: "embeddingCellOpacity",
  EMBEDDING_CELL_RADIUS_MODE: "embeddingCellRadiusMode",
  EMBEDDING_CELL_OPACITY_MODE: "embeddingCellOpacityMode",
  SPATIAL_ZOOM: "spatialZoom",
  SPATIAL_ROTATION: "spatialRotation",
  SPATIAL_TARGET_X: "spatialTargetX",
  SPATIAL_TARGET_Y: "spatialTargetY",
  SPATIAL_TARGET_Z: "spatialTargetZ",
  SPATIAL_ROTATION_X: "spatialRotationX",
  SPATIAL_ROTATION_Y: "spatialRotationY",
  SPATIAL_ROTATION_Z: "spatialRotationZ",
  SPATIAL_ROTATION_ORBIT: "spatialRotationOrbit",
  SPATIAL_ORBIT_AXIS: "spatialOrbitAxis",
  SPATIAL_AXIS_FIXED: "spatialAxisFixed",
  HEATMAP_ZOOM_X: "heatmapZoomX",
  HEATMAP_ZOOM_Y: "heatmapZoomY",
  HEATMAP_TARGET_X: "heatmapTargetX",
  HEATMAP_TARGET_Y: "heatmapTargetY",
  CELL_FILTER: "cellFilter",
  CELL_HIGHLIGHT: "cellHighlight",
  CELL_SET_SELECTION: "cellSetSelection",
  CELL_SET_HIGHLIGHT: "cellSetHighlight",
  CELL_SET_COLOR: "cellSetColor",
  GENE_FILTER: "geneFilter",
  GENE_HIGHLIGHT: "geneHighlight",
  GENE_SELECTION: "geneSelection",
  GENE_EXPRESSION_COLORMAP: "geneExpressionColormap",
  GENE_EXPRESSION_TRANSFORM: "geneExpressionTransform",
  GENE_EXPRESSION_COLORMAP_RANGE: "geneExpressionColormapRange",
  CELL_COLOR_ENCODING: "cellColorEncoding",
  SPATIAL_RASTER_LAYERS: "spatialRasterLayers",
  SPATIAL_CELLS_LAYER: "spatialCellsLayer",
  SPATIAL_MOLECULES_LAYER: "spatialMoleculesLayer",
  SPATIAL_NEIGHBORHOODS_LAYER: "spatialNeighborhoodsLayer",
  GENOMIC_ZOOM_X: "genomicZoomX",
  GENOMIC_ZOOM_Y: "genomicZoomY",
  GENOMIC_TARGET_X: "genomicTargetX",
  GENOMIC_TARGET_Y: "genomicTargetY",
  ADDITIONAL_CELL_SETS: "additionalCellSets",
  MOLECULE_HIGHLIGHT: "moleculeHighlight"
};
var DEFAULT_COORDINATION_VALUES = {
  [COORDINATION_TYPES.EMBEDDING_ZOOM]: null,
  [COORDINATION_TYPES.EMBEDDING_ROTATION]: 0,
  [COORDINATION_TYPES.EMBEDDING_TARGET_X]: null,
  [COORDINATION_TYPES.EMBEDDING_TARGET_Y]: null,
  [COORDINATION_TYPES.EMBEDDING_TARGET_Z]: 0,
  [COORDINATION_TYPES.EMBEDDING_CELL_SET_POLYGONS_VISIBLE]: false,
  [COORDINATION_TYPES.EMBEDDING_CELL_SET_LABELS_VISIBLE]: false,
  [COORDINATION_TYPES.EMBEDDING_CELL_SET_LABEL_SIZE]: 14,
  [COORDINATION_TYPES.EMBEDDING_CELL_RADIUS]: 1,
  [COORDINATION_TYPES.EMBEDDING_CELL_RADIUS_MODE]: "auto",
  [COORDINATION_TYPES.EMBEDDING_CELL_OPACITY]: 1,
  [COORDINATION_TYPES.EMBEDDING_CELL_OPACITY_MODE]: "auto",
  [COORDINATION_TYPES.SPATIAL_ZOOM]: null,
  [COORDINATION_TYPES.SPATIAL_ROTATION]: 0,
  [COORDINATION_TYPES.SPATIAL_TARGET_X]: null,
  [COORDINATION_TYPES.SPATIAL_TARGET_Y]: null,
  [COORDINATION_TYPES.SPATIAL_TARGET_Z]: null,
  [COORDINATION_TYPES.SPATIAL_ROTATION_X]: null,
  [COORDINATION_TYPES.SPATIAL_ROTATION_Y]: null,
  [COORDINATION_TYPES.SPATIAL_ROTATION_Z]: null,
  [COORDINATION_TYPES.SPATIAL_AXIS_FIXED]: false,
  [COORDINATION_TYPES.SPATIAL_ROTATION_ORBIT]: 0,
  [COORDINATION_TYPES.SPATIAL_ORBIT_AXIS]: "Y",
  [COORDINATION_TYPES.SPATIAL_RASTER_LAYERS]: null,
  [COORDINATION_TYPES.SPATIAL_CELLS_LAYER]: null,
  [COORDINATION_TYPES.SPATIAL_MOLECULES_LAYER]: null,
  [COORDINATION_TYPES.SPATIAL_NEIGHBORHOODS_LAYER]: null,
  [COORDINATION_TYPES.HEATMAP_ZOOM_X]: 0,
  [COORDINATION_TYPES.HEATMAP_ZOOM_Y]: 0,
  [COORDINATION_TYPES.HEATMAP_TARGET_X]: 0,
  [COORDINATION_TYPES.HEATMAP_TARGET_Y]: 0,
  [COORDINATION_TYPES.GENE_EXPRESSION_COLORMAP]: "plasma",
  [COORDINATION_TYPES.GENE_EXPRESSION_COLORMAP_RANGE]: [0, 1],
  [COORDINATION_TYPES.GENE_EXPRESSION_TRANSFORM]: null,
  [COORDINATION_TYPES.GENE_FILTER]: null,
  [COORDINATION_TYPES.GENE_HIGHLIGHT]: null,
  [COORDINATION_TYPES.GENE_SELECTION]: null,
  [COORDINATION_TYPES.CELL_FILTER]: null,
  [COORDINATION_TYPES.CELL_HIGHLIGHT]: null,
  [COORDINATION_TYPES.CELL_SET_SELECTION]: null,
  [COORDINATION_TYPES.CELL_SET_HIGHLIGHT]: null,
  [COORDINATION_TYPES.CELL_SET_COLOR]: null,
  [COORDINATION_TYPES.CELL_COLOR_ENCODING]: "cellSetSelection",
  [COORDINATION_TYPES.GENOMIC_ZOOM_X]: 0,
  [COORDINATION_TYPES.GENOMIC_ZOOM_Y]: 0,
  [COORDINATION_TYPES.GENOMIC_TARGET_X]: 15499999995e-1,
  [COORDINATION_TYPES.GENOMIC_TARGET_Y]: 15499999995e-1,
  [COORDINATION_TYPES.ADDITIONAL_CELL_SETS]: null,
  [COORDINATION_TYPES.MOLECULE_HIGHLIGHT]: null
};
var AUTO_INDEPENDENT_COORDINATION_TYPES = [
  COORDINATION_TYPES.HEATMAP_ZOOM_X,
  COORDINATION_TYPES.HEATMAP_ZOOM_Y,
  COORDINATION_TYPES.HEATMAP_TARGET_X,
  COORDINATION_TYPES.HEATMAP_TARGET_Y,
  COORDINATION_TYPES.EMBEDDING_ZOOM,
  COORDINATION_TYPES.EMBEDDING_TARGET_X,
  COORDINATION_TYPES.EMBEDDING_TARGET_Y,
  COORDINATION_TYPES.EMBEDDING_TARGET_Z,
  COORDINATION_TYPES.EMBEDDING_CELL_SET_POLYGONS_VISIBLE,
  COORDINATION_TYPES.EMBEDDING_CELL_SET_LABELS_VISIBLE,
  COORDINATION_TYPES.EMBEDDING_CELL_SET_LABEL_SIZE,
  COORDINATION_TYPES.EMBEDDING_CELL_RADIUS,
  COORDINATION_TYPES.EMBEDDING_CELL_OPACITY
];
var COMPONENT_COORDINATION_TYPES = {
  scatterplot: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.EMBEDDING_TYPE,
    COORDINATION_TYPES.EMBEDDING_ZOOM,
    COORDINATION_TYPES.EMBEDDING_ROTATION,
    COORDINATION_TYPES.EMBEDDING_TARGET_X,
    COORDINATION_TYPES.EMBEDDING_TARGET_Y,
    COORDINATION_TYPES.EMBEDDING_TARGET_Z,
    COORDINATION_TYPES.EMBEDDING_CELL_SET_POLYGONS_VISIBLE,
    COORDINATION_TYPES.EMBEDDING_CELL_SET_LABELS_VISIBLE,
    COORDINATION_TYPES.EMBEDDING_CELL_SET_LABEL_SIZE,
    COORDINATION_TYPES.EMBEDDING_CELL_RADIUS,
    COORDINATION_TYPES.EMBEDDING_CELL_RADIUS_MODE,
    COORDINATION_TYPES.EMBEDDING_CELL_OPACITY,
    COORDINATION_TYPES.EMBEDDING_CELL_OPACITY_MODE,
    COORDINATION_TYPES.CELL_FILTER,
    COORDINATION_TYPES.CELL_HIGHLIGHT,
    COORDINATION_TYPES.CELL_SET_SELECTION,
    COORDINATION_TYPES.CELL_SET_HIGHLIGHT,
    COORDINATION_TYPES.CELL_SET_COLOR,
    COORDINATION_TYPES.GENE_HIGHLIGHT,
    COORDINATION_TYPES.GENE_SELECTION,
    COORDINATION_TYPES.GENE_EXPRESSION_COLORMAP,
    COORDINATION_TYPES.GENE_EXPRESSION_COLORMAP_RANGE,
    COORDINATION_TYPES.CELL_COLOR_ENCODING,
    COORDINATION_TYPES.ADDITIONAL_CELL_SETS
  ],
  spatial: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.SPATIAL_ZOOM,
    COORDINATION_TYPES.SPATIAL_ROTATION,
    COORDINATION_TYPES.SPATIAL_RASTER_LAYERS,
    COORDINATION_TYPES.SPATIAL_CELLS_LAYER,
    COORDINATION_TYPES.SPATIAL_MOLECULES_LAYER,
    COORDINATION_TYPES.SPATIAL_NEIGHBORHOODS_LAYER,
    COORDINATION_TYPES.SPATIAL_TARGET_X,
    COORDINATION_TYPES.SPATIAL_TARGET_Y,
    COORDINATION_TYPES.SPATIAL_TARGET_Z,
    COORDINATION_TYPES.SPATIAL_ROTATION_X,
    COORDINATION_TYPES.SPATIAL_ROTATION_Y,
    COORDINATION_TYPES.SPATIAL_ROTATION_Z,
    COORDINATION_TYPES.SPATIAL_ROTATION_ORBIT,
    COORDINATION_TYPES.SPATIAL_ORBIT_AXIS,
    COORDINATION_TYPES.SPATIAL_AXIS_FIXED,
    COORDINATION_TYPES.CELL_FILTER,
    COORDINATION_TYPES.CELL_HIGHLIGHT,
    COORDINATION_TYPES.CELL_SET_SELECTION,
    COORDINATION_TYPES.CELL_SET_HIGHLIGHT,
    COORDINATION_TYPES.CELL_SET_COLOR,
    COORDINATION_TYPES.GENE_HIGHLIGHT,
    COORDINATION_TYPES.GENE_SELECTION,
    COORDINATION_TYPES.GENE_EXPRESSION_COLORMAP,
    COORDINATION_TYPES.GENE_EXPRESSION_COLORMAP_RANGE,
    COORDINATION_TYPES.CELL_COLOR_ENCODING,
    COORDINATION_TYPES.ADDITIONAL_CELL_SETS,
    COORDINATION_TYPES.MOLECULE_HIGHLIGHT
  ],
  heatmap: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.HEATMAP_ZOOM_X,
    COORDINATION_TYPES.HEATMAP_ZOOM_Y,
    COORDINATION_TYPES.HEATMAP_TARGET_X,
    COORDINATION_TYPES.HEATMAP_TARGET_Y,
    COORDINATION_TYPES.CELL_FILTER,
    COORDINATION_TYPES.CELL_HIGHLIGHT,
    COORDINATION_TYPES.CELL_SET_SELECTION,
    COORDINATION_TYPES.CELL_SET_HIGHLIGHT,
    COORDINATION_TYPES.CELL_SET_COLOR,
    COORDINATION_TYPES.GENE_FILTER,
    COORDINATION_TYPES.GENE_HIGHLIGHT,
    COORDINATION_TYPES.GENE_SELECTION,
    COORDINATION_TYPES.GENE_EXPRESSION_COLORMAP,
    COORDINATION_TYPES.GENE_EXPRESSION_COLORMAP_RANGE,
    COORDINATION_TYPES.CELL_COLOR_ENCODING,
    COORDINATION_TYPES.ADDITIONAL_CELL_SETS
  ],
  cellSets: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.CELL_SET_SELECTION,
    COORDINATION_TYPES.CELL_SET_HIGHLIGHT,
    COORDINATION_TYPES.CELL_SET_COLOR,
    COORDINATION_TYPES.CELL_COLOR_ENCODING,
    COORDINATION_TYPES.ADDITIONAL_CELL_SETS
  ],
  cellSetSizes: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.CELL_SET_SELECTION,
    COORDINATION_TYPES.CELL_SET_HIGHLIGHT,
    COORDINATION_TYPES.CELL_SET_COLOR,
    COORDINATION_TYPES.ADDITIONAL_CELL_SETS
  ],
  cellSetExpression: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.GENE_SELECTION,
    COORDINATION_TYPES.GENE_EXPRESSION_TRANSFORM,
    COORDINATION_TYPES.CELL_SET_SELECTION,
    COORDINATION_TYPES.CELL_SET_HIGHLIGHT,
    COORDINATION_TYPES.CELL_SET_COLOR,
    COORDINATION_TYPES.ADDITIONAL_CELL_SETS
  ],
  status: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.CELL_HIGHLIGHT,
    COORDINATION_TYPES.GENE_HIGHLIGHT,
    COORDINATION_TYPES.CELL_SET_HIGHLIGHT,
    COORDINATION_TYPES.MOLECULE_HIGHLIGHT
  ],
  genes: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.GENE_FILTER,
    COORDINATION_TYPES.GENE_HIGHLIGHT,
    COORDINATION_TYPES.GENE_SELECTION,
    COORDINATION_TYPES.CELL_COLOR_ENCODING
  ],
  expressionHistogram: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.GENE_SELECTION
  ],
  layerController: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.SPATIAL_RASTER_LAYERS,
    COORDINATION_TYPES.SPATIAL_CELLS_LAYER,
    COORDINATION_TYPES.SPATIAL_MOLECULES_LAYER,
    COORDINATION_TYPES.SPATIAL_NEIGHBORHOODS_LAYER,
    COORDINATION_TYPES.SPATIAL_ZOOM,
    COORDINATION_TYPES.SPATIAL_TARGET_X,
    COORDINATION_TYPES.SPATIAL_TARGET_Y,
    COORDINATION_TYPES.SPATIAL_TARGET_Z,
    COORDINATION_TYPES.SPATIAL_ROTATION_X,
    COORDINATION_TYPES.SPATIAL_ROTATION_Y,
    COORDINATION_TYPES.SPATIAL_ROTATION_Z,
    COORDINATION_TYPES.SPATIAL_ROTATION_ORBIT,
    COORDINATION_TYPES.SPATIAL_ORBIT_AXIS
  ],
  higlass: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.GENOMIC_ZOOM_X,
    COORDINATION_TYPES.GENOMIC_ZOOM_Y,
    COORDINATION_TYPES.GENOMIC_TARGET_X,
    COORDINATION_TYPES.GENOMIC_TARGET_Y,
    COORDINATION_TYPES.GENE_FILTER,
    COORDINATION_TYPES.GENE_HIGHLIGHT,
    COORDINATION_TYPES.GENE_SELECTION
  ],
  genomicProfiles: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.GENOMIC_ZOOM_X,
    COORDINATION_TYPES.GENOMIC_ZOOM_Y,
    COORDINATION_TYPES.GENOMIC_TARGET_X,
    COORDINATION_TYPES.GENOMIC_TARGET_Y,
    COORDINATION_TYPES.GENE_FILTER,
    COORDINATION_TYPES.GENE_HIGHLIGHT,
    COORDINATION_TYPES.GENE_SELECTION,
    COORDINATION_TYPES.CELL_SET_SELECTION,
    COORDINATION_TYPES.CELL_SET_HIGHLIGHT,
    COORDINATION_TYPES.CELL_SET_COLOR,
    COORDINATION_TYPES.ADDITIONAL_CELL_SETS
  ],
  description: [
    COORDINATION_TYPES.DATASET,
    COORDINATION_TYPES.SPATIAL_RASTER_LAYERS
  ]
};

// src/components/data-hooks.js
function warn(error, setWarning) {
  setWarning(error.message);
  console.warn(error.message);
  if (error instanceof AbstractLoaderError) {
    error.warnInConsole();
  }
}
function initCoordinationSpace(values, setters, initialValues) {
  if (!values || !setters) {
    return;
  }
  Object.entries(values).forEach(([coordinationType, value]) => {
    const setterName = `set${capitalize(coordinationType)}`;
    const setterFunc = setters[setterName];
    const initialValue = initialValues && initialValues[coordinationType];
    const shouldInit = equal2(initialValue, DEFAULT_COORDINATION_VALUES[coordinationType]);
    if (shouldInit && setterFunc) {
      setterFunc(value);
    }
  });
}
function useDescription(loaders, dataset) {
  const [description2, setDescription] = useState4();
  useEffect2(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].description) {
      setDescription(loaders[dataset].description);
    } else {
      setDescription(null);
    }
  }, [loaders, dataset]);
  return [description2];
}
function useCellsData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [cells, setCells] = useState4({});
  const [cellsCount, setCellsCount] = useState4(0);
  const setWarning = useSetWarning();
  useEffect2(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders.cells) {
      loaders[dataset].loaders.cells.load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        setCells(data);
        setCellsCount(Object.keys(data).length);
        addUrl(url, "Cells");
        const coordinationValuesOrDefault = __spreadValues({
          spatialCellsLayer: DEFAULT_CELLS_LAYER
        }, coordinationValues);
        initCoordinationSpace(coordinationValuesOrDefault, coordinationSetters, initialCoordinationValues);
        setItemIsReady("cells");
      });
    } else {
      setCells({});
      setCellsCount(0);
      if (isRequired) {
        warn(new props(dataset, "cells", null, null), setWarning);
      } else {
        setItemIsReady("cells");
      }
    }
  }, [loaders, dataset]);
  return [cells, cellsCount];
}
function useCellSetsData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [cellSets, setCellSets] = useState4();
  const setWarning = useSetWarning();
  useEffect2(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders["cell-sets"]) {
      loaders[dataset].loaders["cell-sets"].load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        setCellSets(data);
        addUrl(url, "Cell Sets");
        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);
        setItemIsReady("cell-sets");
      });
    } else {
      setCellSets(null);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "cell-sets", null, null), setWarning);
      } else {
        setItemIsReady("cell-sets");
      }
    }
  }, [loaders, dataset]);
  return [cellSets];
}
function useExpressionMatrixData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [expressionMatrix, setExpressionMatrix] = useState4();
  const setWarning = useSetWarning();
  useEffect2(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders["expression-matrix"]) {
      loaders[dataset].loaders["expression-matrix"].load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        const [attrs, arr] = data;
        setExpressionMatrix({
          cols: attrs.cols,
          rows: attrs.rows,
          matrix: arr.data
        });
        addUrl(url, "Expression Matrix");
        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);
        setItemIsReady("expression-matrix");
      });
    } else {
      setExpressionMatrix(null);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "expression-matrix", null, null), setWarning);
      } else {
        setItemIsReady("expression-matrix");
      }
    }
  }, [loaders, dataset]);
  return [expressionMatrix];
}
function useGeneSelection(loaders, dataset, setItemIsReady, isRequired, selection, setItemIsNotReady) {
  const [geneData, setGeneData] = useState4();
  const setWarning = useSetWarning();
  useEffect2(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (!selection) {
      setItemIsReady("expression-matrix");
      return;
    }
    const loader = loaders[dataset].loaders["expression-matrix"];
    if (loader) {
      setItemIsNotReady("expression-matrix");
      const implementsGeneSelection = typeof loader.loadGeneSelection === "function";
      if (implementsGeneSelection) {
        loaders[dataset].loaders["expression-matrix"].loadGeneSelection({ selection }).catch((e) => warn(e, setWarning)).then((payload) => {
          if (!payload)
            return;
          const { data } = payload;
          setGeneData(data);
          setItemIsReady("expression-matrix");
        });
      } else {
        loader.load().catch((e) => warn(e, setWarning)).then((payload) => {
          if (!payload)
            return;
          const { data } = payload;
          const [attrs, { data: matrix }] = data;
          const expressionDataForSelection = selection.map((sel) => {
            const geneIndex = attrs.cols.indexOf(sel);
            const numGenes = attrs.cols.length;
            const numCells = attrs.rows.length;
            const expressionData = new Uint8Array(numCells);
            for (let cellIndex = 0; cellIndex < numCells; cellIndex += 1) {
              expressionData[cellIndex] = matrix[cellIndex * numGenes + geneIndex];
            }
            return expressionData;
          });
          setGeneData(expressionDataForSelection);
          setItemIsReady("expression-matrix");
        });
      }
    } else {
      setGeneData(null);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "expression-matrix", null, null), setWarning);
      } else {
        setItemIsReady("expression-matrix");
      }
    }
  }, [loaders, dataset, selection]);
  return [geneData];
}
function useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, isRequired) {
  const [attrs, setAttrs] = useState4();
  const setWarning = useSetWarning();
  useEffect2(() => {
    if (!loaders[dataset]) {
      return;
    }
    const loader = loaders[dataset].loaders["expression-matrix"];
    if (loader) {
      const implementsLoadAttrs = typeof loader.loadAttrs === "function";
      if (implementsLoadAttrs) {
        loader.loadAttrs().catch((e) => warn(e, setWarning)).then((payload) => {
          if (!payload)
            return;
          const { data, url } = payload;
          setAttrs(data);
          addUrl(url, "Expression Matrix");
          setItemIsReady("expression-matrix");
        });
      } else {
        loader.load().catch((e) => warn(e, setWarning)).then((payload) => {
          if (!payload)
            return;
          const { data, url } = payload;
          setAttrs(data[0]);
          addUrl(url, "Expression Matrix");
          setItemIsReady("expression-matrix");
        });
      }
    } else {
      setAttrs(null);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "expression-matrix", null, null), setWarning);
      } else {
        setItemIsReady("expression-matrix");
      }
    }
  }, [loaders, dataset]);
  return [attrs];
}
function useMoleculesData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [molecules, setMolecules] = useState4();
  const [moleculesCount, setMoleculesCount] = useState4(0);
  const [locationsCount, setLocationsCount] = useState4(0);
  const setWarning = useSetWarning();
  useEffect2(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders.molecules) {
      loaders[dataset].loaders.molecules.load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        setMolecules(data);
        setMoleculesCount(Object.keys(data).length);
        setLocationsCount(Object.values(data).map((l) => l.length).reduce((a, b) => a + b, 0));
        addUrl(url, "Molecules");
        const coordinationValuesOrDefault = __spreadValues({
          spatialMoleculesLayer: DEFAULT_MOLECULES_LAYER
        }, coordinationValues);
        initCoordinationSpace(coordinationValuesOrDefault, coordinationSetters, initialCoordinationValues);
        setItemIsReady("molecules");
      });
    } else {
      setMolecules({});
      setMoleculesCount(0);
      setLocationsCount(0);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "molecules", null, null), setWarning);
      } else {
        setItemIsReady("molecules");
      }
    }
  }, [loaders, dataset]);
  return [molecules, moleculesCount, locationsCount];
}
function useNeighborhoodsData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [neighborhoods, setNeighborhoods] = useState4();
  const setWarning = useSetWarning();
  useEffect2(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders.neighborhoods) {
      loaders[dataset].loaders.neighborhoods.load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        setNeighborhoods(data);
        addUrl(url, "Neighborhoods");
        const coordinationValuesOrDefault = __spreadValues({
          spatialNeighborhoodsLayer: DEFAULT_NEIGHBORHOODS_LAYER
        }, coordinationValues);
        initCoordinationSpace(coordinationValuesOrDefault, coordinationSetters, initialCoordinationValues);
        setItemIsReady("neighborhoods");
      });
    } else {
      setNeighborhoods({});
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "neighborhoods", null, null), setWarning);
      } else {
        setItemIsReady("neighborhoods");
      }
    }
  }, [loaders, dataset]);
  return [neighborhoods];
}
function useRasterData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [raster, setRaster] = useState4();
  const [imageLayerLoaders, setImageLayerLoaders] = useState4([]);
  const [imageLayerMeta, setImageLayerMeta] = useState4([]);
  const setWarning = useSetWarning();
  useEffect2(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders.raster) {
      loaders[dataset].loaders.raster.load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url: urls, coordinationValues } = payload;
        setRaster(data);
        urls.forEach(([url, name2]) => {
          addUrl(url, name2);
        });
        const { loaders: nextImageLoaders, meta: nextImageMeta } = data;
        setImageLayerLoaders(nextImageLoaders);
        setImageLayerMeta(nextImageMeta);
        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);
        setItemIsReady("raster");
      });
    } else {
      setImageLayerLoaders([]);
      setImageLayerMeta([]);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "raster", null, null), setWarning);
      } else {
        setItemIsReady("raster");
      }
    }
  }, [loaders, dataset]);
  return [raster, imageLayerLoaders, imageLayerMeta];
}
function useGenomicProfilesData(loaders, dataset, setItemIsReady, addUrl, isRequired, coordinationSetters, initialCoordinationValues) {
  const [genomicProfilesAttrs, setGenomicProfilesAttrs] = useState4();
  const setWarning = useSetWarning();
  useEffect2(() => {
    if (!loaders[dataset]) {
      return;
    }
    if (loaders[dataset].loaders["genomic-profiles"]) {
      loaders[dataset].loaders["genomic-profiles"].load().catch((e) => warn(e, setWarning)).then((payload) => {
        if (!payload)
          return;
        const { data, url, coordinationValues } = payload;
        setGenomicProfilesAttrs(data);
        addUrl(url);
        initCoordinationSpace(coordinationValues, coordinationSetters, initialCoordinationValues);
        setItemIsReady("genomic-profiles");
      });
    } else {
      setGenomicProfilesAttrs(null);
      if (isRequired) {
        warn(new LoaderNotFoundError(dataset, "genomic-profiles", null, null), setWarning);
      } else {
        setItemIsReady("genomic-profiles");
      }
    }
  }, [loaders, dataset]);
  return [genomicProfilesAttrs];
}

// src/components/sets/cell-set-utils.js
import uuidv4 from "uuid/v4";
import isNil from "lodash/isNil";
import isEqual2 from "lodash/isEqual";
import range3 from "lodash/range";
import { featureCollection as turfFeatureCollection, point as turfPoint } from "@turf/helpers";
import centroid from "@turf/centroid";
import concaveman from "concaveman";

// src/components/sets/utils.js
import tinycolor from "tinycolor2";
import isEqual from "lodash/isEqual";
function callbackOnKeyPress(event, key, callback) {
  if (event.key === key) {
    event.preventDefault();
    callback();
  }
}
function colorArrayToString(rgbArray) {
  return tinycolor({ r: rgbArray[0], g: rgbArray[1], b: rgbArray[2] }).toHexString();
}
function colorStringToArray(colorString) {
  const colorObj = tinycolor(colorString).toRgb();
  return [colorObj.r, colorObj.g, colorObj.b];
}
function getLevelTooltipText(i) {
  if (i === 0)
    return "Color by hierarchy";
  if (i <= 2) {
    const subs = (j) => "sub".repeat(j);
    return `Color by ${subs(i - 1)}cluster`;
  }
  return `Color by cluster level ${i}`;
}
function isEqualOrPrefix(targetPath, testPath) {
  if (targetPath.length <= testPath.length) {
    return isEqual(targetPath, testPath.slice(0, targetPath.length));
  }
  return false;
}
function tryRenamePath(targetPath, testPath, nextTargetPath) {
  if (isEqualOrPrefix(targetPath, testPath)) {
    return [...nextTargetPath, ...testPath.slice(nextTargetPath.length)];
  }
  return testPath;
}
var PATH_SEP = "___";
function pathToKey(path) {
  return path.join(PATH_SEP);
}

// src/components/sets/cell-set-utils.js
function generateKey() {
  return uuidv4();
}
function nodeToSet(currNode) {
  if (!currNode) {
    return [];
  }
  if (!currNode.children) {
    return currNode.set || [];
  }
  return currNode.children.flatMap((c) => nodeToSet(c));
}
function nodeToHeight(currNode, level = 0) {
  if (!currNode.children) {
    return level;
  }
  const newLevel = level + 1;
  const childrenHeights = currNode.children.map((c) => nodeToHeight(c, newLevel));
  return Math.max(...childrenHeights, newLevel);
}
function getNodeLength(currNode) {
  var _a2;
  if (!currNode) {
    return 0;
  }
  if (!currNode.children) {
    return ((_a2 = currNode.set) == null ? void 0 : _a2.length) || 0;
  }
  return currNode.children.reduce((acc, curr) => acc + getNodeLength(curr), 0);
}
function nodeFindNodeByNamePath(node, path, currLevelIndex) {
  const currNodeName = path[currLevelIndex];
  if (node.name === currNodeName) {
    if (currLevelIndex === path.length - 1) {
      return node;
    }
    if (node.children) {
      const foundNodes = node.children.map((child) => nodeFindNodeByNamePath(child, path, currLevelIndex + 1)).filter(Boolean);
      if (foundNodes.length === 1) {
        return foundNodes[0];
      }
    }
  }
  return null;
}
function treeFindNodeByNamePath(currTree, targetNamePath) {
  const foundNodes = currTree.tree.map((levelZeroNode) => nodeFindNodeByNamePath(levelZeroNode, targetNamePath, 0)).filter(Boolean);
  if (foundNodes.length === 1) {
    return foundNodes[0];
  }
  return null;
}
function nodeTransform(node, predicate, transform, transformedPaths, currPath) {
  let newPath;
  if (!currPath) {
    newPath = [node.name];
  } else {
    newPath = [...currPath];
  }
  if (predicate(node, newPath)) {
    transformedPaths.push(newPath);
    return transform(node, newPath);
  }
  if (node.children) {
    return __spreadProps(__spreadValues({}, node), {
      children: node.children.map((child) => nodeTransform(child, predicate, transform, transformedPaths, newPath.concat([child.name])))
    });
  }
  return node;
}
function nodeTransformAll(node, predicate, transform, transformedPaths, currPath) {
  let newPath;
  if (!currPath) {
    newPath = [node.name];
  } else {
    newPath = [...currPath];
  }
  let newNode = node;
  if (predicate(node, newPath)) {
    transformedPaths.push(newPath);
    newNode = transform(node, newPath);
  }
  if (node.children) {
    return __spreadProps(__spreadValues({}, newNode), {
      children: newNode.children.map((child) => nodeTransformAll(child, predicate, transform, transformedPaths, newPath.concat([child.name])))
    });
  }
  return newNode;
}
function nodeAppendChild(currNode, newChild) {
  return __spreadProps(__spreadValues({}, currNode), {
    children: [...currNode.children, newChild]
  });
}
function nodePrependChild(currNode, newChild) {
  return __spreadProps(__spreadValues({}, currNode), {
    children: [newChild, ...currNode.children]
  });
}
function nodeInsertChild(currNode, newChild, insertIndex) {
  const newChildren = Array.from(currNode.children);
  newChildren.splice(insertIndex, 0, newChild);
  return __spreadProps(__spreadValues({}, currNode), {
    children: newChildren
  });
}
function treeToUnion(currTree, checkedPaths) {
  const nodes = checkedPaths.map((path) => treeFindNodeByNamePath(currTree, path));
  const nodeSets = nodes.map((node) => nodeToSet(node).map(([cellId]) => cellId));
  return nodeSets.reduce((a, h) => a.concat(h.filter((hEl) => !a.includes(hEl))), nodeSets[0] || []);
}
function treeToIntersection(currTree, checkedPaths) {
  const nodes = checkedPaths.map((path) => treeFindNodeByNamePath(currTree, path));
  const nodeSets = nodes.map((node) => nodeToSet(node).map(([cellId]) => cellId));
  return nodeSets.reduce((a, h) => h.filter((hEl) => a.includes(hEl)), nodeSets[0] || []);
}
function treeToComplement(currTree, checkedPaths, items2) {
  const primaryUnion = treeToUnion(currTree, checkedPaths);
  return items2.filter((el) => !primaryUnion.includes(el));
}
function nodeToLevelDescendantNamePaths(node, level, prevPath, stopEarly = false) {
  if (!node.children) {
    if (!stopEarly) {
      return null;
    }
    return [[...prevPath, node.name]];
  }
  if (level === 0) {
    return [[...prevPath, node.name]];
  }
  return node.children.flatMap((c) => nodeToLevelDescendantNamePaths(c, level - 1, [...prevPath, node.name], stopEarly)).filter(Boolean);
}
function treeExport(currTree, datatype) {
  return {
    version: HIERARCHICAL_SCHEMAS[datatype].latestVersion,
    datatype,
    tree: currTree.tree
  };
}
function treeExportLevelZeroNode(currTree, nodePath, datatype, cellSetColors, theme) {
  const node = treeFindNodeByNamePath(currTree, nodePath);
  const nodeWithColors = nodeTransformAll(node, () => true, (n, nPath) => {
    var _a2, _b2;
    const nodeColor = (_b2 = (_a2 = cellSetColors == null ? void 0 : cellSetColors.find((c) => isEqual2(c.path, nPath))) == null ? void 0 : _a2.color) != null ? _b2 : getDefaultColor(theme);
    return __spreadProps(__spreadValues({}, n), {
      color: nodeColor.slice(0, 3)
    });
  }, []);
  const treeWithOneLevelZeroNode = __spreadProps(__spreadValues({}, currTree), {
    tree: [nodeWithColors]
  });
  return {
    treeToExport: treeExport(treeWithOneLevelZeroNode, datatype),
    nodeName: node.name
  };
}
function treeExportSet(currTree, nodePath) {
  const node = treeFindNodeByNamePath(currTree, nodePath);
  return { setToExport: nodeToSet(node), nodeName: node.name };
}
function treeInitialize(datatype) {
  return {
    version: HIERARCHICAL_SCHEMAS[datatype].latestVersion,
    datatype,
    tree: []
  };
}
function nodeToRenderProps(node, path, cellSetColor) {
  var _a2;
  const level = path.length - 1;
  return {
    title: node.name,
    nodeKey: pathToKey(path),
    path,
    size: getNodeLength(node),
    color: (_a2 = cellSetColor == null ? void 0 : cellSetColor.find((d) => isEqual2(d.path, path))) == null ? void 0 : _a2.color,
    level,
    isLeaf: (!node.children || node.children.length === 0) && Boolean(node.set),
    height: nodeToHeight(node)
  };
}
function colorMixWithUncertainty(originalColor, p, mixingColor = [128, 128, 128]) {
  return [
    (originalColor[0] - mixingColor[0]) * p + mixingColor[0],
    (originalColor[1] - mixingColor[1]) * p + mixingColor[1],
    (originalColor[2] - mixingColor[2]) * p + mixingColor[2]
  ];
}
function treeToCellColorsBySetNames(currTree, selectedNamePaths, cellSetColor, theme) {
  let cellColorsArray = [];
  selectedNamePaths.forEach((setNamePath) => {
    var _a2;
    const node = treeFindNodeByNamePath(currTree, setNamePath);
    if (node) {
      const nodeSet = nodeToSet(node);
      const nodeColor = ((_a2 = cellSetColor == null ? void 0 : cellSetColor.find((d) => isEqual2(d.path, setNamePath))) == null ? void 0 : _a2.color) || getDefaultColor(theme);
      cellColorsArray = [
        ...cellColorsArray,
        ...nodeSet.map(([cellId, prob]) => [
          cellId,
          isNil(prob) ? nodeColor : colorMixWithUncertainty(nodeColor, prob)
        ])
      ];
    }
  });
  return new Map(cellColorsArray);
}
function treeToObjectsBySetNames(currTree, selectedNamePaths, setColor, theme) {
  var _a2;
  let cellsArray = [];
  for (let i = 0; i < selectedNamePaths.length; i += 1) {
    const setNamePath = selectedNamePaths[i];
    const node = treeFindNodeByNamePath(currTree, setNamePath);
    if (node) {
      const nodeSet = nodeToSet(node);
      const nodeColor = ((_a2 = setColor == null ? void 0 : setColor.find((d) => isEqual2(d.path, setNamePath))) == null ? void 0 : _a2.color) || getDefaultColor(theme);
      cellsArray = cellsArray.concat(nodeSet.map(([cellId]) => ({
        obsId: cellId,
        name: node.name,
        color: nodeColor
      })));
    }
  }
  return cellsArray;
}
function treeToCellPolygonsBySetNames(currTree, cells, mapping, selectedNamePaths, cellSetColor, theme) {
  const cellSetPolygons = [];
  selectedNamePaths.forEach((setNamePath) => {
    var _a2;
    const node = treeFindNodeByNamePath(currTree, setNamePath);
    if (node) {
      const nodeSet = nodeToSet(node);
      const nodeColor = ((_a2 = cellSetColor == null ? void 0 : cellSetColor.find((d) => isEqual2(d.path, setNamePath))) == null ? void 0 : _a2.color) || getDefaultColor(theme);
      const cellPositions = nodeSet.map(([cellId]) => {
        var _a3, _b2;
        return [
          (_a3 = cells[cellId]) == null ? void 0 : _a3.mappings[mapping][0],
          -((_b2 = cells[cellId]) == null ? void 0 : _b2.mappings[mapping][1])
        ];
      }).filter((cell) => cell.every((i) => typeof i === "number"));
      if (cellPositions.length > 2) {
        const points = turfFeatureCollection(cellPositions.map(turfPoint));
        const concavity = Infinity;
        const hullCoords = concaveman(cellPositions, concavity);
        if (hullCoords) {
          const centroidCoords = centroid(points).geometry.coordinates;
          cellSetPolygons.push({
            path: setNamePath,
            name: setNamePath[setNamePath.length - 1],
            hull: hullCoords,
            color: nodeColor,
            centroid: centroidCoords
          });
        }
      }
    }
  });
  return cellSetPolygons;
}
function treeToSetSizesBySetNames(currTree, selectedNamePaths, setColor, theme) {
  const sizes = [];
  selectedNamePaths.forEach((setNamePath) => {
    var _a2;
    const node = treeFindNodeByNamePath(currTree, setNamePath);
    if (node) {
      const nodeSet = nodeToSet(node);
      const nodeColor = ((_a2 = setColor.find((d) => isEqual2(d.path, setNamePath))) == null ? void 0 : _a2.color) || getDefaultColor(theme);
      sizes.push({
        key: generateKey(),
        name: node.name,
        size: nodeSet.length,
        color: nodeColor
      });
    }
  });
  return sizes;
}
function filterNode(node, prevPath, filterPath) {
  if (isEqual2([...prevPath, node.name], filterPath)) {
    return null;
  }
  if (!node.children) {
    return node;
  }
  return __spreadProps(__spreadValues({}, node), {
    children: node.children.map((c) => filterNode(c, [...prevPath, node.name], filterPath)).filter(Boolean)
  });
}
function treeToExpectedCheckedLevel(currTree, checkedPaths) {
  let result = null;
  if (currTree) {
    currTree.tree.forEach((lzn) => {
      const levelZeroPath = [lzn.name];
      const height = nodeToHeight(lzn);
      range3(height).forEach((i) => {
        const levelIndex = i + 1;
        const levelNodePaths = nodeToLevelDescendantNamePaths(lzn, levelIndex, [], true);
        if (isEqual2(levelNodePaths, checkedPaths)) {
          result = { levelZeroPath, levelIndex };
        }
      });
    });
  }
  return result;
}
function treesConflict(cellSets, testCellSets) {
  const paths = [];
  const testPaths = [];
  let hasConflict = false;
  function getPaths(node, prevPath) {
    paths.push([...prevPath, node.name]);
    if (node.children) {
      node.children.forEach((c) => getPaths(c, [...prevPath, node.name]));
    }
  }
  cellSets.tree.forEach((lzn) => getPaths(lzn, []));
  function getTestPaths(node, prevPath) {
    testPaths.push([...prevPath, node.name]);
    if (node.children) {
      node.children.forEach((c) => getPaths(c, [...prevPath, node.name]));
    }
  }
  testCellSets.tree.forEach((lzn) => getTestPaths(lzn, []));
  testPaths.forEach((testPath) => {
    if (paths.find((p) => isEqual2(p, testPath))) {
      hasConflict = true;
    }
  });
  return hasConflict;
}
function initializeCellSetColor(cellSets, cellSetColor) {
  const nextCellSetColor = [...cellSetColor || []];
  const nodeCountPerTreePerLevel = cellSets.tree.map((tree) => Array.from({
    length: nodeToHeight(tree) + 1
  }).fill(0));
  function processNode2(node, prevPath, hierarchyLevel, treeIndex) {
    const index = nodeCountPerTreePerLevel[treeIndex][hierarchyLevel];
    const nodePath = [...prevPath, node.name];
    const nodeColor = nextCellSetColor.find((d) => isEqual2(d.path, nodePath));
    if (!nodeColor) {
      nextCellSetColor.push({
        path: nodePath,
        color: PALETTE[index % PALETTE.length]
      });
    }
    nodeCountPerTreePerLevel[treeIndex][hierarchyLevel] += 1;
    if (node.children) {
      node.children.forEach((c) => processNode2(c, nodePath, hierarchyLevel + 1, treeIndex));
    }
  }
  cellSets.tree.forEach((lzn, treeIndex) => processNode2(lzn, [], 0, treeIndex));
  return nextCellSetColor;
}
function getCellSetPolygons(params) {
  const {
    cells,
    mapping,
    cellSets,
    cellSetSelection,
    cellSetColor,
    theme
  } = params;
  if (cellSetSelection && cellSetSelection.length > 0 && cellSets && cells) {
    return treeToCellPolygonsBySetNames(cellSets, cells, mapping, cellSetSelection, cellSetColor, theme);
  }
  return [];
}

// src/components/interpolate-colors.js
var schemeRdBu = [[103, 0, 31], [178, 24, 43], [214, 96, 77], [244, 165, 130], [253, 219, 199], [247, 247, 247], [209, 229, 240], [146, 197, 222], [67, 147, 195], [33, 102, 172], [5, 48, 97]];
var schemePlasma = [[13, 8, 135], [16, 7, 136], [19, 7, 137], [22, 7, 138], [25, 6, 140], [27, 6, 141], [29, 6, 142], [32, 6, 143], [34, 6, 144], [36, 6, 145], [38, 5, 145], [40, 5, 146], [42, 5, 147], [44, 5, 148], [46, 5, 149], [47, 5, 150], [49, 5, 151], [51, 5, 151], [53, 4, 152], [55, 4, 153], [56, 4, 154], [58, 4, 154], [60, 4, 155], [62, 4, 156], [63, 4, 156], [65, 4, 157], [67, 3, 158], [68, 3, 158], [70, 3, 159], [72, 3, 159], [73, 3, 160], [75, 3, 161], [76, 2, 161], [78, 2, 162], [80, 2, 162], [81, 2, 163], [83, 2, 163], [85, 2, 164], [86, 1, 164], [88, 1, 164], [89, 1, 165], [91, 1, 165], [92, 1, 166], [94, 1, 166], [96, 1, 166], [97, 0, 167], [99, 0, 167], [100, 0, 167], [102, 0, 167], [103, 0, 168], [105, 0, 168], [106, 0, 168], [108, 0, 168], [110, 0, 168], [111, 0, 168], [113, 0, 168], [114, 1, 168], [116, 1, 168], [117, 1, 168], [119, 1, 168], [120, 1, 168], [122, 2, 168], [123, 2, 168], [125, 3, 168], [126, 3, 168], [128, 4, 168], [129, 4, 167], [131, 5, 167], [132, 5, 167], [134, 6, 166], [135, 7, 166], [136, 8, 166], [138, 9, 165], [139, 10, 165], [141, 11, 165], [142, 12, 164], [143, 13, 164], [145, 14, 163], [146, 15, 163], [148, 16, 162], [149, 17, 161], [150, 19, 161], [152, 20, 160], [153, 21, 159], [154, 22, 159], [156, 23, 158], [157, 24, 157], [158, 25, 157], [160, 26, 156], [161, 27, 155], [162, 29, 154], [163, 30, 154], [165, 31, 153], [166, 32, 152], [167, 33, 151], [168, 34, 150], [170, 35, 149], [171, 36, 148], [172, 38, 148], [173, 39, 147], [174, 40, 146], [176, 41, 145], [177, 42, 144], [178, 43, 143], [179, 44, 142], [180, 46, 141], [181, 47, 140], [182, 48, 139], [183, 49, 138], [184, 50, 137], [186, 51, 136], [187, 52, 136], [188, 53, 135], [189, 55, 134], [190, 56, 133], [191, 57, 132], [192, 58, 131], [193, 59, 130], [194, 60, 129], [195, 61, 128], [196, 62, 127], [197, 64, 126], [198, 65, 125], [199, 66, 124], [200, 67, 123], [201, 68, 122], [202, 69, 122], [203, 70, 121], [204, 71, 120], [204, 73, 119], [205, 74, 118], [206, 75, 117], [207, 76, 116], [208, 77, 115], [209, 78, 114], [210, 79, 113], [211, 81, 113], [212, 82, 112], [213, 83, 111], [213, 84, 110], [214, 85, 109], [215, 86, 108], [216, 87, 107], [217, 88, 106], [218, 90, 106], [218, 91, 105], [219, 92, 104], [220, 93, 103], [221, 94, 102], [222, 95, 101], [222, 97, 100], [223, 98, 99], [224, 99, 99], [225, 100, 98], [226, 101, 97], [226, 102, 96], [227, 104, 95], [228, 105, 94], [229, 106, 93], [229, 107, 93], [230, 108, 92], [231, 110, 91], [231, 111, 90], [232, 112, 89], [233, 113, 88], [233, 114, 87], [234, 116, 87], [235, 117, 86], [235, 118, 85], [236, 119, 84], [237, 121, 83], [237, 122, 82], [238, 123, 81], [239, 124, 81], [239, 126, 80], [240, 127, 79], [240, 128, 78], [241, 129, 77], [241, 131, 76], [242, 132, 75], [243, 133, 75], [243, 135, 74], [244, 136, 73], [244, 137, 72], [245, 139, 71], [245, 140, 70], [246, 141, 69], [246, 143, 68], [247, 144, 68], [247, 145, 67], [247, 147, 66], [248, 148, 65], [248, 149, 64], [249, 151, 63], [249, 152, 62], [249, 154, 62], [250, 155, 61], [250, 156, 60], [250, 158, 59], [251, 159, 58], [251, 161, 57], [251, 162, 56], [252, 163, 56], [252, 165, 55], [252, 166, 54], [252, 168, 53], [252, 169, 52], [253, 171, 51], [253, 172, 51], [253, 174, 50], [253, 175, 49], [253, 177, 48], [253, 178, 47], [253, 180, 47], [253, 181, 46], [254, 183, 45], [254, 184, 44], [254, 186, 44], [254, 187, 43], [254, 189, 42], [254, 190, 42], [254, 192, 41], [253, 194, 41], [253, 195, 40], [253, 197, 39], [253, 198, 39], [253, 200, 39], [253, 202, 38], [253, 203, 38], [252, 205, 37], [252, 206, 37], [252, 208, 37], [252, 210, 37], [251, 211, 36], [251, 213, 36], [251, 215, 36], [250, 216, 36], [250, 218, 36], [249, 220, 36], [249, 221, 37], [248, 223, 37], [248, 225, 37], [247, 226, 37], [247, 228, 37], [246, 230, 38], [246, 232, 38], [245, 233, 38], [245, 235, 39], [244, 237, 39], [243, 238, 39], [243, 240, 39], [242, 242, 39], [241, 244, 38], [241, 245, 37], [240, 247, 36], [240, 249, 33]];
function rgbSpline(spline) {
  return (colors) => {
    const n = colors.length;
    let r = new Array(n);
    let g = new Array(n);
    let b = new Array(n);
    let i;
    let color;
    for (i = 0; i < n; ++i) {
      color = [colors[i][0], colors[i][1], colors[i][2]];
      r[i] = color[0] || 0;
      g[i] = color[1] || 0;
      b[i] = color[2] || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    return (t) => [r(t), g(t), b(t)];
  };
}
function basis(values) {
  function innerBasis(t1, v0, v1, v2, v3) {
    const t2 = t1 * t1;
    const t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  const n = values.length - 1;
  return (t) => {
    const i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n);
    const v1 = values[i];
    const v2 = values[i + 1];
    const v0 = i > 0 ? values[i - 1] : 2 * v1 - v2;
    const v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return innerBasis((t - i / n) * n, v0, v1, v2, v3);
  };
}
var interpolateRgbBasis = rgbSpline(basis);
function interpolateSequentialMulti(range10) {
  const n = range10.length;
  return (t) => range10[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
}
var interpolateRdBu = interpolateRgbBasis(schemeRdBu);
var interpolatePlasma = interpolateSequentialMulti(schemePlasma);
function getCellColors(params) {
  const {
    cellColorEncoding,
    expressionData,
    cellSets,
    cellSetSelection,
    cellSetColor,
    expressionDataAttrs,
    theme
  } = params;
  if (cellColorEncoding === "geneSelection" && expressionData && expressionDataAttrs) {
    const geneExpColormap = interpolatePlasma;
    const colors = new Map();
    for (let i = 0; i < expressionData.length; i += 1) {
      const value = expressionData[i];
      const cellColor = geneExpColormap(value / 255);
      colors.set(expressionDataAttrs.rows[i], cellColor);
    }
    return colors;
  }
  if (cellColorEncoding === "cellSetSelection" && cellSetSelection && cellSets) {
    return treeToCellColorsBySetNames(cellSets, cellSetSelection, cellSetColor, theme);
  }
  return new Map();
}

// src/components/heatmap/Heatmap.js
import React6, {
  useRef as useRef4,
  useState as useState5,
  useCallback as useCallback3,
  useMemo as useMemo4,
  useEffect as useEffect3,
  useReducer,
  forwardRef
} from "react";
import uuidv42 from "uuid/v4";
import DeckGL2 from "deck.gl";
import { OrthographicView as OrthographicView2 } from "@deck.gl/core";
import range5 from "lodash/range";
import clamp2 from "lodash/clamp";
import isEqual3 from "lodash/isEqual";
import { max } from "d3-array";

// src/layers/HeatmapCompositeTextLayer.js
import { COORDINATE_SYSTEM as COORDINATE_SYSTEM3, CompositeLayer as CompositeLayer2 } from "@deck.gl/core";
import { TextLayer as TextLayer2 } from "@deck.gl/layers";

// src/layers/heatmap-constants.js
import GL2 from "@luma.gl/constants";
var TILE_SIZE = 2048;
var MIN_ROW_AGG = 1;
var MAX_ROW_AGG = 16;
var COLOR_BAR_SIZE = 20;
var AXIS_LABEL_TEXT_SIZE = 9;
var AXIS_TITLE_TEXT_SIZE = 15;
var AXIS_MIN_SIZE = 10;
var AXIS_MAX_SIZE = 90;
var AXIS_MARGIN = 3;
var THEME_TO_TEXT_COLOR = {
  dark: [224, 224, 224],
  light: [64, 64, 64]
};
var AXIS_FONT_FAMILY = "-apple-system, 'Helvetica Neue', Arial, sans-serif";
var PIXELATED_TEXTURE_PARAMETERS = {
  [GL2.TEXTURE_MIN_FILTER]: GL2.NEAREST,
  [GL2.TEXTURE_MAG_FILTER]: GL2.NEAREST,
  [GL2.TEXTURE_WRAP_S]: GL2.CLAMP_TO_EDGE,
  [GL2.TEXTURE_WRAP_T]: GL2.CLAMP_TO_EDGE
};

// src/layers/HeatmapCompositeTextLayer.js
var HeatmapCompositeTextLayer = class extends CompositeLayer2 {
  _renderAxisTopLayers() {
    const {
      axisTopLabelData,
      matrixLeft,
      width,
      matrixWidth,
      viewWidth,
      theme,
      targetX,
      targetY,
      axisTopTitle,
      cellWidth,
      axisOffsetTop,
      scaleFactor
    } = this.props;
    const showAxisTopLabels = cellWidth >= AXIS_LABEL_TEXT_SIZE;
    const axisLabelTop = targetY + (axisOffsetTop - AXIS_MARGIN) / 2 / scaleFactor;
    return [
      new TextLayer2({
        id: "axisTopLabels",
        coordinateSystem: COORDINATE_SYSTEM3.CARTESIAN,
        data: axisTopLabelData,
        getText: (d) => d[1],
        getPosition: (d) => [matrixLeft + (d[0] + 0.5) / width * matrixWidth, axisLabelTop],
        getTextAnchor: "start",
        getColor: () => THEME_TO_TEXT_COLOR[theme],
        getSize: showAxisTopLabels ? AXIS_LABEL_TEXT_SIZE : 0,
        getAngle: 75,
        fontFamily: AXIS_FONT_FAMILY,
        updateTriggers: {
          getPosition: [axisLabelTop, matrixLeft, matrixWidth, viewWidth],
          getSize: [showAxisTopLabels],
          getColor: [theme]
        }
      }),
      new TextLayer2({
        id: "axisTopTitle",
        coordinateSystem: COORDINATE_SYSTEM3.CARTESIAN,
        data: [{ title: axisTopTitle }],
        getText: (d) => d.title,
        getPosition: [targetX, targetY],
        getTextAnchor: "middle",
        getColor: () => THEME_TO_TEXT_COLOR[theme],
        getSize: !showAxisTopLabels ? AXIS_TITLE_TEXT_SIZE : 0,
        getAngle: 0,
        fontFamily: AXIS_FONT_FAMILY,
        updateTriggers: {
          getSize: [showAxisTopLabels],
          getColor: [theme]
        }
      })
    ];
  }
  _renderAxisLeftLayers() {
    const {
      axisLeftLabelData,
      matrixTop,
      height,
      matrixHeight,
      viewHeight,
      theme,
      axisLeftTitle,
      targetX,
      targetY,
      cellHeight,
      axisOffsetLeft,
      scaleFactor
    } = this.props;
    const showAxisLeftLabels = cellHeight >= AXIS_LABEL_TEXT_SIZE;
    const axisLabelLeft = targetX + (axisOffsetLeft - AXIS_MARGIN) / 2 / scaleFactor;
    return [
      new TextLayer2({
        id: "axisLeftLabels",
        coordinateSystem: COORDINATE_SYSTEM3.CARTESIAN,
        data: axisLeftLabelData,
        getText: (d) => d[1],
        getPosition: (d) => [axisLabelLeft, matrixTop + (d[0] + 0.5) / height * matrixHeight],
        getTextAnchor: "end",
        getColor: () => THEME_TO_TEXT_COLOR[theme],
        getSize: showAxisLeftLabels ? AXIS_LABEL_TEXT_SIZE : 0,
        getAngle: 0,
        fontFamily: AXIS_FONT_FAMILY,
        updateTriggers: {
          getPosition: [axisLabelLeft, matrixTop, matrixHeight, viewHeight],
          getSize: [showAxisLeftLabels],
          getColor: [theme]
        }
      }),
      new TextLayer2({
        id: "axisLeftTitle",
        coordinateSystem: COORDINATE_SYSTEM3.CARTESIAN,
        data: [{ title: axisLeftTitle }],
        getText: (d) => d.title,
        getPosition: [targetX, targetY],
        getTextAnchor: "middle",
        getColor: () => THEME_TO_TEXT_COLOR[theme],
        getSize: !showAxisLeftLabels ? AXIS_TITLE_TEXT_SIZE : 0,
        getAngle: 90,
        fontFamily: AXIS_FONT_FAMILY,
        updateTriggers: {
          getSize: [showAxisLeftLabels],
          getColor: [theme]
        }
      })
    ];
  }
  renderLayers() {
    return [
      this._renderAxisTopLayers(),
      this._renderAxisLeftLayers()
    ];
  }
};
HeatmapCompositeTextLayer.layerName = "HeatmapCompositeTextLayer";

// src/layers/PixelatedBitmapLayer.js
import { BitmapLayer as BitmapLayer2 } from "@deck.gl/layers";
import { CompositeLayer as CompositeLayer3 } from "@deck.gl/core";
var defaultProps2 = __spreadProps(__spreadValues({}, BitmapLayer2.defaultProps), {
  image: { type: "object", value: null, async: true },
  bounds: { type: "array", value: [1, 0, 0, 1], compare: true },
  desaturate: {
    type: "number",
    min: 0,
    max: 1,
    value: 0
  },
  transparentColor: { type: "color", value: [0, 0, 0, 0] },
  tintColor: { type: "color", value: [255, 255, 255] }
});
var PixelatedBitmapLayer = class extends CompositeLayer3 {
  renderLayers() {
    const { image } = this.props;
    return new BitmapLayer2(this.props, {
      id: `${this.props.id}-wrapped`,
      image,
      textureParameters: PIXELATED_TEXTURE_PARAMETERS
    });
  }
};
PixelatedBitmapLayer.layerName = "PixelatedBitmapLayer";
PixelatedBitmapLayer.defaultProps = defaultProps2;

// src/layers/HeatmapBitmapLayer.js
import GL3 from "@luma.gl/constants";
import { _mergeShaders, project32 as project322, picking as picking2 } from "@deck.gl/core";
import { BitmapLayer as BitmapLayer3 } from "@deck.gl/layers";
import { Texture2D as Texture2D2 } from "@luma.gl/core";

// src/layers/constants.js
var GLSL_COLORMAPS = [
  "plasma",
  "viridis",
  "jet"
];
var GLSL_COLORMAP_DEFAULT = "plasma";
var COLORMAP_SHADER_PLACEHOLDER = "COLORMAP_FUNC";

// src/layers/heatmap-bitmap-layer-shaders.js
var vertexShader = "\n#define SHADER_NAME heatmap-bitmap-layer-vertex-shader\n\nattribute vec2 texCoords;\nattribute vec3 positions;\nattribute vec3 positions64Low;\n\nvarying vec2 vTexCoord;\n\nconst vec3 pickingColor = vec3(1.0, 0.0, 0.0);\n\nvoid main(void) {\n  geometry.worldPosition = positions;\n  geometry.uv = texCoords;\n  geometry.pickingColor = pickingColor;\n\n  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  vTexCoord = texCoords;\n\n  vec4 color = vec4(0.0);\n  DECKGL_FILTER_COLOR(color, geometry);\n}\n";
var fragmentShader = "\n#define SHADER_NAME heatmap-bitmap-layer-fragment-shader\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvec4 rdbu (float x_2865134303) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.0196078431372549,0.0392156862745098,0.6745098039215687,1);\n  const float e1 = 0.35;\n  const vec4 v1 = vec4(0.41568627450980394,0.5372549019607843,0.9686274509803922,1);\n  const float e2 = 0.5;\n  const vec4 v2 = vec4(0.7450980392156863,0.7450980392156863,0.7450980392156863,1);\n  const float e3 = 0.6;\n  const vec4 v3 = vec4(0.8627450980392157,0.6666666666666666,0.5176470588235295,1);\n  const float e4 = 0.7;\n  const vec4 v4 = vec4(0.9019607843137255,0.5686274509803921,0.35294117647058826,1);\n  const float e5 = 1.0;\n  const vec4 v5 = vec4(0.6980392156862745,0.0392156862745098,0.10980392156862745,1);\n  float a0 = smoothstep(e0,e1,x_2865134303);\n  float a1 = smoothstep(e1,e2,x_2865134303);\n  float a2 = smoothstep(e2,e3,x_2865134303);\n  float a3 = smoothstep(e3,e4,x_2865134303);\n  float a4 = smoothstep(e4,e5,x_2865134303);\n  return max(mix(v0,v1,a0)*step(e0,x_2865134303)*step(x_2865134303,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2865134303)*step(x_2865134303,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2865134303)*step(x_2865134303,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2865134303)*step(x_2865134303,e4),mix(v4,v5,a4)*step(e4,x_2865134303)*step(x_2865134303,e5)\n  ))));\n}\n\nvec4 plasma (float x_4113959278) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);\n  float a0 = smoothstep(e0,e1,x_4113959278);\n  float a1 = smoothstep(e1,e2,x_4113959278);\n  float a2 = smoothstep(e2,e3,x_4113959278);\n  float a3 = smoothstep(e3,e4,x_4113959278);\n  float a4 = smoothstep(e4,e5,x_4113959278);\n  float a5 = smoothstep(e5,e6,x_4113959278);\n  float a6 = smoothstep(e6,e7,x_4113959278);\n  float a7 = smoothstep(e7,e8,x_4113959278);\n  return max(mix(v0,v1,a0)*step(e0,x_4113959278)*step(x_4113959278,e1),\n    max(mix(v1,v2,a1)*step(e1,x_4113959278)*step(x_4113959278,e2),\n    max(mix(v2,v3,a2)*step(e2,x_4113959278)*step(x_4113959278,e3),\n    max(mix(v3,v4,a3)*step(e3,x_4113959278)*step(x_4113959278,e4),\n    max(mix(v4,v5,a4)*step(e4,x_4113959278)*step(x_4113959278,e5),\n    max(mix(v5,v6,a5)*step(e5,x_4113959278)*step(x_4113959278,e6),\n    max(mix(v6,v7,a6)*step(e6,x_4113959278)*step(x_4113959278,e7),mix(v7,v8,a7)*step(e7,x_4113959278)*step(x_4113959278,e8)\n  )))))));\n}\n\nvec4 viridis (float x_1156145534) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);\n  float a0 = smoothstep(e0,e1,x_1156145534);\n  float a1 = smoothstep(e1,e2,x_1156145534);\n  float a2 = smoothstep(e2,e3,x_1156145534);\n  float a3 = smoothstep(e3,e4,x_1156145534);\n  float a4 = smoothstep(e4,e5,x_1156145534);\n  float a5 = smoothstep(e5,e6,x_1156145534);\n  float a6 = smoothstep(e6,e7,x_1156145534);\n  float a7 = smoothstep(e7,e8,x_1156145534);\n  return max(mix(v0,v1,a0)*step(e0,x_1156145534)*step(x_1156145534,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1156145534)*step(x_1156145534,e2),\n    max(mix(v2,v3,a2)*step(e2,x_1156145534)*step(x_1156145534,e3),\n    max(mix(v3,v4,a3)*step(e3,x_1156145534)*step(x_1156145534,e4),\n    max(mix(v4,v5,a4)*step(e4,x_1156145534)*step(x_1156145534,e5),\n    max(mix(v5,v6,a5)*step(e5,x_1156145534)*step(x_1156145534,e6),\n    max(mix(v6,v7,a6)*step(e6,x_1156145534)*step(x_1156145534,e7),mix(v7,v8,a7)*step(e7,x_1156145534)*step(x_1156145534,e8)\n  )))))));\n}\n\nvec4 greys (float x_2073311089) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_2073311089);\n  return mix(v0,v1,a0)*step(e0,x_2073311089)*step(x_2073311089,e1);\n}\n\nvec4 magma (float x_2664132035) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);\n  float a0 = smoothstep(e0,e1,x_2664132035);\n  float a1 = smoothstep(e1,e2,x_2664132035);\n  float a2 = smoothstep(e2,e3,x_2664132035);\n  float a3 = smoothstep(e3,e4,x_2664132035);\n  float a4 = smoothstep(e4,e5,x_2664132035);\n  float a5 = smoothstep(e5,e6,x_2664132035);\n  float a6 = smoothstep(e6,e7,x_2664132035);\n  float a7 = smoothstep(e7,e8,x_2664132035);\n  return max(mix(v0,v1,a0)*step(e0,x_2664132035)*step(x_2664132035,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2664132035)*step(x_2664132035,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2664132035)*step(x_2664132035,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2664132035)*step(x_2664132035,e4),\n    max(mix(v4,v5,a4)*step(e4,x_2664132035)*step(x_2664132035,e5),\n    max(mix(v5,v6,a5)*step(e5,x_2664132035)*step(x_2664132035,e6),\n    max(mix(v6,v7,a6)*step(e6,x_2664132035)*step(x_2664132035,e7),mix(v7,v8,a7)*step(e7,x_2664132035)*step(x_2664132035,e8)\n  )))))));\n}\n\nvec4 jet (float x_2485945205) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.5137254901960784,1);\n  const float e1 = 0.125;\n  const vec4 v1 = vec4(0,0.23529411764705882,0.6666666666666666,1);\n  const float e2 = 0.375;\n  const vec4 v2 = vec4(0.0196078431372549,1,1,1);\n  const float e3 = 0.625;\n  const vec4 v3 = vec4(1,1,0,1);\n  const float e4 = 0.875;\n  const vec4 v4 = vec4(0.9803921568627451,0,0,1);\n  const float e5 = 1.0;\n  const vec4 v5 = vec4(0.5019607843137255,0,0,1);\n  float a0 = smoothstep(e0,e1,x_2485945205);\n  float a1 = smoothstep(e1,e2,x_2485945205);\n  float a2 = smoothstep(e2,e3,x_2485945205);\n  float a3 = smoothstep(e3,e4,x_2485945205);\n  float a4 = smoothstep(e4,e5,x_2485945205);\n  return max(mix(v0,v1,a0)*step(e0,x_2485945205)*step(x_2485945205,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2485945205)*step(x_2485945205,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2485945205)*step(x_2485945205,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2485945205)*step(x_2485945205,e4),mix(v4,v5,a4)*step(e4,x_2485945205)*step(x_2485945205,e5)\n  ))));\n}\n\nvec4 bone (float x_2693572714) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.376;\n  const vec4 v1 = vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);\n  const float e2 = 0.753;\n  const vec4 v2 = vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_2693572714);\n  float a1 = smoothstep(e1,e2,x_2693572714);\n  float a2 = smoothstep(e2,e3,x_2693572714);\n  return max(mix(v0,v1,a0)*step(e0,x_2693572714)*step(x_2693572714,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2693572714)*step(x_2693572714,e2),mix(v2,v3,a2)*step(e2,x_2693572714)*step(x_2693572714,e3)\n  ));\n}\n\nvec4 copper (float x_2606013778) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.804;\n  const vec4 v1 = vec4(1,0.6274509803921569,0.4,1);\n  const float e2 = 1.0;\n  const vec4 v2 = vec4(1,0.7803921568627451,0.4980392156862745,1);\n  float a0 = smoothstep(e0,e1,x_2606013778);\n  float a1 = smoothstep(e1,e2,x_2606013778);\n  return max(mix(v0,v1,a0)*step(e0,x_2606013778)*step(x_2606013778,e1),mix(v1,v2,a1)*step(e1,x_2606013778)*step(x_2606013778,e2)\n  );\n}\n\nvec4 density (float x_4072297271) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);\n  float a0 = smoothstep(e0,e1,x_4072297271);\n  float a1 = smoothstep(e1,e2,x_4072297271);\n  float a2 = smoothstep(e2,e3,x_4072297271);\n  float a3 = smoothstep(e3,e4,x_4072297271);\n  float a4 = smoothstep(e4,e5,x_4072297271);\n  float a5 = smoothstep(e5,e6,x_4072297271);\n  float a6 = smoothstep(e6,e7,x_4072297271);\n  float a7 = smoothstep(e7,e8,x_4072297271);\n  return max(mix(v0,v1,a0)*step(e0,x_4072297271)*step(x_4072297271,e1),\n    max(mix(v1,v2,a1)*step(e1,x_4072297271)*step(x_4072297271,e2),\n    max(mix(v2,v3,a2)*step(e2,x_4072297271)*step(x_4072297271,e3),\n    max(mix(v3,v4,a3)*step(e3,x_4072297271)*step(x_4072297271,e4),\n    max(mix(v4,v5,a4)*step(e4,x_4072297271)*step(x_4072297271,e5),\n    max(mix(v5,v6,a5)*step(e5,x_4072297271)*step(x_4072297271,e6),\n    max(mix(v6,v7,a6)*step(e6,x_4072297271)*step(x_4072297271,e7),mix(v7,v8,a7)*step(e7,x_4072297271)*step(x_4072297271,e8)\n  )))))));\n}\n\nvec4 inferno (float x_524681000) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8901960784313725,0.34901960784313724,0.2,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,1,0.6431372549019608,1);\n  float a0 = smoothstep(e0,e1,x_524681000);\n  float a1 = smoothstep(e1,e2,x_524681000);\n  float a2 = smoothstep(e2,e3,x_524681000);\n  float a3 = smoothstep(e3,e4,x_524681000);\n  float a4 = smoothstep(e4,e5,x_524681000);\n  float a5 = smoothstep(e5,e6,x_524681000);\n  float a6 = smoothstep(e6,e7,x_524681000);\n  float a7 = smoothstep(e7,e8,x_524681000);\n  return max(mix(v0,v1,a0)*step(e0,x_524681000)*step(x_524681000,e1),\n    max(mix(v1,v2,a1)*step(e1,x_524681000)*step(x_524681000,e2),\n    max(mix(v2,v3,a2)*step(e2,x_524681000)*step(x_524681000,e3),\n    max(mix(v3,v4,a3)*step(e3,x_524681000)*step(x_524681000,e4),\n    max(mix(v4,v5,a4)*step(e4,x_524681000)*step(x_524681000,e5),\n    max(mix(v5,v6,a5)*step(e5,x_524681000)*step(x_524681000,e6),\n    max(mix(v6,v7,a6)*step(e6,x_524681000)*step(x_524681000,e7),mix(v7,v8,a7)*step(e7,x_524681000)*step(x_524681000,e8)\n  )))))));\n}\n\nvec4 cool (float x_3050536724) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.49019607843137253,0,0.7019607843137254,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.4549019607843137,0,0.8549019607843137,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0,0.8,0.7725490196078432,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0,0.9686274509803922,0.5725490196078431,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0,1,0.34509803921568627,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.1568627450980392,1,0.03137254901960784,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.5764705882352941,1,0,1);\n  float a0 = smoothstep(e0,e1,x_3050536724);\n  float a1 = smoothstep(e1,e2,x_3050536724);\n  float a2 = smoothstep(e2,e3,x_3050536724);\n  float a3 = smoothstep(e3,e4,x_3050536724);\n  float a4 = smoothstep(e4,e5,x_3050536724);\n  float a5 = smoothstep(e5,e6,x_3050536724);\n  float a6 = smoothstep(e6,e7,x_3050536724);\n  float a7 = smoothstep(e7,e8,x_3050536724);\n  return max(mix(v0,v1,a0)*step(e0,x_3050536724)*step(x_3050536724,e1),\n    max(mix(v1,v2,a1)*step(e1,x_3050536724)*step(x_3050536724,e2),\n    max(mix(v2,v3,a2)*step(e2,x_3050536724)*step(x_3050536724,e3),\n    max(mix(v3,v4,a3)*step(e3,x_3050536724)*step(x_3050536724,e4),\n    max(mix(v4,v5,a4)*step(e4,x_3050536724)*step(x_3050536724,e5),\n    max(mix(v5,v6,a5)*step(e5,x_3050536724)*step(x_3050536724,e6),\n    max(mix(v6,v7,a6)*step(e6,x_3050536724)*step(x_3050536724,e7),mix(v7,v8,a7)*step(e7,x_3050536724)*step(x_3050536724,e8)\n  )))))));\n}\n\nvec4 hot (float x_4009354686) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.3;\n  const vec4 v1 = vec4(0.9019607843137255,0,0,1);\n  const float e2 = 0.6;\n  const vec4 v2 = vec4(1,0.8235294117647058,0,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_4009354686);\n  float a1 = smoothstep(e1,e2,x_4009354686);\n  float a2 = smoothstep(e2,e3,x_4009354686);\n  return max(mix(v0,v1,a0)*step(e0,x_4009354686)*step(x_4009354686,e1),\n    max(mix(v1,v2,a1)*step(e1,x_4009354686)*step(x_4009354686,e2),mix(v2,v3,a2)*step(e2,x_4009354686)*step(x_4009354686,e3)\n  ));\n}\n\nvec4 spring (float x_2270446359) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_2270446359);\n  return mix(v0,v1,a0)*step(e0,x_2270446359)*step(x_2270446359,e1);\n}\n\nvec4 summer (float x_1101081466) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0.5019607843137255,0.4,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0.4,1);\n  float a0 = smoothstep(e0,e1,x_1101081466);\n  return mix(v0,v1,a0)*step(e0,x_1101081466)*step(x_1101081466,e1);\n}\n\nvec4 autumn (float x_3652770500) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_3652770500);\n  return mix(v0,v1,a0)*step(e0,x_3652770500)*step(x_3652770500,e1);\n}\n\nvec4 winter (float x_1155565894) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(0,1,0.5019607843137255,1);\n  float a0 = smoothstep(e0,e1,x_1155565894);\n  return mix(v0,v1,a0)*step(e0,x_1155565894)*step(x_1155565894,e1);\n}\n\n// The texture (GL.LUMINANCE & Uint8Array).\nuniform sampler2D uBitmapTexture;\n\n// What are the dimensions of the texture (width, height)?\nuniform vec2 uTextureSize;\n\n// How many consecutive pixels should be aggregated together along each axis?\nuniform vec2 uAggSize;\n\n// What are the values of the color scale sliders?\nuniform vec2 uColorScaleRange;\n\n// The texture coordinate, varying (interpolated between values set by the vertex shader).\nvarying vec2 vTexCoord;\n\nvoid main(void) {\n  // Compute 1 pixel in texture coordinates\n  vec2 onePixel = vec2(1.0, 1.0) / uTextureSize;\n  \n  vec2 viewCoord = vec2(floor(vTexCoord.x * uTextureSize.x), floor(vTexCoord.y * uTextureSize.y));\n\n  // Compute (x % aggSizeX, y % aggSizeY).\n  // These values will be the number of values to the left / above the current position to consider.\n  vec2 modAggSize = vec2(-1.0 * mod(viewCoord.x, uAggSize.x), -1.0 * mod(viewCoord.y, uAggSize.y));\n\n  // Take the sum of values along each axis.\n  float intensitySum = 0.0;\n  vec2 offsetPixels = vec2(0.0, 0.0);\n\n  for(int i = 0; i < 16; i++) {\n    // Check to break outer loop early.\n    // Uniforms cannot be used as conditions in GLSL for loops.\n    if(float(i) >= uAggSize.y) {\n      // Done in the y direction.\n      break;\n    }\n\n    offsetPixels = vec2(offsetPixels.x, (modAggSize.y + float(i)) * onePixel.y);\n\n    for(int j = 0; j < 16; j++) {\n      // Check to break inner loop early.\n      // Uniforms cannot be used as conditions in GLSL for loops.\n      if(float(j) >= uAggSize.x) {\n        // Done in the x direction.\n        break;\n      }\n\n      offsetPixels = vec2((modAggSize.x + float(j)) * onePixel.x, offsetPixels.y);\n      intensitySum += texture2D(uBitmapTexture, vTexCoord + offsetPixels).r;\n    }\n  }\n  \n  // Compute the mean value.\n  float intensityMean = intensitySum / (uAggSize.x * uAggSize.y);\n  \n  // Re-scale using the color scale slider values.\n  float scaledIntensityMean = (intensityMean - uColorScaleRange[0]) / max(0.005, (uColorScaleRange[1] - uColorScaleRange[0]));\n\n  gl_FragColor = COLORMAP_FUNC(clamp(scaledIntensityMean, 0.0, 1.0));\n\n  geometry.uv = vTexCoord;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

// src/layers/HeatmapBitmapLayer.js
var defaultProps3 = {
  image: { type: "object", value: null, async: true },
  colormap: { type: "string", value: GLSL_COLORMAP_DEFAULT, compare: true },
  bounds: { type: "array", value: [1, 0, 0, 1], compare: true },
  aggSizeX: { type: "number", value: 8, compare: true },
  aggSizeY: { type: "number", value: 8, compare: true },
  colorScaleLo: { type: "number", value: 0, compare: true },
  colorScaleHi: { type: "number", value: 1, compare: true }
};
var HeatmapBitmapLayer = class extends BitmapLayer3 {
  _getShaders(shaders) {
    this.props.extensions.forEach((extension) => {
      shaders = _mergeShaders(shaders, extension.getShaders.call(this, extension));
    });
    return shaders;
  }
  getShaders() {
    const { colormap } = this.props;
    const fragmentShaderWithColormap = GLSL_COLORMAPS.includes(colormap) ? fragmentShader.replace(COLORMAP_SHADER_PLACEHOLDER, colormap) : fragmentShader.replace(COLORMAP_SHADER_PLACEHOLDER, GLSL_COLORMAP_DEFAULT);
    return this._getShaders({
      vs: vertexShader,
      fs: fragmentShaderWithColormap,
      modules: [project322, picking2]
    });
  }
  updateState(args) {
    var _a2;
    super.updateState(args);
    this.loadTexture(this.props.image);
    const { props, oldProps } = args;
    if (props.colormap !== oldProps.colormap) {
      const { gl } = this.context;
      (_a2 = this.state.model) == null ? void 0 : _a2.delete();
      this.state.model = this._getModel(gl);
      this.getAttributeManager().invalidateAll();
    }
  }
  draw(opts) {
    const { uniforms } = opts;
    const { bitmapTexture, model } = this.state;
    const {
      aggSizeX,
      aggSizeY,
      colorScaleLo,
      colorScaleHi
    } = this.props;
    if (bitmapTexture && model) {
      model.setUniforms(Object.assign({}, uniforms, {
        uBitmapTexture: bitmapTexture,
        uTextureSize: [TILE_SIZE, TILE_SIZE],
        uAggSize: [aggSizeX, aggSizeY],
        uColorScaleRange: [colorScaleLo, colorScaleHi]
      })).draw();
    }
  }
  loadTexture(image) {
    const { gl } = this.context;
    if (this.state.bitmapTexture) {
      this.state.bitmapTexture.delete();
    }
    if (image instanceof Texture2D2) {
      this.setState({
        bitmapTexture: image
      });
    } else if (image) {
      this.setState({
        bitmapTexture: new Texture2D2(gl, {
          data: image,
          mipmaps: false,
          parameters: PIXELATED_TEXTURE_PARAMETERS,
          format: GL3.LUMINANCE,
          dataFormat: GL3.LUMINANCE,
          type: GL3.UNSIGNED_BYTE,
          width: TILE_SIZE,
          height: TILE_SIZE
        })
      });
    }
  }
};
HeatmapBitmapLayer.layerName = "HeatmapBitmapLayer";
HeatmapBitmapLayer.defaultProps = defaultProps3;

// src/components/heatmap/utils.js
import clamp from "lodash/clamp";
import range4 from "lodash/range";
function layerFilter({ layer, viewport }) {
  if (viewport.id === "axisLeft") {
    return layer.id.startsWith("axisLeft");
  }
  if (viewport.id === "axisTop") {
    return layer.id.startsWith("axisTop");
  }
  if (viewport.id === "heatmap") {
    return layer.id.startsWith("heatmap");
  }
  if (viewport.id === "colorsLeft") {
    return layer.id.startsWith("colorsLeft");
  }
  if (viewport.id === "colorsTop") {
    return layer.id.startsWith("colorsTop");
  }
  return false;
}
function getAxisSizes(transpose, geneLabelMaxLength, cellLabelMaxLength) {
  const axisOffsetLeft = clamp((transpose ? geneLabelMaxLength : cellLabelMaxLength) * AXIS_LABEL_TEXT_SIZE, AXIS_MIN_SIZE, AXIS_MAX_SIZE);
  const axisOffsetTop = clamp((transpose ? cellLabelMaxLength : geneLabelMaxLength) * AXIS_LABEL_TEXT_SIZE, AXIS_MIN_SIZE, AXIS_MAX_SIZE);
  return [axisOffsetLeft, axisOffsetTop];
}
function mouseToHeatmapPosition(mouseX, mouseY, {
  offsetLeft,
  offsetTop,
  targetX,
  targetY,
  scaleFactor,
  matrixWidth,
  matrixHeight,
  numRows,
  numCols
}) {
  const viewMouseX = mouseX - offsetLeft;
  const viewMouseY = mouseY - offsetTop;
  if (viewMouseX < 0 || viewMouseY < 0) {
    return [null, null];
  }
  const bboxTargetX = targetX * scaleFactor + matrixWidth * scaleFactor / 2;
  const bboxTargetY = targetY * scaleFactor + matrixHeight * scaleFactor / 2;
  const bboxLeft = bboxTargetX - matrixWidth / 2;
  const bboxTop = bboxTargetY - matrixHeight / 2;
  const zoomedOffsetLeft = bboxLeft / (matrixWidth * scaleFactor);
  const zoomedOffsetTop = bboxTop / (matrixHeight * scaleFactor);
  const zoomedViewMouseX = viewMouseX / (matrixWidth * scaleFactor);
  const zoomedViewMouseY = viewMouseY / (matrixHeight * scaleFactor);
  const zoomedMouseX = zoomedOffsetLeft + zoomedViewMouseX;
  const zoomedMouseY = zoomedOffsetTop + zoomedViewMouseY;
  const rowI = Math.floor(zoomedMouseY * numRows);
  const colI = Math.floor(zoomedMouseX * numCols);
  return [colI, rowI];
}
function heatmapToMousePosition(colI, rowI, {
  offsetLeft,
  offsetTop,
  targetX,
  targetY,
  scaleFactor,
  matrixWidth,
  matrixHeight,
  numRows,
  numCols
}) {
  let zoomedMouseY = null;
  let zoomedMouseX = null;
  if (rowI !== null) {
    const minY = -matrixHeight * scaleFactor / 2;
    const maxY = matrixHeight * scaleFactor / 2;
    const totalHeight = maxY - minY;
    const minInViewY = targetY * scaleFactor - matrixHeight / 2;
    const maxInViewY = targetY * scaleFactor + matrixHeight / 2;
    const inViewHeight = maxInViewY - minInViewY;
    const normalizedRowY = (rowI + 0.5) / numRows;
    const globalRowY = minY + normalizedRowY * totalHeight;
    if (minInViewY <= globalRowY && globalRowY <= maxInViewY) {
      zoomedMouseY = offsetTop + (globalRowY - minInViewY) / inViewHeight * matrixHeight;
    }
  }
  if (colI !== null) {
    const minX = -matrixWidth * scaleFactor / 2;
    const maxX = matrixWidth * scaleFactor / 2;
    const totalWidth = maxX - minX;
    const minInViewX = targetX * scaleFactor - matrixWidth / 2;
    const maxInViewX = targetX * scaleFactor + matrixWidth / 2;
    const inViewWidth = maxInViewX - minInViewX;
    const normalizedRowX = (colI + 0.5) / numCols;
    const globalRowX = minX + normalizedRowX * totalWidth;
    if (minInViewX <= globalRowX && globalRowX <= maxInViewX) {
      zoomedMouseX = offsetLeft + (globalRowX - minInViewX) / inViewWidth * matrixWidth;
    }
  }
  return [zoomedMouseX, zoomedMouseY];
}

// inline-worker:/home/runner/work/vitessce/vitessce/src/components/heatmap/heatmap.worker
var encodedJs2 = "";
var blob2 = typeof window !== "undefined" && window.Blob && new Blob([atob(encodedJs2)], { type: "text/javascript;charset=utf-8" });
function heatmap_default() {
  const objURL = blob2 && (window.URL || window.webkitURL).createObjectURL(blob2);
  try {
    return objURL ? new Worker(objURL) : new Worker("data:application/javascript;base64," + encodedJs2, { type: "module" });
  } finally {
    objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
  }
}

// src/Pool.js
var defaultPoolSize2 = typeof navigator !== "undefined" ? navigator.hardwareConcurrency || 4 : null;
var Pool2 = class {
  constructor(Worker2) {
    this.workers = [];
    this.idleWorkers = [];
    this.waitQueue = [];
    this.decoder = null;
    for (let i = 0; i < defaultPoolSize2; ++i) {
      const w = new Worker2();
      this.workers.push(w);
      this.idleWorkers.push(w);
    }
  }
  process() {
    return __async(this, null, function* () {
      throw new Error('Pool needs to implement "process" method');
    });
  }
  waitForWorker() {
    return __async(this, null, function* () {
      const idleWorker = this.idleWorkers.pop();
      if (idleWorker) {
        return idleWorker;
      }
      const waiter = {};
      const promise = new Promise((resolve) => {
        waiter.resolve = resolve;
      });
      this.waitQueue.push(waiter);
      return promise;
    });
  }
  finishTask(currentWorker) {
    return __async(this, null, function* () {
      const waiter = this.waitQueue.pop();
      if (waiter) {
        waiter.resolve(currentWorker);
      } else {
        this.idleWorkers.push(currentWorker);
      }
    });
  }
  destroy() {
    for (let i = 0; i < this.workers.length; ++i) {
      this.workers[i].terminate();
    }
  }
};

// src/components/heatmap/HeatmapWorkerPool.js
var HeatmapPool = class extends Pool2 {
  constructor() {
    super(heatmap_default);
  }
  process(args) {
    return __async(this, null, function* () {
      const currentWorker = yield this.waitForWorker();
      return new Promise((resolve, reject) => {
        currentWorker.onmessage = (event) => {
          this.finishTask(currentWorker);
          resolve(event.data);
        };
        currentWorker.onerror = (error) => {
          this.finishTask(currentWorker);
          reject(error);
        };
        currentWorker.postMessage(["getTile", args], [args.data]);
      });
    });
  }
};

// src/components/heatmap/Heatmap.js
var Heatmap = forwardRef((props, deckRef) => {
  const {
    uuid,
    theme,
    viewState: rawViewState,
    setViewState,
    width: viewWidth,
    height: viewHeight,
    expressionMatrix: expression,
    cellColors,
    colormap,
    colormapRange,
    clearPleaseWait,
    setComponentHover,
    setCellHighlight = createDefaultUpdateCellsHover("Heatmap"),
    setGeneHighlight = createDefaultUpdateGenesHover("Heatmap"),
    updateViewInfo = createDefaultUpdateViewInfo("Heatmap"),
    setIsRendering = () => {
    },
    transpose = false,
    variablesTitle = "Genes",
    observationsTitle = "Cells"
  } = props;
  const viewState = __spreadProps(__spreadValues({}, rawViewState), {
    target: transpose ? [rawViewState.target[1], rawViewState.target[0]] : rawViewState.target,
    minZoom: 0
  });
  const axisLeftTitle = transpose ? variablesTitle : observationsTitle;
  const axisTopTitle = transpose ? observationsTitle : variablesTitle;
  const workerPool = useMemo4(() => new HeatmapPool(), []);
  useEffect3(() => {
    if (clearPleaseWait && expression) {
      clearPleaseWait("expression-matrix");
    }
  }, [clearPleaseWait, expression]);
  const tilesRef = useRef4();
  const dataRef = useRef4();
  const [axisLeftLabels, setAxisLeftLabels] = useState5([]);
  const [axisTopLabels, setAxisTopLabels] = useState5([]);
  const [tileIteration, incTileIteration] = useReducer((i) => i + 1, 0);
  const [backlog, setBacklog] = useState5([]);
  useEffect3(() => {
    if (expression && expression.matrix) {
      dataRef.current = copyUint8Array(expression.matrix);
    }
  }, [dataRef, expression]);
  useEffect3(() => {
    if (!expression) {
      return;
    }
    const newCellOrdering = !cellColors || cellColors.size === 0 ? expression.rows : Array.from(cellColors.keys());
    const oldCellOrdering = transpose ? axisTopLabels : axisLeftLabels;
    if (!isEqual3(oldCellOrdering, newCellOrdering)) {
      if (transpose) {
        setAxisTopLabels(newCellOrdering);
      } else {
        setAxisLeftLabels(newCellOrdering);
      }
    }
  }, [expression, cellColors, axisTopLabels, axisLeftLabels, transpose]);
  useEffect3(() => {
    if (!expression) {
      return;
    }
    if (transpose) {
      setAxisLeftLabels(expression.cols);
    } else {
      setAxisTopLabels(expression.cols);
    }
  }, [expression, transpose]);
  const [cellLabelMaxLength, geneLabelMaxLength] = useMemo4(() => {
    if (!expression) {
      return [0, 0];
    }
    return [
      max(expression.rows.map((cellId) => cellId.length)),
      max(expression.cols.map((geneId) => geneId.length))
    ];
  }, [expression]);
  const width = axisTopLabels.length;
  const height = axisLeftLabels.length;
  const [axisOffsetLeft, axisOffsetTop] = getAxisSizes(transpose, geneLabelMaxLength, cellLabelMaxLength);
  const offsetTop = axisOffsetTop + COLOR_BAR_SIZE;
  const offsetLeft = axisOffsetLeft + COLOR_BAR_SIZE;
  const matrixWidth = viewWidth - offsetLeft;
  const matrixHeight = viewHeight - offsetTop;
  const matrixLeft = -matrixWidth / 2;
  const matrixRight = matrixWidth / 2;
  const matrixTop = -matrixHeight / 2;
  const matrixBottom = matrixHeight / 2;
  const xTiles = Math.ceil(width / TILE_SIZE);
  const yTiles = Math.ceil(height / TILE_SIZE);
  const widthRatio = 1 - (TILE_SIZE - width % TILE_SIZE) / (xTiles * TILE_SIZE);
  const heightRatio = 1 - (TILE_SIZE - height % TILE_SIZE) / (yTiles * TILE_SIZE);
  const tileWidth = matrixWidth / widthRatio / xTiles;
  const tileHeight = matrixHeight / heightRatio / yTiles;
  const scaleFactor = __pow(2, viewState.zoom);
  const cellHeight = matrixHeight * scaleFactor / height;
  const cellWidth = matrixWidth * scaleFactor / width;
  const aggSizeX = clamp2(__pow(2, Math.ceil(Math.log2(1 / cellWidth))), MIN_ROW_AGG, MAX_ROW_AGG);
  const aggSizeY = clamp2(__pow(2, Math.ceil(Math.log2(1 / cellHeight))), MIN_ROW_AGG, MAX_ROW_AGG);
  const [targetX, targetY] = viewState.target;
  useEffect3(() => {
    updateViewInfo({
      uuid,
      project: (cellId, geneId) => {
        const colI = transpose ? axisTopLabels.indexOf(cellId) : axisTopLabels.indexOf(geneId);
        const rowI = transpose ? axisLeftLabels.indexOf(geneId) : axisLeftLabels.indexOf(cellId);
        return heatmapToMousePosition(colI, rowI, {
          offsetLeft,
          offsetTop,
          targetX: viewState.target[0],
          targetY: viewState.target[1],
          scaleFactor,
          matrixWidth,
          matrixHeight,
          numRows: height,
          numCols: width
        });
      }
    });
  }, [
    uuid,
    updateViewInfo,
    transpose,
    axisTopLabels,
    axisLeftLabels,
    offsetLeft,
    offsetTop,
    viewState,
    scaleFactor,
    matrixWidth,
    matrixHeight,
    height,
    width
  ]);
  const onViewStateChange = useCallback3(({ viewState: nextViewState }) => {
    const { zoom: nextZoom } = nextViewState;
    const nextScaleFactor = __pow(2, nextZoom);
    const minTargetX = nextZoom === 0 ? 0 : -(matrixRight - matrixRight / nextScaleFactor);
    const maxTargetX = -1 * minTargetX;
    const minTargetY = nextZoom === 0 ? 0 : -(matrixBottom - matrixBottom / nextScaleFactor);
    const maxTargetY = -1 * minTargetY;
    const nextTarget = [
      clamp2(nextViewState.target[0], minTargetX, maxTargetX),
      clamp2(nextViewState.target[1], minTargetY, maxTargetY)
    ];
    setViewState({
      zoom: nextZoom,
      target: transpose ? [nextTarget[1], nextTarget[0]] : nextTarget
    });
  }, [matrixRight, matrixBottom, transpose, setViewState]);
  useEffect3(() => {
    if (!expression) {
      return;
    }
    if (axisTopLabels && axisLeftLabels && xTiles && yTiles) {
      setBacklog((prev) => [...prev, uuidv42()]);
    }
  }, [dataRef, expression, axisTopLabels, axisLeftLabels, xTiles, yTiles]);
  useEffect3(() => {
    if (backlog.length < 1) {
      return;
    }
    const curr = backlog[backlog.length - 1];
    if (dataRef.current && dataRef.current.buffer.byteLength) {
      const { rows, cols, matrix } = expression;
      const promises = range5(yTiles).map((i) => range5(xTiles).map((j) => __async(void 0, null, function* () {
        return workerPool.process({
          curr,
          tileI: i,
          tileJ: j,
          tileSize: TILE_SIZE,
          cellOrdering: transpose ? axisTopLabels : axisLeftLabels,
          rows,
          cols,
          transpose,
          data: matrix.buffer.slice()
        });
      })));
      const process2 = () => __async(void 0, null, function* () {
        const tiles = yield Promise.all(promises.flat());
        tilesRef.current = tiles.map((i) => i.tile);
        incTileIteration();
        dataRef.current = new Uint8Array(tiles[0].buffer);
        const { curr: currWork } = tiles[0];
        setBacklog((prev) => {
          const currIndex = prev.indexOf(currWork);
          return prev.slice(currIndex + 1, prev.length);
        });
      });
      process2();
    }
  }, [axisLeftLabels, axisTopLabels, backlog, expression, transpose, xTiles, yTiles, workerPool]);
  useEffect3(() => {
    setIsRendering(backlog.length > 0);
  }, [backlog, setIsRendering]);
  const heatmapLayers = useMemo4(() => {
    if (!tilesRef.current || backlog.length) {
      return [];
    }
    function getLayer(i, j, tile) {
      return new HeatmapBitmapLayer({
        id: `heatmapLayer-${tileIteration}-${i}-${j}`,
        image: tile,
        bounds: [
          matrixLeft + j * tileWidth,
          matrixTop + i * tileHeight,
          matrixLeft + (j + 1) * tileWidth,
          matrixTop + (i + 1) * tileHeight
        ],
        aggSizeX,
        aggSizeY,
        colormap,
        colorScaleLo: colormapRange[0],
        colorScaleHi: colormapRange[1],
        updateTriggers: {
          image: [axisLeftLabels, axisTopLabels],
          bounds: [tileHeight, tileWidth]
        }
      });
    }
    const layers2 = tilesRef.current.map((tile, index) => getLayer(Math.floor(index / xTiles), index % xTiles, tile));
    return layers2;
  }, [
    backlog,
    tileIteration,
    matrixLeft,
    tileWidth,
    matrixTop,
    tileHeight,
    aggSizeX,
    aggSizeY,
    colormap,
    colormapRange,
    axisLeftLabels,
    axisTopLabels,
    xTiles
  ]);
  const axisTopLabelData = useMemo4(() => axisTopLabels.map((d, i) => [i, d]), [axisTopLabels]);
  const axisLeftLabelData = useMemo4(() => axisLeftLabels.map((d, i) => [i, d]), [axisLeftLabels]);
  const textLayers = [
    new HeatmapCompositeTextLayer({
      targetX,
      targetY,
      scaleFactor,
      axisLeftLabelData,
      matrixTop,
      height,
      matrixHeight,
      cellHeight,
      cellWidth,
      axisTopLabelData,
      matrixLeft,
      width,
      matrixWidth,
      viewHeight,
      viewWidth,
      theme,
      axisLeftTitle,
      axisTopTitle,
      axisOffsetLeft,
      axisOffsetTop
    })
  ];
  const cellColorsTiles = useMemo4(() => {
    if (!cellColors) {
      return null;
    }
    let cellId;
    let offset;
    let color;
    let rowI;
    const cellOrdering = transpose ? axisTopLabels : axisLeftLabels;
    const colorBarTileWidthPx = transpose ? TILE_SIZE : 1;
    const colorBarTileHeightPx = transpose ? 1 : TILE_SIZE;
    const result = range5(transpose ? xTiles : yTiles).map((i) => {
      const tileData = new Uint8ClampedArray(TILE_SIZE * 1 * 4);
      range5(TILE_SIZE).forEach((tileY) => {
        rowI = i * TILE_SIZE + tileY;
        if (rowI < cellOrdering.length) {
          cellId = cellOrdering[rowI];
          color = cellColors.get(cellId);
          offset = (transpose ? tileY : TILE_SIZE - tileY - 1) * 4;
          if (color) {
            const [rValue, gValue, bValue] = color;
            tileData[offset + 0] = rValue;
            tileData[offset + 1] = gValue;
            tileData[offset + 2] = bValue;
            tileData[offset + 3] = 255;
          }
        }
      });
      return new ImageData(tileData, colorBarTileWidthPx, colorBarTileHeightPx);
    });
    return result;
  }, [cellColors, transpose, axisTopLabels, axisLeftLabels, xTiles, yTiles]);
  const cellColorsLayers = useMemo4(() => cellColorsTiles ? cellColorsTiles.map((tile, i) => new PixelatedBitmapLayer({
    id: `${transpose ? "colorsTopLayer" : "colorsLeftLayer"}-${i}-${uuidv42()}`,
    image: tile,
    bounds: transpose ? [
      matrixLeft + i * tileWidth,
      -matrixHeight / 2,
      matrixLeft + (i + 1) * tileWidth,
      matrixHeight / 2
    ] : [
      -matrixWidth / 2,
      matrixTop + i * tileHeight,
      matrixWidth / 2,
      matrixTop + (i + 1) * tileHeight
    ]
  })) : [], [
    cellColorsTiles,
    matrixTop,
    matrixLeft,
    matrixHeight,
    matrixWidth,
    tileWidth,
    tileHeight,
    transpose
  ]);
  const layers = heatmapLayers.concat(textLayers).concat(cellColorsLayers);
  function onHover(info, event) {
    if (!expression) {
      return;
    }
    const { x: mouseX, y: mouseY } = event.offsetCenter;
    const [colI, rowI] = mouseToHeatmapPosition(mouseX, mouseY, {
      offsetLeft,
      offsetTop,
      targetX,
      targetY,
      scaleFactor,
      matrixWidth,
      matrixHeight,
      numRows: height,
      numCols: width
    });
    if (colI === null) {
      if (transpose) {
        setCellHighlight(null);
      } else {
        setGeneHighlight(null);
      }
    }
    if (rowI === null) {
      if (transpose) {
        setGeneHighlight(null);
      } else {
        setCellHighlight(null);
      }
    }
    const obsI = expression.rows.indexOf(transpose ? axisTopLabels[colI] : axisLeftLabels[rowI]);
    const varI = expression.cols.indexOf(transpose ? axisLeftLabels[rowI] : axisTopLabels[colI]);
    const obsId = expression.rows[obsI];
    const varId = expression.cols[varI];
    if (setComponentHover) {
      setComponentHover();
    }
    setCellHighlight(obsId || null);
    setGeneHighlight(varId || null);
  }
  return /* @__PURE__ */ React6.createElement(DeckGL2, {
    id: `deckgl-overlay-${uuid}`,
    ref: deckRef,
    views: [
      new OrthographicView2({
        id: "heatmap",
        controller: true,
        x: offsetLeft,
        y: offsetTop,
        width: matrixWidth,
        height: matrixHeight
      }),
      new OrthographicView2({
        id: "axisLeft",
        controller: false,
        x: transpose ? COLOR_BAR_SIZE : 0,
        y: offsetTop,
        width: axisOffsetLeft,
        height: matrixHeight
      }),
      new OrthographicView2({
        id: "axisTop",
        controller: false,
        x: offsetLeft,
        y: transpose ? 0 : COLOR_BAR_SIZE,
        width: matrixWidth,
        height: axisOffsetTop
      }),
      new OrthographicView2({
        id: "colorsLeft",
        controller: false,
        x: axisOffsetLeft,
        y: offsetTop,
        width: COLOR_BAR_SIZE - AXIS_MARGIN,
        height: matrixHeight
      }),
      new OrthographicView2({
        id: "colorsTop",
        controller: false,
        x: offsetLeft,
        y: axisOffsetTop,
        width: matrixWidth,
        height: COLOR_BAR_SIZE - AXIS_MARGIN
      })
    ],
    layers,
    layerFilter,
    getCursor: (interactionState) => interactionState.isDragging ? "grabbing" : "default",
    glOptions: DEFAULT_GL_OPTIONS,
    onViewStateChange,
    viewState,
    onHover
  });
});
var Heatmap_default = Heatmap;

// src/components/heatmap/HeatmapTooltipSubscriber.js
import React10 from "react";

// src/components/tooltip/Tooltip2D.js
import React8 from "react";

// src/components/tooltip/Tooltip.js
import React7, { useEffect as useEffect4, useRef as useRef5, useState as useState6 } from "react";
import Paper2 from "@material-ui/core/Paper";
import Popper2 from "@material-ui/core/Popper";

// src/components/tooltip/styles.js
import { makeStyles as makeStyles3 } from "@material-ui/core/styles";
var styles2 = makeStyles3(() => ({
  tooltipAnchor: {
    position: "relative",
    width: "0px",
    height: "0px",
    pointerEvents: "none",
    userSelect: "none"
  },
  tooltipContent: {
    opacity: 0.9,
    padding: "5px",
    pointerEvents: "none",
    "& table > tbody > tr > th, & table > tbody > tr > td": {
      fontSize: "80%",
      opacity: 0.8,
      outline: 0,
      padding: "0 2px"
    },
    "& table": {
      borderCollapse: "collapse"
    }
  }
}));

// src/components/tooltip/Tooltip.js
function Tooltip(props) {
  const {
    x,
    y,
    parentWidth,
    parentHeight,
    children
  } = props;
  const ref = useRef5();
  const classes = styles2();
  const [placementX, setPlacementX] = useState6("start");
  const [placementY, setPlacementY] = useState6("bottom");
  const getTooltipContainer = useVitessceContainer(ref);
  useEffect4(() => {
    if (ref && ref.current) {
      const flipX = x > parentWidth / 2;
      const flipY = y > parentHeight / 2;
      setPlacementX(flipX ? "end" : "start");
      setPlacementY(flipY ? "top" : "bottom");
      ref.current.style.left = `${x + (flipX ? -20 : 5)}px`;
      ref.current.style.top = `${y + (flipY ? -20 : 5)}px`;
    }
  }, [x, y, parentWidth, parentHeight]);
  return /* @__PURE__ */ React7.createElement("div", {
    ref,
    className: classes.tooltipAnchor
  }, ref && ref.current ? /* @__PURE__ */ React7.createElement(Popper2, {
    open: true,
    anchorEl: ref.current,
    container: getTooltipContainer,
    transition: true,
    placement: `${placementY}-${placementX}`
  }, /* @__PURE__ */ React7.createElement(Paper2, {
    elevation: 4,
    className: classes.tooltipContent
  }, children)) : null);
}

// src/components/tooltip/Tooltip2D.js
function Tooltip2D(props) {
  const {
    parentUuid,
    sourceUuid,
    x,
    y,
    parentWidth,
    parentHeight,
    children
  } = props;
  if (x < 0 || x > parentWidth || y < 0 || y > parentHeight) {
    return null;
  }
  const isTooltipVisible = parentUuid === sourceUuid;
  const crosshairWidth = 1;
  return /* @__PURE__ */ React8.createElement(React8.Fragment, null, isTooltipVisible ? /* @__PURE__ */ React8.createElement(Tooltip, {
    x,
    y,
    parentWidth,
    parentHeight
  }, children) : /* @__PURE__ */ React8.createElement(React8.Fragment, null, x !== null ? /* @__PURE__ */ React8.createElement("div", {
    className: "cell-emphasis-crosshair",
    style: {
      left: `${x - crosshairWidth / 2}px`,
      top: 0,
      width: `${crosshairWidth}px`,
      height: `${parentHeight}px`
    }
  }) : null, y !== null ? /* @__PURE__ */ React8.createElement("div", {
    className: "cell-emphasis-crosshair",
    style: {
      left: 0,
      top: `${y - crosshairWidth / 2}px`,
      width: `${parentWidth}px`,
      height: `${crosshairWidth}px`
    }
  }) : null));
}

// src/components/tooltip/TooltipContent.js
import React9 from "react";
function TooltipContent(props) {
  const {
    info
  } = props;
  return /* @__PURE__ */ React9.createElement("table", null, /* @__PURE__ */ React9.createElement("tbody", null, Object.entries(info).map(([key, value]) => /* @__PURE__ */ React9.createElement("tr", {
    key
  }, /* @__PURE__ */ React9.createElement("th", null, key), /* @__PURE__ */ React9.createElement("td", null, value)))));
}

// src/components/heatmap/HeatmapTooltipSubscriber.js
function HeatmapTooltipSubscriber(props) {
  const {
    parentUuid,
    width,
    height,
    transpose,
    getCellInfo,
    getGeneInfo,
    cellHighlight,
    geneHighlight
  } = props;
  const sourceUuid = useComponentHover();
  const viewInfo = useComponentViewInfo(parentUuid);
  const [cellInfo, cellCoord] = cellHighlight && getCellInfo ? [
    getCellInfo(cellHighlight),
    viewInfo && viewInfo.project ? viewInfo.project(cellHighlight, null)[transpose ? 0 : 1] : null
  ] : [null, null];
  const [geneInfo, geneCoord] = geneHighlight && getGeneInfo ? [
    getGeneInfo(geneHighlight),
    viewInfo && viewInfo.project ? viewInfo.project(null, geneHighlight)[transpose ? 1 : 0] : null
  ] : [null, null];
  const x = transpose ? cellCoord : geneCoord;
  const y = transpose ? geneCoord : cellCoord;
  return cellInfo || geneInfo ? /* @__PURE__ */ React10.createElement(Tooltip2D, {
    x,
    y,
    parentUuid,
    parentWidth: width,
    parentHeight: height,
    sourceUuid
  }, /* @__PURE__ */ React10.createElement(TooltipContent, {
    info: __spreadValues(__spreadValues({}, geneInfo), cellInfo)
  })) : null;
}

// src/components/heatmap/HeatmapOptions.js
import React13, { useCallback as useCallback4 } from "react";
import debounce2 from "lodash/debounce";
import Slider from "@material-ui/core/Slider";
import TableCell from "@material-ui/core/TableCell";
import TableRow from "@material-ui/core/TableRow";

// src/components/shared-plot-options/styles.js
import { makeStyles as makeStyles4 } from "@material-ui/core/styles";
var useStyles2 = makeStyles4((theme) => ({
  box: {
    boxSizing: "border-box"
  },
  checkbox: {
    padding: "3px",
    color: theme.palette.primaryForeground,
    "&:checked": {
      color: theme.palette.primaryForeground
    },
    "& input": {
      height: "100%"
    }
  },
  slider: {
    color: theme.palette.primaryForeground,
    minWidth: "60px",
    padding: "10px 0 10px 0"
  },
  sliderValueLabel: {
    "& span": {
      "& span": {
        color: theme.palette.primaryBackground
      }
    }
  },
  tableContainer: {
    overflow: "hidden",
    overflowX: "hidden !important"
  },
  labelCell: {
    padding: "2px 8px 2px 16px"
  },
  inputCell: {
    padding: "2px 16px 2px 8px",
    overflow: "visible"
  },
  select: {
    "& select": {
      fontSize: ".875rem"
    }
  },
  selectRoot: {
    padding: 0,
    height: "auto"
  }
}));

// src/components/shared-plot-options/OptionsContainer.js
import React11 from "react";
import Box from "@material-ui/core/Box";
import Table from "@material-ui/core/Table";
import TableBody from "@material-ui/core/TableBody";
import TableContainer from "@material-ui/core/TableContainer";
function OptionsContainer(props) {
  const {
    children
  } = props;
  const classes = useStyles2();
  return /* @__PURE__ */ React11.createElement(Box, {
    className: classes.box
  }, /* @__PURE__ */ React11.createElement(TableContainer, {
    className: classes.tableContainer
  }, /* @__PURE__ */ React11.createElement(Table, {
    className: classes.table,
    size: "small"
  }, /* @__PURE__ */ React11.createElement(TableBody, null, children))));
}

// src/components/shared-plot-options/OptionSelect.js
import React12 from "react";
import Select from "@material-ui/core/Select";
function OptionSelect(props) {
  const { classes: classesProp = {} } = props;
  const classes = useStyles2();
  return /* @__PURE__ */ React12.createElement(Select, __spreadProps(__spreadValues({
    native: true,
    disableUnderline: true
  }, props), {
    classes: __spreadValues({
      root: classes.selectRoot
    }, classesProp)
  }));
}

// src/components/heatmap/HeatmapOptions.js
function HeatmapOptions(props) {
  const {
    geneExpressionColormap,
    setGeneExpressionColormap,
    geneExpressionColormapRange,
    setGeneExpressionColormapRange
  } = props;
  const classes = useStyles2();
  function handleGeneExpressionColormapChange(event) {
    setGeneExpressionColormap(event.target.value);
  }
  function handleColormapRangeChange(event, value) {
    setGeneExpressionColormapRange(value);
  }
  const handleColormapRangeChangeDebounced = useCallback4(debounce2(handleColormapRangeChange, 5, { trailing: true }), [handleColormapRangeChange]);
  return /* @__PURE__ */ React13.createElement(OptionsContainer, null, /* @__PURE__ */ React13.createElement(TableRow, null, /* @__PURE__ */ React13.createElement(TableCell, {
    className: classes.labelCell,
    htmlFor: "gene-expression-colormap-select"
  }, "Gene Expression Colormap"), /* @__PURE__ */ React13.createElement(TableCell, {
    className: classes.inputCell
  }, /* @__PURE__ */ React13.createElement(OptionSelect, {
    className: classes.select,
    value: geneExpressionColormap,
    onChange: handleGeneExpressionColormapChange,
    inputProps: {
      id: "gene-expression-colormap-select"
    }
  }, GLSL_COLORMAPS.map((cmap) => /* @__PURE__ */ React13.createElement("option", {
    key: cmap,
    value: cmap
  }, cmap))))), /* @__PURE__ */ React13.createElement(TableRow, null, /* @__PURE__ */ React13.createElement(TableCell, {
    className: classes.labelCell
  }, "Gene Expression Colormap Range"), /* @__PURE__ */ React13.createElement(TableCell, {
    className: classes.inputCell
  }, /* @__PURE__ */ React13.createElement(Slider, {
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: geneExpressionColormapRange,
    onChange: handleColormapRangeChangeDebounced,
    "aria-labelledby": "gene-expression-colormap-range-slider",
    valueLabelDisplay: "auto",
    step: 5e-3,
    min: 0,
    max: 1
  }))));
}

// src/components/heatmap/HeatmapSubscriber.js
var HEATMAP_DATA_TYPES = ["cells", "cell-sets", "expression-matrix"];
function HeatmapSubscriber(props) {
  const {
    uuid,
    coordinationScopes,
    removeGridComponent,
    theme,
    transpose,
    observationsLabelOverride: observationsLabel = "cell",
    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,
    variablesLabelOverride: variablesLabel = "gene",
    variablesPluralLabelOverride: variablesPluralLabel = `${variablesLabel}s`,
    disableTooltip = false,
    title: title16 = "Heatmap"
  } = props;
  const loaders = useLoaders();
  const setComponentHover = useSetComponentHover();
  const setComponentViewInfo = useSetComponentViewInfo(uuid);
  const [{
    dataset,
    heatmapZoomX: zoomX,
    heatmapTargetX: targetX,
    heatmapTargetY: targetY,
    geneSelection,
    cellHighlight,
    geneHighlight,
    cellSetSelection,
    cellSetColor,
    additionalCellSets,
    geneExpressionColormap,
    geneExpressionColormapRange
  }, {
    setHeatmapZoomX: setZoomX,
    setHeatmapZoomY: setZoomY,
    setHeatmapTargetX: setTargetX,
    setHeatmapTargetY: setTargetY,
    setCellHighlight,
    setGeneHighlight,
    setCellSetSelection,
    setCellSetColor,
    setGeneExpressionColormapRange,
    setGeneExpressionColormap
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.heatmap, coordinationScopes);
  const observationsTitle = capitalize(observationsPluralLabel);
  const variablesTitle = capitalize(variablesPluralLabel);
  const [isRendering, setIsRendering] = useState7(false);
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(HEATMAP_DATA_TYPES);
  const [urls, addUrl, resetUrls] = useUrls();
  const [width, height, deckRef] = useDeckCanvasSize();
  useEffect5(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [cells] = useCellsData(loaders, dataset, setItemIsReady, addUrl, true);
  const [expressionMatrix] = useExpressionMatrixData(loaders, dataset, setItemIsReady, addUrl, true);
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, false, { setCellSetSelection, setCellSetColor }, { cellSetSelection, cellSetColor });
  const mergedCellSets = useMemo5(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const cellColors = useMemo5(() => getCellColors({
    cellColorEncoding: "cellSetSelection",
    geneSelection,
    cellSets: mergedCellSets,
    cellSetSelection,
    cellSetColor,
    expressionDataAttrs: expressionMatrix,
    theme
  }), [
    mergedCellSets,
    geneSelection,
    theme,
    cellSetColor,
    cellSetSelection,
    expressionMatrix
  ]);
  const getCellInfo = useCallback5((cellId) => {
    if (cellId) {
      const cellInfo = cells[cellId];
      return __spreadValues({
        [`${capitalize(observationsLabel)} ID`]: cellId
      }, cellInfo ? cellInfo.factors : {});
    }
    return null;
  }, [cells, observationsLabel]);
  const getGeneInfo = useCallback5((geneId) => {
    if (geneId) {
      return { [`${capitalize(variablesLabel)} ID`]: geneId };
    }
    return null;
  }, [variablesLabel]);
  const cellsCount = expressionMatrix && expressionMatrix.rows ? expressionMatrix.rows.length : 0;
  const genesCount = expressionMatrix && expressionMatrix.cols ? expressionMatrix.cols.length : 0;
  const selectedCount = cellColors.size;
  return /* @__PURE__ */ React14.createElement(TitleInfo, {
    title: title16,
    info: `${cellsCount} ${pluralize(observationsLabel, observationsPluralLabel, cellsCount)} \xD7 ${genesCount} ${pluralize(variablesLabel, variablesPluralLabel, genesCount)},
             with ${selectedCount} ${pluralize(observationsLabel, observationsPluralLabel, selectedCount)} selected`,
    urls,
    theme,
    removeGridComponent,
    isReady: isReady && !isRendering,
    options: /* @__PURE__ */ React14.createElement(HeatmapOptions, {
      geneExpressionColormap,
      setGeneExpressionColormap,
      geneExpressionColormapRange,
      setGeneExpressionColormapRange
    })
  }, /* @__PURE__ */ React14.createElement(Heatmap_default, {
    ref: deckRef,
    transpose,
    viewState: { zoom: zoomX, target: [targetX, targetY] },
    setViewState: ({ zoom, target }) => {
      setZoomX(zoom);
      setZoomY(zoom);
      setTargetX(target[0]);
      setTargetY(target[1]);
    },
    colormapRange: geneExpressionColormapRange,
    setColormapRange: setGeneExpressionColormapRange,
    height,
    width,
    theme,
    uuid,
    expressionMatrix,
    cellColors,
    colormap: geneExpressionColormap,
    setIsRendering,
    setCellHighlight,
    setGeneHighlight,
    setComponentHover: () => {
      setComponentHover(uuid);
    },
    updateViewInfo: setComponentViewInfo,
    observationsTitle,
    variablesTitle
  }), !disableTooltip && /* @__PURE__ */ React14.createElement(HeatmapTooltipSubscriber, {
    parentUuid: uuid,
    width,
    height,
    transpose,
    getCellInfo,
    getGeneInfo,
    cellHighlight,
    geneHighlight
  }));
}

// src/components/spatial/SpatialSubscriber.js
import React24, { useEffect as useEffect6, useMemo as useMemo6, useCallback as useCallback7 } from "react";

// src/components/spatial/Spatial.js
import React20, { forwardRef as forwardRef2 } from "react";
import isEqual5 from "lodash/isEqual";
import { COORDINATE_SYSTEM as COORDINATE_SYSTEM5 } from "@deck.gl/core";
import { PolygonLayer as PolygonLayer2, ScatterplotLayer as ScatterplotLayer2 } from "@deck.gl/layers";
import { Matrix4 as Matrix44 } from "math.gl";

// src/layers/selection-utils.js
import { COORDINATE_SYSTEM as COORDINATE_SYSTEM4 } from "@deck.gl/core";
import { DataFilterExtension } from "@deck.gl/extensions";

// src/layers/SelectionLayer.js
import { CompositeLayer as CompositeLayer4 } from "deck.gl";
import { polygon as turfPolygon, point as turfPoint2 } from "@turf/helpers";
import booleanWithin from "@turf/boolean-within";
import booleanContains from "@turf/boolean-contains";
import booleanOverlap from "@turf/boolean-overlap";
import booleanPointInPolygon from "@turf/boolean-point-in-polygon";
import { ScatterplotLayer } from "@deck.gl/layers";
import { SELECTION_TYPE } from "nebula.gl";
import { EditableGeoJsonLayer } from "@nebula.gl/layers";
import { DrawRectangleMode, DrawPolygonByDraggingMode, ViewMode } from "@nebula.gl/edit-modes";
var EDIT_TYPE_ADD = "addFeature";
var EDIT_TYPE_CLEAR = "clearFeatures";
var ClickableDrawRectangleMode = class extends DrawRectangleMode {
  handleClick(event, props) {
    props.onEdit({ editType: EDIT_TYPE_CLEAR });
  }
};
var ClickableDrawPolygonByDraggingMode = class extends DrawPolygonByDraggingMode {
  handleClick(event, props) {
    props.onEdit({ editType: EDIT_TYPE_CLEAR });
  }
};
var MODE_MAP = {
  [SELECTION_TYPE.RECTANGLE]: ClickableDrawRectangleMode,
  [SELECTION_TYPE.POLYGON]: ClickableDrawPolygonByDraggingMode
};
var defaultProps4 = {
  selectionType: SELECTION_TYPE.RECTANGLE,
  layerIds: [],
  onSelect: () => {
  }
};
var EMPTY_DATA = {
  type: "FeatureCollection",
  features: []
};
var LAYER_ID_GEOJSON = "selection-geojson";
var PASS_THROUGH_PROPS = [
  "lineWidthScale",
  "lineWidthMinPixels",
  "lineWidthMaxPixels",
  "lineWidthUnits",
  "lineJointRounded",
  "lineMiterLimit",
  "pointRadiusScale",
  "pointRadiusMinPixels",
  "pointRadiusMaxPixels",
  "lineDashJustified",
  "getLineColor",
  "getFillColor",
  "getRadius",
  "getLineWidth",
  "getLineDashArray",
  "getTentativeLineDashArray",
  "getTentativeLineColor",
  "getTentativeFillColor",
  "getTentativeLineWidth",
  "editHandlePointRadiusScale",
  "editHandlePointRadiusMinPixels",
  "editHandlePointRadiusMaxPixels",
  "getEditHandlePointColor",
  "getEditHandlePointRadius",
  "modeHandlers"
];
var SelectionLayer = class extends CompositeLayer4 {
  _selectPolygonObjects(coordinates) {
    const {
      onSelect,
      getCellCoords,
      cellsQuadTree,
      flipY
    } = this.props;
    const flippedCoordinates = flipY ? coordinates.map((poly) => poly.map((p) => [p[0], -p[1]])) : coordinates;
    const selectedPolygon = turfPolygon(flippedCoordinates);
    const pickingInfos = [];
    cellsQuadTree.visit((node, x0, y0, x1, y1) => {
      const nodePoints = [[[x0, y0], [x1, y0], [x1, y1], [x0, y1], [x0, y0]]];
      const nodePolygon = turfPolygon(nodePoints);
      const nodePolygonContainsSelectedPolygon = booleanContains(nodePolygon, selectedPolygon);
      const nodePolygonWithinSelectedPolygon = booleanWithin(nodePolygon, selectedPolygon);
      const nodePolygonOverlapsSelectedPolgyon = booleanOverlap(nodePolygon, selectedPolygon);
      if (!nodePolygonContainsSelectedPolygon && !nodePolygonWithinSelectedPolygon && !nodePolygonOverlapsSelectedPolgyon) {
        return true;
      }
      if (node.data && booleanPointInPolygon(turfPoint([].slice.call(getCellCoords(node.data[1]))), selectedPolygon,)
      ) {
        pickingInfos.push(node.data);
      }
      return false;
    });
    onSelect({ pickingInfos });
  }
  renderLayers() {
    const { onSelect } = this.props;
    const mode = MODE_MAP[this.props.selectionType] || ViewMode;
    const inheritedProps = {};
    PASS_THROUGH_PROPS.forEach((p) => {
      if (this.props[p] !== void 0)
        inheritedProps[p] = this.props[p];
    });
    const layers = [
      new EditableGeoJsonLayer(this.getSubLayerProps(__spreadValues({
        id: LAYER_ID_GEOJSON,
        pickable: true,
        mode,
        modeConfig: {
          dragToDraw: true
        },
        selectedFeatureIndexes: [],
        data: EMPTY_DATA,
        onEdit: ({ updatedData, editType }) => {
          if (editType === EDIT_TYPE_ADD) {
            const { coordinates } = updatedData.features[0].geometry;
            this._selectPolygonObjects(coordinates);
          } else if (editType === EDIT_TYPE_CLEAR) {
            onSelect({ pickingInfos: [] });
          }
        },
        _subLayerProps: {
          guides: {
            pointType: "circle",
            _subLayerProps: {
              "points-circle": {
                type: ScatterplotLayer,
                radiusScale: 1,
                stroked: true,
                getLineWidth: 1,
                radiusMinPixels: 1,
                radiusMaxPixels: 3,
                getRadius: 2
              }
            }
          }
        }
      }, inheritedProps)))
    ];
    return layers;
  }
};
SelectionLayer.layerName = "SelectionLayer";
SelectionLayer.defaultProps = defaultProps4;

// src/layers/selection-utils.js
function getBaseLayerId(layerId) {
  return `base-${layerId}`;
}
function getSelectionLayers(tool, zoom, layerId, getCellCoords, updateCellsSelection, cellsQuadTree, flipY = false) {
  if (!tool) {
    return [];
  }
  const cellBaseLayerId = getBaseLayerId(layerId);
  const editHandlePointRadius = 5 / (zoom + 16);
  return [new SelectionLayer({
    id: "selection",
    flipY,
    cellsQuadTree,
    getCellCoords,
    coordinateSystem: COORDINATE_SYSTEM4.CARTESIAN,
    selectionType: tool,
    onSelect: ({ pickingInfos }) => {
      const cellIds = pickingInfos.map((cellObj) => cellObj[0]);
      if (updateCellsSelection) {
        updateCellsSelection(cellIds);
      }
    },
    layerIds: [cellBaseLayerId],
    getTentativeFillColor: () => [255, 255, 255, 95],
    getTentativeLineColor: () => [143, 143, 143, 255],
    getTentativeLineDashArray: () => [7, 4],
    lineWidthMinPixels: 2,
    lineWidthMaxPixels: 2,
    getEditHandlePointColor: () => [255, 255, 255, 255],
    getEditHandlePointRadius: () => editHandlePointRadius,
    editHandlePointRadiusScale: 1,
    editHandlePointRadiusMinPixels: editHandlePointRadius,
    editHandlePointRadiusMaxPixels: 2 * editHandlePointRadius
  })];
}

// src/components/spatial/utils.js
import shortNumber from "short-number";
import isEqual4 from "lodash/isEqual";
import { extent } from "d3-array";
import { Matrix4 as Matrix43 } from "math.gl";
import { divide, compare, unit } from "mathjs";

// src/layers/BitmaskLayer.js
import GL4 from "@luma.gl/constants";
import { project32 as project323, picking as picking3 } from "@deck.gl/core";
import { Texture2D as Texture2D3, isWebGL2 as isWebGL22 } from "@luma.gl/core";

// src/layers/bitmask-layer-shaders.js
var vs3 = "\n#define SHADER_NAME bitmask-layer-vertex-shader\n\nattribute vec2 texCoords;\nattribute vec3 positions;\nattribute vec3 positions64Low;\nattribute vec3 instancePickingColors;\n\nvarying vec2 vTexCoord;\n\nvoid main(void) {\n  geometry.worldPosition = positions;\n  geometry.uv = texCoords;\n  geometry.pickingColor = instancePickingColors;\n  gl_Position = project_position_to_clipspace(positions, positions64Low, vec3(0.0), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  vTexCoord = texCoords;\n  vec4 color = vec4(0.0);\n  DECKGL_FILTER_COLOR(color, geometry);\n}\n";
var fs3 = "\n#define SHADER_NAME bitmask-layer-fragment-shader\nprecision highp float;\n\nvec4 plasma (float x_1306414511) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);\n  float a0 = smoothstep(e0,e1,x_1306414511);\n  float a1 = smoothstep(e1,e2,x_1306414511);\n  float a2 = smoothstep(e2,e3,x_1306414511);\n  float a3 = smoothstep(e3,e4,x_1306414511);\n  float a4 = smoothstep(e4,e5,x_1306414511);\n  float a5 = smoothstep(e5,e6,x_1306414511);\n  float a6 = smoothstep(e6,e7,x_1306414511);\n  float a7 = smoothstep(e7,e8,x_1306414511);\n  return max(mix(v0,v1,a0)*step(e0,x_1306414511)*step(x_1306414511,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1306414511)*step(x_1306414511,e2),\n    max(mix(v2,v3,a2)*step(e2,x_1306414511)*step(x_1306414511,e3),\n    max(mix(v3,v4,a3)*step(e3,x_1306414511)*step(x_1306414511,e4),\n    max(mix(v4,v5,a4)*step(e4,x_1306414511)*step(x_1306414511,e5),\n    max(mix(v5,v6,a5)*step(e5,x_1306414511)*step(x_1306414511,e6),\n    max(mix(v6,v7,a6)*step(e6,x_1306414511)*step(x_1306414511,e7),mix(v7,v8,a7)*step(e7,x_1306414511)*step(x_1306414511,e8)\n  )))))));\n}\n\nvec4 viridis (float x_1870111103) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);\n  float a0 = smoothstep(e0,e1,x_1870111103);\n  float a1 = smoothstep(e1,e2,x_1870111103);\n  float a2 = smoothstep(e2,e3,x_1870111103);\n  float a3 = smoothstep(e3,e4,x_1870111103);\n  float a4 = smoothstep(e4,e5,x_1870111103);\n  float a5 = smoothstep(e5,e6,x_1870111103);\n  float a6 = smoothstep(e6,e7,x_1870111103);\n  float a7 = smoothstep(e7,e8,x_1870111103);\n  return max(mix(v0,v1,a0)*step(e0,x_1870111103)*step(x_1870111103,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1870111103)*step(x_1870111103,e2),\n    max(mix(v2,v3,a2)*step(e2,x_1870111103)*step(x_1870111103,e3),\n    max(mix(v3,v4,a3)*step(e3,x_1870111103)*step(x_1870111103,e4),\n    max(mix(v4,v5,a4)*step(e4,x_1870111103)*step(x_1870111103,e5),\n    max(mix(v5,v6,a5)*step(e5,x_1870111103)*step(x_1870111103,e6),\n    max(mix(v6,v7,a6)*step(e6,x_1870111103)*step(x_1870111103,e7),mix(v7,v8,a7)*step(e7,x_1870111103)*step(x_1870111103,e8)\n  )))))));\n}\n\nvec4 greys (float x_1268378094) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_1268378094);\n  return mix(v0,v1,a0)*step(e0,x_1268378094)*step(x_1268378094,e1);\n}\n\nvec4 magma (float x_2443053725) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);\n  float a0 = smoothstep(e0,e1,x_2443053725);\n  float a1 = smoothstep(e1,e2,x_2443053725);\n  float a2 = smoothstep(e2,e3,x_2443053725);\n  float a3 = smoothstep(e3,e4,x_2443053725);\n  float a4 = smoothstep(e4,e5,x_2443053725);\n  float a5 = smoothstep(e5,e6,x_2443053725);\n  float a6 = smoothstep(e6,e7,x_2443053725);\n  float a7 = smoothstep(e7,e8,x_2443053725);\n  return max(mix(v0,v1,a0)*step(e0,x_2443053725)*step(x_2443053725,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2443053725)*step(x_2443053725,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2443053725)*step(x_2443053725,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2443053725)*step(x_2443053725,e4),\n    max(mix(v4,v5,a4)*step(e4,x_2443053725)*step(x_2443053725,e5),\n    max(mix(v5,v6,a5)*step(e5,x_2443053725)*step(x_2443053725,e6),\n    max(mix(v6,v7,a6)*step(e6,x_2443053725)*step(x_2443053725,e7),mix(v7,v8,a7)*step(e7,x_2443053725)*step(x_2443053725,e8)\n  )))))));\n}\n\nvec4 jet (float x_623120303) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.5137254901960784,1);\n  const float e1 = 0.125;\n  const vec4 v1 = vec4(0,0.23529411764705882,0.6666666666666666,1);\n  const float e2 = 0.375;\n  const vec4 v2 = vec4(0.0196078431372549,1,1,1);\n  const float e3 = 0.625;\n  const vec4 v3 = vec4(1,1,0,1);\n  const float e4 = 0.875;\n  const vec4 v4 = vec4(0.9803921568627451,0,0,1);\n  const float e5 = 1.0;\n  const vec4 v5 = vec4(0.5019607843137255,0,0,1);\n  float a0 = smoothstep(e0,e1,x_623120303);\n  float a1 = smoothstep(e1,e2,x_623120303);\n  float a2 = smoothstep(e2,e3,x_623120303);\n  float a3 = smoothstep(e3,e4,x_623120303);\n  float a4 = smoothstep(e4,e5,x_623120303);\n  return max(mix(v0,v1,a0)*step(e0,x_623120303)*step(x_623120303,e1),\n    max(mix(v1,v2,a1)*step(e1,x_623120303)*step(x_623120303,e2),\n    max(mix(v2,v3,a2)*step(e2,x_623120303)*step(x_623120303,e3),\n    max(mix(v3,v4,a3)*step(e3,x_623120303)*step(x_623120303,e4),mix(v4,v5,a4)*step(e4,x_623120303)*step(x_623120303,e5)\n  ))));\n}\n\nvec4 bone (float x_783795047) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.376;\n  const vec4 v1 = vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);\n  const float e2 = 0.753;\n  const vec4 v2 = vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_783795047);\n  float a1 = smoothstep(e1,e2,x_783795047);\n  float a2 = smoothstep(e2,e3,x_783795047);\n  return max(mix(v0,v1,a0)*step(e0,x_783795047)*step(x_783795047,e1),\n    max(mix(v1,v2,a1)*step(e1,x_783795047)*step(x_783795047,e2),mix(v2,v3,a2)*step(e2,x_783795047)*step(x_783795047,e3)\n  ));\n}\n\nvec4 copper (float x_3932431844) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.804;\n  const vec4 v1 = vec4(1,0.6274509803921569,0.4,1);\n  const float e2 = 1.0;\n  const vec4 v2 = vec4(1,0.7803921568627451,0.4980392156862745,1);\n  float a0 = smoothstep(e0,e1,x_3932431844);\n  float a1 = smoothstep(e1,e2,x_3932431844);\n  return max(mix(v0,v1,a0)*step(e0,x_3932431844)*step(x_3932431844,e1),mix(v1,v2,a1)*step(e1,x_3932431844)*step(x_3932431844,e2)\n  );\n}\n\nvec4 density (float x_2921433544) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);\n  float a0 = smoothstep(e0,e1,x_2921433544);\n  float a1 = smoothstep(e1,e2,x_2921433544);\n  float a2 = smoothstep(e2,e3,x_2921433544);\n  float a3 = smoothstep(e3,e4,x_2921433544);\n  float a4 = smoothstep(e4,e5,x_2921433544);\n  float a5 = smoothstep(e5,e6,x_2921433544);\n  float a6 = smoothstep(e6,e7,x_2921433544);\n  float a7 = smoothstep(e7,e8,x_2921433544);\n  return max(mix(v0,v1,a0)*step(e0,x_2921433544)*step(x_2921433544,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2921433544)*step(x_2921433544,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2921433544)*step(x_2921433544,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2921433544)*step(x_2921433544,e4),\n    max(mix(v4,v5,a4)*step(e4,x_2921433544)*step(x_2921433544,e5),\n    max(mix(v5,v6,a5)*step(e5,x_2921433544)*step(x_2921433544,e6),\n    max(mix(v6,v7,a6)*step(e6,x_2921433544)*step(x_2921433544,e7),mix(v7,v8,a7)*step(e7,x_2921433544)*step(x_2921433544,e8)\n  )))))));\n}\n\nvec4 inferno (float x_1987546174) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8901960784313725,0.34901960784313724,0.2,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,1,0.6431372549019608,1);\n  float a0 = smoothstep(e0,e1,x_1987546174);\n  float a1 = smoothstep(e1,e2,x_1987546174);\n  float a2 = smoothstep(e2,e3,x_1987546174);\n  float a3 = smoothstep(e3,e4,x_1987546174);\n  float a4 = smoothstep(e4,e5,x_1987546174);\n  float a5 = smoothstep(e5,e6,x_1987546174);\n  float a6 = smoothstep(e6,e7,x_1987546174);\n  float a7 = smoothstep(e7,e8,x_1987546174);\n  return max(mix(v0,v1,a0)*step(e0,x_1987546174)*step(x_1987546174,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1987546174)*step(x_1987546174,e2),\n    max(mix(v2,v3,a2)*step(e2,x_1987546174)*step(x_1987546174,e3),\n    max(mix(v3,v4,a3)*step(e3,x_1987546174)*step(x_1987546174,e4),\n    max(mix(v4,v5,a4)*step(e4,x_1987546174)*step(x_1987546174,e5),\n    max(mix(v5,v6,a5)*step(e5,x_1987546174)*step(x_1987546174,e6),\n    max(mix(v6,v7,a6)*step(e6,x_1987546174)*step(x_1987546174,e7),mix(v7,v8,a7)*step(e7,x_1987546174)*step(x_1987546174,e8)\n  )))))));\n}\n\nvec4 cool (float x_761030515) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.49019607843137253,0,0.7019607843137254,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.4549019607843137,0,0.8549019607843137,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0,0.8,0.7725490196078432,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0,0.9686274509803922,0.5725490196078431,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0,1,0.34509803921568627,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.1568627450980392,1,0.03137254901960784,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.5764705882352941,1,0,1);\n  float a0 = smoothstep(e0,e1,x_761030515);\n  float a1 = smoothstep(e1,e2,x_761030515);\n  float a2 = smoothstep(e2,e3,x_761030515);\n  float a3 = smoothstep(e3,e4,x_761030515);\n  float a4 = smoothstep(e4,e5,x_761030515);\n  float a5 = smoothstep(e5,e6,x_761030515);\n  float a6 = smoothstep(e6,e7,x_761030515);\n  float a7 = smoothstep(e7,e8,x_761030515);\n  return max(mix(v0,v1,a0)*step(e0,x_761030515)*step(x_761030515,e1),\n    max(mix(v1,v2,a1)*step(e1,x_761030515)*step(x_761030515,e2),\n    max(mix(v2,v3,a2)*step(e2,x_761030515)*step(x_761030515,e3),\n    max(mix(v3,v4,a3)*step(e3,x_761030515)*step(x_761030515,e4),\n    max(mix(v4,v5,a4)*step(e4,x_761030515)*step(x_761030515,e5),\n    max(mix(v5,v6,a5)*step(e5,x_761030515)*step(x_761030515,e6),\n    max(mix(v6,v7,a6)*step(e6,x_761030515)*step(x_761030515,e7),mix(v7,v8,a7)*step(e7,x_761030515)*step(x_761030515,e8)\n  )))))));\n}\n\nvec4 hot (float x_180130041) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.3;\n  const vec4 v1 = vec4(0.9019607843137255,0,0,1);\n  const float e2 = 0.6;\n  const vec4 v2 = vec4(1,0.8235294117647058,0,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_180130041);\n  float a1 = smoothstep(e1,e2,x_180130041);\n  float a2 = smoothstep(e2,e3,x_180130041);\n  return max(mix(v0,v1,a0)*step(e0,x_180130041)*step(x_180130041,e1),\n    max(mix(v1,v2,a1)*step(e1,x_180130041)*step(x_180130041,e2),mix(v2,v3,a2)*step(e2,x_180130041)*step(x_180130041,e3)\n  ));\n}\n\nvec4 spring (float x_755571360) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_755571360);\n  return mix(v0,v1,a0)*step(e0,x_755571360)*step(x_755571360,e1);\n}\n\nvec4 summer (float x_2651158874) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0.5019607843137255,0.4,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0.4,1);\n  float a0 = smoothstep(e0,e1,x_2651158874);\n  return mix(v0,v1,a0)*step(e0,x_2651158874)*step(x_2651158874,e1);\n}\n\nvec4 autumn (float x_626866098) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_626866098);\n  return mix(v0,v1,a0)*step(e0,x_626866098)*step(x_626866098,e1);\n}\n\nvec4 winter (float x_2098958741) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(0,1,0.5019607843137255,1);\n  float a0 = smoothstep(e0,e1,x_2098958741);\n  return mix(v0,v1,a0)*step(e0,x_2098958741)*step(x_2098958741,e1);\n}\n\n// Data (mask) texture\nuniform sampler2D channel0;\nuniform sampler2D channel1;\nuniform sampler2D channel2;\nuniform sampler2D channel3;\nuniform sampler2D channel4;\nuniform sampler2D channel5;\n\n// Color texture\nuniform sampler2D colorTex;\nuniform float colorTexHeight;\nuniform float colorTexWidth;\nuniform float hovered;\n// range\nuniform bool channelsVisible[6];\n\n// Expression mapping\nuniform vec2 uColorScaleRange;\nuniform bool uIsExpressionMode;\nuniform sampler2D expressionTex;\n\n// opacity\nuniform float opacity;\n\nvarying vec2 vTexCoord;\n\nvec4 sampleAndGetColor(sampler2D dataTex, vec2 coord, bool isOn){\n  float sampledData = texture(dataTex, coord).r;\n  vec4 hoveredColor = float(sampledData == hovered && sampledData > 0. && hovered > 0.) * vec4(0., 0., 1., 1.);\n  // Colors are laid out corresponding to ids in row-major order in the texture.  So if width of the texture is 10, and you want ID 25,\n  // you need coordinate (1, 4) (i.e 2 rows down, and 5 columns over indexed from 0 for a total of 25 units covered in row major order).\n  vec2 colorTexCoord = vec2(mod(sampledData, colorTexWidth) / colorTexWidth, floor(sampledData / colorTexWidth) / (colorTexHeight - 1.));\n  float expressionValue = texture(expressionTex, colorTexCoord).r / 255.;\n  float scaledExpressionValue = (expressionValue - uColorScaleRange[0]) / max(0.005, (uColorScaleRange[1] - uColorScaleRange[0]));\n  vec4 sampledColor = float(uIsExpressionMode) * COLORMAP_FUNC(clamp(scaledExpressionValue, 0.0, 1.0)) +  (1. - float(uIsExpressionMode)) * vec4(texture(colorTex, colorTexCoord).rgb, 1.);\n  // Only return a color if the data is non-zero.\n  return max(0., min(sampledData, 1.)) * float(isOn) * (sampledColor + hoveredColor);\n}\n\nvoid main() {\n\n  gl_FragColor = sampleAndGetColor(channel0, vTexCoord, channelsVisible[0]);\n\n  // If the sampled color and the currently stored color (gl_FragColor) are identical, don't blend and use the sampled color,\n  // otherwise just use the currently stored color.  Repeat this for all channels.\n  vec4 sampledColor = sampleAndGetColor(channel1, vTexCoord, channelsVisible[1]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel2, vTexCoord, channelsVisible[2]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel3, vTexCoord, channelsVisible[3]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel4, vTexCoord, channelsVisible[4]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  sampledColor = sampleAndGetColor(channel5, vTexCoord, channelsVisible[5]);\n  gl_FragColor = (sampledColor == gl_FragColor || sampledColor == vec4(0.)) ? gl_FragColor : sampledColor;\n  // Apply the opacity if there is pixel data, and if the pixel data is empty i.e no segmentation, use 0 opacity.\n  gl_FragColor = vec4(gl_FragColor.rgb, (gl_FragColor.rgb == vec3(0., 0., 0.)) ? 0.0 : opacity);\n\n  geometry.uv = vTexCoord;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

// src/layers/BitmaskLayer.js
function padWithDefault2(arr, defaultValue, padWidth) {
  const newArr = [...arr];
  for (let i = 0; i < padWidth; i += 1) {
    newArr.push(defaultValue);
  }
  return newArr;
}
var defaultProps5 = {
  hoveredCell: { type: "number", value: null, compare: true },
  cellColorData: { type: "object", value: null, compare: true },
  colormap: { type: "string", value: GLSL_COLORMAP_DEFAULT, compare: true },
  expressionData: { type: "object", value: null, compare: true }
};
var BitmaskLayer = class extends XRLayer {
  getShaders() {
    const { colormap } = this.props;
    return {
      fs: fs3,
      vs: vs3,
      modules: [project323, picking3],
      defines: {
        [COLORMAP_SHADER_PLACEHOLDER]: GLSL_COLORMAPS.includes(colormap) ? colormap : GLSL_COLORMAP_DEFAULT
      }
    };
  }
  updateState({ props, oldProps, changeFlags }) {
    super.updateState({ props, oldProps, changeFlags });
    if (props.cellColorData !== oldProps.cellColorData) {
      this.setColorTexture();
    }
    if (props.expressionData !== oldProps.expressionData) {
      const { expressionData, cellTexHeight, cellTexWidth } = this.props;
      const expressionTex = this.dataToTexture(expressionData, cellTexWidth, cellTexHeight);
      this.setState({ expressionTex });
    }
    if (props.colormap !== oldProps.colormap) {
      const { gl } = this.context;
      if (this.state.model) {
        this.state.model.delete();
      }
      this.setState({ model: this._getModel(gl) });
      this.getAttributeManager().invalidateAll();
    }
  }
  setColorTexture() {
    const {
      cellColorData: data,
      cellTexHeight: height,
      cellTexWidth: width
    } = this.props;
    const colorTex = new Texture2D3(this.context.gl, {
      width,
      height,
      data,
      mipmaps: false,
      parameters: {
        [GL4.TEXTURE_MIN_FILTER]: GL4.NEAREST,
        [GL4.TEXTURE_MAG_FILTER]: GL4.NEAREST,
        [GL4.TEXTURE_WRAP_S]: GL4.CLAMP_TO_EDGE,
        [GL4.TEXTURE_WRAP_T]: GL4.CLAMP_TO_EDGE
      },
      format: GL4.RGB,
      dataFormat: GL4.RGB,
      type: GL4.UNSIGNED_BYTE
    });
    this.setState({ colorTex });
  }
  draw(opts) {
    const { uniforms } = opts;
    const {
      channelsVisible,
      hoveredCell,
      colorScaleLo,
      colorScaleHi,
      isExpressionMode
    } = this.props;
    const {
      textures,
      model,
      colorTex,
      expressionTex
    } = this.state;
    if (textures && model && colorTex) {
      model.setUniforms(Object.assign({}, uniforms, __spreadValues({
        hovered: hoveredCell || 0,
        colorTex,
        expressionTex,
        colorTexHeight: colorTex.height,
        colorTexWidth: colorTex.width,
        channelsVisible: padWithDefault2(channelsVisible, false, 6 - channelsVisible.length),
        uColorScaleRange: [colorScaleLo, colorScaleHi],
        uIsExpressionMode: isExpressionMode
      }, textures))).draw();
    }
  }
  dataToTexture(data, width, height) {
    const isWebGL2On = isWebGL22(this.context.gl);
    return new Texture2D3(this.context.gl, {
      width,
      height,
      data: new Float32Array(data),
      mipmaps: false,
      parameters: {
        [GL4.TEXTURE_MIN_FILTER]: GL4.NEAREST,
        [GL4.TEXTURE_MAG_FILTER]: GL4.NEAREST,
        [GL4.TEXTURE_WRAP_S]: GL4.CLAMP_TO_EDGE,
        [GL4.TEXTURE_WRAP_T]: GL4.CLAMP_TO_EDGE
      },
      format: isWebGL2On ? GL4.R32F : GL4.LUMINANCE,
      dataFormat: isWebGL2On ? GL4.RED : GL4.LUMINANCE,
      type: GL4.FLOAT
    });
  }
};
BitmaskLayer.layerName = "BitmaskLayer";
BitmaskLayer.defaultProps = defaultProps5;

// src/components/layer-controller/utils.js
import { Matrix4 as Matrix42 } from "math.gl";
function getSingleSelectionStats2D(_0) {
  return __async(this, arguments, function* ({ loader, selection }) {
    const data = Array.isArray(loader) ? loader[loader.length - 1] : loader;
    const raster = yield data.getRaster({ selection });
    const selectionStats = getChannelStats(raster.data);
    const { domain, contrastLimits: slider } = selectionStats;
    return { domain, slider };
  });
}
function getSingleSelectionStats3D(_0) {
  return __async(this, arguments, function* ({ loader, selection }) {
    const lowResSource = loader[loader.length - 1];
    const { shape, labels } = lowResSource;
    const sizeZ = shape[labels.indexOf("z")] >> loader.length - 1;
    const raster0 = yield lowResSource.getRaster({
      selection: __spreadProps(__spreadValues({}, selection), { z: 0 })
    });
    const rasterMid = yield lowResSource.getRaster({
      selection: __spreadProps(__spreadValues({}, selection), { z: Math.floor(sizeZ / 2) })
    });
    const rasterTop = yield lowResSource.getRaster({
      selection: __spreadProps(__spreadValues({}, selection), { z: Math.max(0, sizeZ - 1) })
    });
    const stats0 = getChannelStats(raster0.data);
    const statsMid = getChannelStats(rasterMid.data);
    const statsTop = getChannelStats(rasterTop.data);
    return {
      domain: [
        Math.min(stats0.domain[0], statsMid.domain[0], statsTop.domain[0]),
        Math.max(stats0.domain[1], statsMid.domain[1], statsTop.domain[1])
      ],
      slider: [
        Math.min(stats0.contrastLimits[0], statsMid.contrastLimits[0], statsTop.contrastLimits[0]),
        Math.max(stats0.contrastLimits[1], statsMid.contrastLimits[1], statsTop.contrastLimits[1])
      ]
    };
  });
}
var getSingleSelectionStats = (_0) => __async(void 0, [_0], function* ({ loader, selection, use3d }) {
  const getStats = use3d ? getSingleSelectionStats3D : getSingleSelectionStats2D;
  return getStats({ loader, selection });
});
var getMultiSelectionStats = (_0) => __async(void 0, [_0], function* ({ loader, selections, use3d }) {
  const stats = yield Promise.all(selections.map((selection) => getSingleSelectionStats({ loader, selection, use3d })));
  const domains = stats.map((stat) => stat.domain);
  const sliders = stats.map((stat) => stat.slider);
  return { domains, sliders };
});
function getPhysicalSizeScalingMatrix2(loader) {
  var _a2, _b2;
  const { x, y, z } = (_b2 = (_a2 = loader == null ? void 0 : loader.meta) == null ? void 0 : _a2.physicalSizes) != null ? _b2 : {};
  if ((x == null ? void 0 : x.size) && (y == null ? void 0 : y.size) && (z == null ? void 0 : z.size)) {
    const min = Math.min(z.size, x.size, y.size);
    const ratio = [x.size / min, y.size / min, z.size / min];
    return new Matrix42().scale(ratio);
  }
  return new Matrix42().identity();
}
function getBoundingCube(loader) {
  const source = Array.isArray(loader) ? loader[0] : loader;
  const { shape, labels } = source;
  const physicalSizeScalingMatrix = getPhysicalSizeScalingMatrix2(source);
  const xSlice = [0, physicalSizeScalingMatrix[0] * shape[labels.indexOf("x")]];
  const ySlice = [0, physicalSizeScalingMatrix[5] * shape[labels.indexOf("y")]];
  const zSlice = [
    0,
    physicalSizeScalingMatrix[10] * shape[labels.indexOf("z")]
  ];
  return [xSlice, ySlice, zSlice];
}
function abbreviateNumber(value) {
  const maxLength = 5;
  let maxNaiveDigits = maxLength;
  if (!Number.isInteger(value)) {
    --maxNaiveDigits;
  }
  if (value < 1) {
    --maxNaiveDigits;
  }
  const naive = Intl.NumberFormat("en-US", {
    maximumSignificantDigits: maxNaiveDigits,
    useGrouping: false
  }).format(value);
  if (naive.length <= maxLength)
    return naive;
  return value.toExponential(0);
}

// src/components/spatial/utils.js
function square(x, y, r) {
  return [[x, y + r], [x + r, y], [x, y - r], [x - r, y]];
}
function getDefaultGlobalSelection(source) {
  const globalIndices = source.labels.filter((dim) => GLOBAL_LABELS.includes(dim));
  const selection = {};
  globalIndices.forEach((dim) => {
    selection[dim] = Math.floor((source.shape[source.labels.indexOf(dim)] || 0) / 2);
  });
  return selection;
}
function buildDefaultSelection(source) {
  const selection = [];
  const globalSelection = getDefaultGlobalSelection(source);
  const firstNonGlobalDimension = source.labels.filter((dim) => !GLOBAL_LABELS.includes(dim) && source.shape[source.labels.indexOf(dim)])[0];
  for (let i = 0; i < Math.min(4, source.shape[source.labels.indexOf(firstNonGlobalDimension)]); i += 1) {
    selection.push(__spreadValues({
      [firstNonGlobalDimension]: i
    }, globalSelection));
  }
  return selection;
}
function isInterleaved2(shape) {
  const lastDimSize = shape[shape.length - 1];
  return lastDimSize === 3 || lastDimSize === 4;
}
function initializeLayerChannels(loader, use3d) {
  return __async(this, null, function* () {
    const result = [];
    const source = getSourceFromLoader(loader);
    let defaultSelection = buildDefaultSelection(source);
    defaultSelection = isInterleaved2(source.shape) ? [__spreadProps(__spreadValues({}, defaultSelection[0]), { c: 0 })] : defaultSelection;
    const stats = yield getMultiSelectionStats({
      loader: loader.data,
      selections: defaultSelection,
      use3d
    });
    const domains = isRgb(loader) ? [[0, 255], [0, 255], [0, 255]] : stats.domains;
    const colors = isRgb(loader) ? [[255, 0, 0], [0, 255, 0], [0, 0, 255]] : null;
    const sliders = isRgb(loader) ? [[0, 255], [0, 255], [0, 255]] : stats.sliders;
    defaultSelection.forEach((selection, i) => {
      const domain = domains[i];
      const slider = sliders[i];
      const channel = {
        selection,
        color: colors ? colors[i] : defaultSelection.length !== 1 ? VIEWER_PALETTE[i] : [255, 255, 255],
        visible: true,
        slider: slider || domain
      };
      result.push(channel);
    });
    return result;
  });
}
function getMetaWithTransformMatrices(imageMeta, imageLoaders) {
  const sources = imageLoaders.map((loader) => getSourceFromLoader(loader));
  if (imageMeta.map((meta) => {
    var _a2, _b2, _c, _d, _e, _f;
    return ((_b2 = (_a2 = meta == null ? void 0 : meta.metadata) == null ? void 0 : _a2.transform) == null ? void 0 : _b2.matrix) || ((_d = (_c = meta == null ? void 0 : meta.metadata) == null ? void 0 : _c.transform) == null ? void 0 : _d.scale) || ((_f = (_e = meta == null ? void 0 : meta.metadata) == null ? void 0 : _e.transform) == null ? void 0 : _f.translate);
  }).some(Boolean) || sources.every((source) => {
    var _a2, _b2, _c, _d;
    return !((_b2 = (_a2 = source.meta) == null ? void 0 : _a2.physicalSizes) == null ? void 0 : _b2.x) || !((_d = (_c = source.meta) == null ? void 0 : _c.physicalSizes) == null ? void 0 : _d.y);
  })) {
    return imageMeta;
  }
  const minPhysicalSize = sources.reduce((acc, source) => {
    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i;
    const hasZPhyscialSize = (_c = (_b2 = (_a2 = source.meta) == null ? void 0 : _a2.physicalSizes) == null ? void 0 : _b2.z) == null ? void 0 : _c.size;
    const sizes = [
      unit(`${(_d = source.meta) == null ? void 0 : _d.physicalSizes.x.size} ${(_e = source.meta) == null ? void 0 : _e.physicalSizes.x.unit}`.replace("\xB5", "u")),
      unit(`${(_f = source.meta) == null ? void 0 : _f.physicalSizes.y.size} ${(_g = source.meta) == null ? void 0 : _g.physicalSizes.y.unit}`.replace("\xB5", "u"))
    ];
    if (hasZPhyscialSize) {
      sizes.push(unit(`${(_h = source.meta) == null ? void 0 : _h.physicalSizes.z.size} ${(_i = source.meta) == null ? void 0 : _i.physicalSizes.z.unit}`.replace("\xB5", "u")));
    }
    acc[0] = acc[0] === void 0 || compare(sizes[0], acc[0]) === -1 ? sizes[0] : acc[0];
    acc[1] = acc[1] === void 0 || compare(sizes[1], acc[1]) === -1 ? sizes[1] : acc[1];
    acc[2] = acc[2] === void 0 || compare(sizes[2], acc[2]) === -1 ? sizes[2] : acc[2];
    return acc;
  }, []);
  const imageMetaWithTransform = imageMeta.map((meta, j) => {
    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i;
    const source = sources[j];
    const hasZPhyscialSize = (_c = (_b2 = (_a2 = source.meta) == null ? void 0 : _a2.physicalSizes) == null ? void 0 : _b2.z) == null ? void 0 : _c.size;
    const sizes = [
      unit(`${(_d = source.meta) == null ? void 0 : _d.physicalSizes.x.size} ${(_e = source.meta) == null ? void 0 : _e.physicalSizes.x.unit}`.replace("\xB5", "u")),
      unit(`${(_f = source.meta) == null ? void 0 : _f.physicalSizes.y.size} ${(_g = source.meta) == null ? void 0 : _g.physicalSizes.y.unit}`.replace("\xB5", "u"))
    ];
    if (hasZPhyscialSize) {
      sizes.push(unit(`${(_h = source.meta) == null ? void 0 : _h.physicalSizes.z.size} ${(_i = source.meta) == null ? void 0 : _i.physicalSizes.z.unit}`.replace("\xB5", "u")));
    }
    const scale = sizes.map((i, k) => divide(i, minPhysicalSize[k]));
    if (!scale[2]) {
      scale[2] = 1;
    }
    if (isEqual4(scale, [1, 1, 1])) {
      return meta;
    }
    const matrix = new Matrix43().scale([...scale]);
    const newMeta = __spreadValues({}, meta);
    newMeta.metadata = __spreadProps(__spreadValues({}, newMeta.metadata), {
      transform: { matrix: matrix.toArray() }
    });
    return newMeta;
  });
  return imageMetaWithTransform;
}
function initializeRasterLayersAndChannels(rasterLayers, rasterRenderLayers, usePhysicalSizeScaling) {
  return __async(this, null, function* () {
    const nextImageLoaders = [];
    let nextImageMetaAndLayers = [];
    const autoImageLayerDefPromises = [];
    const loaders = yield Promise.all(rasterLayers.map((layer) => layer.loaderCreator()));
    for (let i = 0; i < rasterLayers.length; i++) {
      const layer = rasterLayers[i];
      const loader = loaders[i];
      nextImageLoaders[i] = loader;
      nextImageMetaAndLayers[i] = layer;
    }
    if (usePhysicalSizeScaling) {
      nextImageMetaAndLayers = getMetaWithTransformMatrices(nextImageMetaAndLayers, nextImageLoaders);
    }
    if (!rasterRenderLayers) {
      const layerIndex = Math.floor(rasterLayers.length / 2);
      const loader = nextImageLoaders[layerIndex];
      const autoImageLayerDefPromise = initializeLayerChannels(loader).then((channels2) => {
        var _a2, _b2, _c, _d, _e;
        return Promise.resolve(__spreadProps(__spreadValues({
          type: ((_b2 = (_a2 = nextImageMetaAndLayers[layerIndex]) == null ? void 0 : _a2.metadata) == null ? void 0 : _b2.isBitmask) ? "bitmask" : "raster",
          index: layerIndex
        }, DEFAULT_RASTER_LAYER_PROPS), {
          channels: channels2.map((channel, j) => __spreadValues(__spreadValues({}, channel), nextImageMetaAndLayers[layerIndex].channels ? nextImageMetaAndLayers[layerIndex].channels[j] : [])),
          modelMatrix: (_e = (_d = (_c = nextImageMetaAndLayers[layerIndex]) == null ? void 0 : _c.metadata) == null ? void 0 : _d.transform) == null ? void 0 : _e.matrix,
          transparentColor: layerIndex > 0 ? [0, 0, 0] : null
        }));
      });
      autoImageLayerDefPromises.push(autoImageLayerDefPromise);
    } else {
      const globalIndicesOfRenderLayers = rasterRenderLayers.map((imageName) => rasterLayers.findIndex((image) => image.name === imageName));
      for (let i = 0; i < globalIndicesOfRenderLayers.length; i++) {
        const layerIndex = globalIndicesOfRenderLayers[i];
        const loader = nextImageLoaders[layerIndex];
        const autoImageLayerDefPromise = initializeLayerChannels(loader).then((channels2) => {
          var _a2, _b2, _c, _d, _e;
          return Promise.resolve(__spreadProps(__spreadValues({
            type: ((_b2 = (_a2 = nextImageMetaAndLayers[layerIndex]) == null ? void 0 : _a2.metadata) == null ? void 0 : _b2.isBitmask) ? "bitmask" : "raster",
            index: layerIndex
          }, DEFAULT_RASTER_LAYER_PROPS), {
            channels: channels2.map((channel, j) => __spreadValues(__spreadValues({}, channel), nextImageMetaAndLayers[layerIndex].channels ? nextImageMetaAndLayers[layerIndex].channels[j] : [])),
            domainType: "Min/Max",
            modelMatrix: (_e = (_d = (_c = nextImageMetaAndLayers[layerIndex]) == null ? void 0 : _c.metadata) == null ? void 0 : _d.transform) == null ? void 0 : _e.matrix,
            transparentColor: i > 0 ? [0, 0, 0] : null
          }));
        });
        autoImageLayerDefPromises.push(autoImageLayerDefPromise);
      }
    }
    const autoImageLayerDefs = yield Promise.all(autoImageLayerDefPromises);
    return [autoImageLayerDefs, nextImageLoaders, nextImageMetaAndLayers];
  });
}
function makeSpatialSubtitle({
  observationsCount,
  observationsLabel,
  observationsPluralLabel,
  subobservationsCount,
  subobservationsLabel,
  subobservationsPluralLabel,
  locationsCount
}) {
  const parts = [];
  if (subobservationsCount > 0) {
    let part = `${subobservationsCount} ${pluralize(subobservationsLabel, subobservationsPluralLabel, subobservationsCount)}`;
    if (locationsCount > 0) {
      part += ` at ${shortNumber(locationsCount)} locations`;
    }
    parts.push(part);
  }
  if (observationsCount > 0) {
    parts.push(`${observationsCount} ${pluralize(observationsLabel, observationsPluralLabel, observationsCount)}`);
  }
  return parts.join(", ");
}
function getInitialSpatialTargets({
  width,
  height,
  cells,
  imageLayerLoaders,
  useRaster,
  use3d
}) {
  let initialTargetX = -Infinity;
  let initialTargetY = -Infinity;
  let initialTargetZ = -Infinity;
  let initialZoom = -Infinity;
  const zoomBackoff = use3d ? 1.5 : 0.1;
  const cellValues = Object.values(cells);
  if (imageLayerLoaders.length > 0 && useRaster) {
    for (let i = 0; i < imageLayerLoaders.length; i += 1) {
      const viewSize = { height, width };
      const { target, zoom: newViewStateZoom } = getDefaultInitialViewState(imageLayerLoaders[i].data, viewSize, zoomBackoff, use3d);
      if (target[0] > initialTargetX) {
        initialTargetX = target[0];
        initialZoom = newViewStateZoom;
      }
      if (target[1] > initialTargetY) {
        initialTargetY = target[1];
        initialZoom = newViewStateZoom;
      }
      if (target[2] > initialTargetZ) {
        initialTargetZ = target[2];
        initialZoom = newViewStateZoom;
      } else {
        initialTargetZ = null;
      }
    }
  } else if (cellValues.length > 0 && cellValues[0].xy && !useRaster) {
    const cellCoordinates = cellValues.map((c) => c.xy);
    let xExtent = extent(cellCoordinates, (c) => c[0]);
    let yExtent = extent(cellCoordinates, (c) => c[1]);
    let xRange = xExtent[1] - xExtent[0];
    let yRange = yExtent[1] - yExtent[0];
    const getViewExtentFromPolygonExtents = (extents) => [
      Math.min(...extents.map((i) => i[0])),
      Math.max(...extents.map((i) => i[1]))
    ];
    if (xRange === 0) {
      const polygonExtentsX = cellValues.map((cell) => extent(cell.poly, (i) => i[0]));
      xExtent = getViewExtentFromPolygonExtents(polygonExtentsX);
      xRange = xExtent[1] - xExtent[0];
    }
    if (yRange === 0) {
      const polygonExtentsY = cellValues.map((cell) => extent(cell.poly, (i) => i[1]));
      yExtent = getViewExtentFromPolygonExtents(polygonExtentsY);
      yRange = yExtent[1] - yExtent[0];
    }
    initialTargetX = xExtent[0] + xRange / 2;
    initialTargetY = yExtent[0] + yRange / 2;
    initialTargetZ = null;
    initialZoom = Math.log2(Math.min(width / xRange, height / yRange)) - zoomBackoff;
  } else {
    return {
      initialTargetX: null,
      initialTargetY: null,
      initialTargetZ: null,
      initialZoom: null
    };
  }
  return {
    initialTargetX,
    initialTargetY,
    initialZoom,
    initialTargetZ
  };
}
function getLayerLoaderTuple(data, use3d) {
  const loader = Array.isArray(data) && data.length > 1 || !Array.isArray(data) ? data : data[0];
  if (use3d) {
    return [VolumeLayer, Array.isArray(loader) ? loader : [loader]];
  }
  const Layer2 = Array.isArray(data) && data.length > 1 ? MultiscaleImageLayer : ImageLayer;
  return [Layer2, loader];
}
function renderSubBitmaskLayers(props) {
  const {
    bbox: {
      left,
      top,
      right,
      bottom
    },
    x,
    y,
    z
  } = props.tile;
  const {
    data,
    id,
    loader
  } = props;
  if ([left, bottom, right, top].some((v) => v < 0) || !data) {
    return null;
  }
  const base = loader[0];
  const [height, width] = loader[0].shape.slice(-2);
  const bounds = [
    left,
    data.height < base.tileSize ? height : bottom,
    data.width < base.tileSize ? width : right,
    top
  ];
  return new BitmaskLayer(props, {
    channelData: data,
    bounds,
    id: `sub-layer-${bounds}-${id}`,
    tileId: { x, y, z }
  });
}

// src/components/shared-spatial-scatterplot/AbstractSpatialOrScatterplot.js
import React19, { PureComponent as PureComponent2 } from "react";
import DeckGL3, { OrthographicView as OrthographicView3, OrbitView as OrbitView2 } from "deck.gl";

// src/components/shared-spatial-scatterplot/ToolMenu.js
import React18 from "react";
import { SELECTION_TYPE as SELECTION_TYPE2 } from "nebula.gl";

// src/assets/tools/near_me.svg
import {
  createElement
} from "react";
function SvgNearMe(props) {
  return /* @__PURE__ */ createElement("svg", __spreadValues({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24"
  }, props), /* @__PURE__ */ createElement("path", {
    fill: "none",
    d: "M0 0h24v24H0V0z"
  }), /* @__PURE__ */ createElement("path", {
    d: "M21 3L3 10.53v.98l6.84 2.65L12.48 21h.98L21 3z"
  }));
}
var ReactComponent = SvgNearMe;

// src/assets/tools/selection_rectangle.svg
import {
  createElement as createElement2
} from "react";
function SvgSelectionRectangle(props) {
  return /* @__PURE__ */ createElement2("svg", __spreadValues({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24"
  }, props), /* @__PURE__ */ createElement2("path", {
    d: "       M19 19h2v2h-2v-2zm0-2h2v-2h-2v2z       M3 13h2v-2H3v2zm0 4h2v-2H3v2z       m0-8h2V7H3v2zm0-4h2V3H3v2z       m4 0h2V3H7v2zm8 16h2v-2h-2v2z       m-4 0h2v-2h-2v2z       m4 0h2v-2h-2v2z       m-8 0h2v-2H7v2z       m-4 0h2v-2H3v2z       M11 5h2v-2h-2v2z       M15 5h2v-2h-2v2z       M19 5h2v-2h-2v2z       M19 9h2v-2h-2v2z       M19 13h2v-2h-2v2z     "
  }));
}
var ReactComponent2 = SvgSelectionRectangle;

// src/assets/tools/selection_lasso.svg
import {
  createElement as createElement3
} from "react";
function SvgSelectionLasso(props) {
  return /* @__PURE__ */ createElement3("svg", __spreadValues({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24"
  }, props), /* @__PURE__ */ createElement3("g", {
    transform: "translate(0,3)"
  }, /* @__PURE__ */ createElement3("path", {
    style: {
      strokeWidth: 0.343565
    },
    d: "M 23.942314,4.6958443 C 23.446206,1.8868581 19.727461,0 14.687364,0 13.437819,0 12.150138,0.11543779 10.859708,0.34287772 4.1629423,1.5250844 -0.58168816,5.2884937 0.05768601,8.911385 c 0.25355086,1.439193 1.35605049,2.63583 3.04638949,3.461072 -0.2569865,0.387198 -0.4074679,0.826617 -0.4074679,1.29524 0,1.337498 1.1863293,2.457176 2.7639791,2.728248 l -1.3615475,2.333149 c -0.1576963,0.271073 -0.066308,0.61876 0.2047647,0.776457 0.090014,0.05291 0.1886171,0.07799 0.2858459,0.07799 0.1951448,0 0.3851362,-0.100665 0.4912977,-0.281723 l 1.6803757,-2.88148 C 8.41868,16.20561 9.6895264,15.063601 9.6998333,13.683844 c 6.872e-4,-0.0055 0.00137,-0.01065 0.00137,-0.01615 0,-0.02336 -0.00344,-0.04569 -0.00481,-0.06837 1.1292977,-0.0213 2.2847067,-0.130211 3.4435507,-0.334975 6.69711,-1.181863 11.44174,-4.9456164 10.802366,-8.5685077 z M 3.83312,13.667353 c 0,-0.30749 0.1281497,-0.59849 0.3470005,-0.848261 0.1219655,0.04295 0.2456489,0.08383 0.3717372,0.123339 l 1.2234344,2.352045 C 4.6865351,15.149835 3.83312,14.46408 3.83312,13.667353 Z M 7.0141869,15.216144 6.0223152,13.309702 5.4008064,12.114097 c 0.121622,-0.03161 0.2477103,-0.05634 0.3772342,-0.07387 0.1367388,-0.0189 0.2772568,-0.02886 0.420867,-0.02886 0.5067581,0 0.980534,0.11956 1.3701366,0.317454 0.5696305,0.289968 0.9554538,0.750345 0.9904974,1.262944 0.00137,0.02542 0.0055,0.05016 0.0055,0.07593 0,0.698124 -0.6562089,1.310356 -1.5508518,1.548447 z m 5.9185921,-3.126441 c -1.217251,0.214728 -2.429691,0.323982 -3.6060571,0.324669 -0.5765018,-0.911821 -1.7614569,-1.53917 -3.1278143,-1.53917 -0.4717146,0 -0.921441,0.07593 -1.332001,0.211292 -0.3061162,0.100665 -0.5878394,0.237403 -0.8427645,0.39991 C 2.4598914,10.828133 1.4360682,9.8579062 1.2319907,8.7035283 0.72660678,5.8381974 5.2307418,2.5475333 11.067221,1.5175259 c 1.222061,-0.2161023 2.439998,-0.3246688 3.620143,-0.3246688 4.371863,0 7.694479,1.5250844 8.080645,3.7101568 0.505041,2.8653309 -3.998751,6.1566821 -9.83523,7.1866891 z",
    id: "path10"
  })));
}
var ReactComponent3 = SvgSelectionLasso;

// src/components/shared-spatial-scatterplot/ToolMenu.js
function IconButton3(props) {
  const {
    alt,
    onClick,
    isActive,
    children
  } = props;
  const inactive = "btn btn-outline-secondary mr-2 icon";
  const active = `${inactive} active`;
  return /* @__PURE__ */ React18.createElement("button", {
    className: isActive ? active : inactive,
    onClick,
    type: "button",
    title: alt
  }, children);
}
function ToolMenu(props) {
  const {
    setActiveTool,
    activeTool,
    visibleTools = { pan: true, selectRectangle: true, selectLasso: true }
  } = props;
  return /* @__PURE__ */ React18.createElement("div", {
    className: "tool"
  }, visibleTools.pan && /* @__PURE__ */ React18.createElement(IconButton3, {
    alt: "pointer tool",
    onClick: () => setActiveTool(null),
    isActive: activeTool === null
  }, /* @__PURE__ */ React18.createElement(ReactComponent, null)), visibleTools.selectRectangle ? /* @__PURE__ */ React18.createElement(IconButton3, {
    alt: "select rectangle",
    onClick: () => setActiveTool(SELECTION_TYPE2.RECTANGLE),
    isActive: activeTool === SELECTION_TYPE2.RECTANGLE
  }, /* @__PURE__ */ React18.createElement(ReactComponent2, null)) : null, visibleTools.selectLasso ? /* @__PURE__ */ React18.createElement(IconButton3, {
    alt: "select lasso",
    onClick: () => setActiveTool(SELECTION_TYPE2.POLYGON),
    isActive: activeTool === SELECTION_TYPE2.POLYGON
  }, /* @__PURE__ */ React18.createElement(ReactComponent3, null)) : null);
}

// src/components/shared-spatial-scatterplot/cursor.js
var getCursorWithTool = () => "crosshair";
var getCursor = (interactionState) => interactionState.isDragging ? "grabbing" : "default";

// src/components/shared-spatial-scatterplot/AbstractSpatialOrScatterplot.js
var AbstractSpatialOrScatterplot = class extends PureComponent2 {
  constructor(props) {
    super(props);
    this.state = {
      gl: null,
      tool: null
    };
    this.viewport = null;
    this.onViewStateChange = this.onViewStateChange.bind(this);
    this.onInitializeViewInfo = this.onInitializeViewInfo.bind(this);
    this.onWebGLInitialized = this.onWebGLInitialized.bind(this);
    this.onToolChange = this.onToolChange.bind(this);
    this.onHover = this.onHover.bind(this);
  }
  onViewStateChange({ viewState: nextViewState }) {
    const {
      setViewState,
      viewState,
      layers,
      spatialAxisFixed
    } = this.props;
    const use3d = layers == null ? void 0 : layers.some((l) => l.use3d);
    setViewState(__spreadProps(__spreadValues({}, nextViewState), {
      target: spatialAxisFixed && use3d ? viewState.target : nextViewState.target
    }));
  }
  onInitializeViewInfo({ viewport }) {
    this.viewport = viewport;
  }
  onWebGLInitialized(gl) {
    this.setState({ gl });
  }
  onToolChange(tool) {
    const { onToolChange: onToolChangeProp } = this.props;
    this.setState({ tool });
    if (onToolChangeProp) {
      onToolChangeProp(tool);
    }
  }
  getLayers() {
    return [];
  }
  onHover(info) {
    const {
      coordinate,
      sourceLayer: layer,
      tile
    } = info;
    const {
      setCellHighlight,
      cellHighlight,
      setComponentHover,
      layers
    } = this.props;
    const hasBitmask = (layers || []).some((l) => l.type === "bitmask");
    if (!setCellHighlight || !tile) {
      return null;
    }
    if (!layer || !coordinate) {
      if (cellHighlight && hasBitmask) {
        setCellHighlight(null);
      }
      return null;
    }
    const { content, bbox, z } = tile;
    if (!content) {
      if (cellHighlight && hasBitmask) {
        setCellHighlight(null);
      }
      return null;
    }
    const { data, width, height } = content;
    const {
      left,
      right,
      top,
      bottom
    } = bbox;
    const bounds = [
      left,
      data.height < layer.tileSize ? height : bottom,
      data.width < layer.tileSize ? width : right,
      top
    ];
    if (!data) {
      if (cellHighlight && hasBitmask) {
        setCellHighlight(null);
      }
      return null;
    }
    if (layer.id.includes("bitmask")) {
      const layerZoomScale = Math.max(1, __pow(2, Math.round(-z)));
      const dataCoords = [
        Math.floor((coordinate[0] - bounds[0]) / layerZoomScale),
        Math.floor((coordinate[1] - bounds[3]) / layerZoomScale)
      ];
      const coords = dataCoords[1] * width + dataCoords[0];
      const hoverData = data.map((d) => d[coords]);
      const cellId = hoverData.find((i) => i > 0);
      if (cellId !== Number(cellHighlight)) {
        if (setComponentHover) {
          setComponentHover();
        }
        setCellHighlight(cellId ? String(cellId) : null);
      }
    }
  }
  viewInfoDidUpdate(getCellCoords) {
    const { updateViewInfo, cells, uuid } = this.props;
    const { viewport } = this;
    if (updateViewInfo && viewport) {
      updateViewInfo({
        uuid,
        project: (cellId) => {
          const cell = cells[cellId];
          try {
            const [positionX, positionY] = getCellCoords(cell);
            return viewport.project([positionX, positionY]);
          } catch (e) {
            return [null, null];
          }
        }
      });
    }
  }
  componentDidUpdate() {
  }
  render() {
    const {
      deckRef,
      viewState,
      uuid,
      layers: layerProps
    } = this.props;
    const { gl, tool } = this.state;
    const layers = this.getLayers();
    const use3d = (layerProps || []).some((l) => l.use3d);
    const showCellSelectionTools = this.cellsLayer !== null || this.cellsEntries.length && this.cellsEntries[0][1].xy;
    const showPanTool = this.cellsLayer !== null || layerProps.findIndex((l) => l.type === "bitmask" || l.type === "raster") >= 0;
    const useDevicePixels = this.cellsEntries.length < 1e5 && !use3d;
    return /* @__PURE__ */ React19.createElement(React19.Fragment, null, /* @__PURE__ */ React19.createElement(ToolMenu, {
      activeTool: tool,
      setActiveTool: this.onToolChange,
      visibleTools: {
        pan: showPanTool,
        selectRectangle: showCellSelectionTools,
        selectLasso: showCellSelectionTools
      }
    }), /* @__PURE__ */ React19.createElement(DeckGL3, {
      id: `deckgl-overlay-${uuid}`,
      ref: deckRef,
      views: [
        use3d ? new OrbitView2({ id: "orbit", controller: true, orbitAxis: "Y" }) : new OrthographicView3({
          id: "ortho"
        })
      ],
      layers: gl && viewState.target.slice(0, 2).every((i) => typeof i === "number") ? layers : [],
      glOptions: DEFAULT_GL_OPTIONS,
      onWebGLInitialized: this.onWebGLInitialized,
      onViewStateChange: this.onViewStateChange,
      viewState,
      useDevicePixels,
      controller: tool ? { dragPan: false } : true,
      getCursor: tool ? getCursorWithTool : getCursor,
      onHover: this.onHover
    }, this.onInitializeViewInfo));
  }
};

// src/components/shared-spatial-scatterplot/quadtree.js
import { quadtree } from "d3-quadtree";
function createCellsQuadTree(cellsEntries, getCellCoords) {
  if (!cellsEntries || !cellsEntries.length || !getCellCoords(cellsEntries[0][1])) {
    return null;
  }
  const tree = quadtree().x((d) => getCellCoords(d[1])[0]).y((d) => getCellCoords(d[1])[1]).addAll(cellsEntries);
  return tree;
}

// src/layer-extensions/ScaledExpressionExtension/ScaledExpressionExtension.js
import GL5 from "@luma.gl/constants";
import { LayerExtension } from "@deck.gl/core";

// src/layer-extensions/ScaledExpressionExtension/shader-module.js
var vs4 = "\nvec4 plasma (float x_1648624884) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.050980392156862744,0.03137254901960784,0.5294117647058824,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.29411764705882354,0.011764705882352941,0.6313725490196078,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.49019607843137253,0.011764705882352941,0.6588235294117647,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.6588235294117647,0.13333333333333333,0.5882352941176471,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.796078431372549,0.27450980392156865,0.4745098039215686,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.4196078431372549,0.36470588235294116,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9725490196078431,0.5803921568627451,0.2549019607843137,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9921568627450981,0.7647058823529411,0.1568627450980392,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9411764705882353,0.9764705882352941,0.12941176470588237,1);\n  float a0 = smoothstep(e0,e1,x_1648624884);\n  float a1 = smoothstep(e1,e2,x_1648624884);\n  float a2 = smoothstep(e2,e3,x_1648624884);\n  float a3 = smoothstep(e3,e4,x_1648624884);\n  float a4 = smoothstep(e4,e5,x_1648624884);\n  float a5 = smoothstep(e5,e6,x_1648624884);\n  float a6 = smoothstep(e6,e7,x_1648624884);\n  float a7 = smoothstep(e7,e8,x_1648624884);\n  return max(mix(v0,v1,a0)*step(e0,x_1648624884)*step(x_1648624884,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1648624884)*step(x_1648624884,e2),\n    max(mix(v2,v3,a2)*step(e2,x_1648624884)*step(x_1648624884,e3),\n    max(mix(v3,v4,a3)*step(e3,x_1648624884)*step(x_1648624884,e4),\n    max(mix(v4,v5,a4)*step(e4,x_1648624884)*step(x_1648624884,e5),\n    max(mix(v5,v6,a5)*step(e5,x_1648624884)*step(x_1648624884,e6),\n    max(mix(v6,v7,a6)*step(e6,x_1648624884)*step(x_1648624884,e7),mix(v7,v8,a7)*step(e7,x_1648624884)*step(x_1648624884,e8)\n  )))))));\n}\n\nvec4 viridis (float x_686877309) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.26666666666666666,0.00392156862745098,0.32941176470588235,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.2784313725490196,0.17254901960784313,0.47843137254901963,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.23137254901960785,0.3176470588235294,0.5450980392156862,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.17254901960784313,0.44313725490196076,0.5568627450980392,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.12941176470588237,0.5647058823529412,0.5529411764705883,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.15294117647058825,0.6784313725490196,0.5058823529411764,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.3607843137254902,0.7843137254901961,0.38823529411764707,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6666666666666666,0.8627450980392157,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9921568627450981,0.9058823529411765,0.1450980392156863,1);\n  float a0 = smoothstep(e0,e1,x_686877309);\n  float a1 = smoothstep(e1,e2,x_686877309);\n  float a2 = smoothstep(e2,e3,x_686877309);\n  float a3 = smoothstep(e3,e4,x_686877309);\n  float a4 = smoothstep(e4,e5,x_686877309);\n  float a5 = smoothstep(e5,e6,x_686877309);\n  float a6 = smoothstep(e6,e7,x_686877309);\n  float a7 = smoothstep(e7,e8,x_686877309);\n  return max(mix(v0,v1,a0)*step(e0,x_686877309)*step(x_686877309,e1),\n    max(mix(v1,v2,a1)*step(e1,x_686877309)*step(x_686877309,e2),\n    max(mix(v2,v3,a2)*step(e2,x_686877309)*step(x_686877309,e3),\n    max(mix(v3,v4,a3)*step(e3,x_686877309)*step(x_686877309,e4),\n    max(mix(v4,v5,a4)*step(e4,x_686877309)*step(x_686877309,e5),\n    max(mix(v5,v6,a5)*step(e5,x_686877309)*step(x_686877309,e6),\n    max(mix(v6,v7,a6)*step(e6,x_686877309)*step(x_686877309,e7),mix(v7,v8,a7)*step(e7,x_686877309)*step(x_686877309,e8)\n  )))))));\n}\n\nvec4 greys (float x_3692066534) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_3692066534);\n  return mix(v0,v1,a0)*step(e0,x_3692066534)*step(x_3692066534,e1);\n}\n\nvec4 magma (float x_652973032) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.10980392156862745,0.06274509803921569,0.26666666666666666,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.30980392156862746,0.07058823529411765,0.4823529411764706,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5058823529411764,0.1450980392156863,0.5058823529411764,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7098039215686275,0.21176470588235294,0.47843137254901963,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8980392156862745,0.3137254901960784,0.39215686274509803,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.984313725490196,0.5294117647058824,0.3803921568627451,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.996078431372549,0.7607843137254902,0.5294117647058824,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,0.9921568627450981,0.7490196078431373,1);\n  float a0 = smoothstep(e0,e1,x_652973032);\n  float a1 = smoothstep(e1,e2,x_652973032);\n  float a2 = smoothstep(e2,e3,x_652973032);\n  float a3 = smoothstep(e3,e4,x_652973032);\n  float a4 = smoothstep(e4,e5,x_652973032);\n  float a5 = smoothstep(e5,e6,x_652973032);\n  float a6 = smoothstep(e6,e7,x_652973032);\n  float a7 = smoothstep(e7,e8,x_652973032);\n  return max(mix(v0,v1,a0)*step(e0,x_652973032)*step(x_652973032,e1),\n    max(mix(v1,v2,a1)*step(e1,x_652973032)*step(x_652973032,e2),\n    max(mix(v2,v3,a2)*step(e2,x_652973032)*step(x_652973032,e3),\n    max(mix(v3,v4,a3)*step(e3,x_652973032)*step(x_652973032,e4),\n    max(mix(v4,v5,a4)*step(e4,x_652973032)*step(x_652973032,e5),\n    max(mix(v5,v6,a5)*step(e5,x_652973032)*step(x_652973032,e6),\n    max(mix(v6,v7,a6)*step(e6,x_652973032)*step(x_652973032,e7),mix(v7,v8,a7)*step(e7,x_652973032)*step(x_652973032,e8)\n  )))))));\n}\n\nvec4 jet (float x_799389509) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.5137254901960784,1);\n  const float e1 = 0.125;\n  const vec4 v1 = vec4(0,0.23529411764705882,0.6666666666666666,1);\n  const float e2 = 0.375;\n  const vec4 v2 = vec4(0.0196078431372549,1,1,1);\n  const float e3 = 0.625;\n  const vec4 v3 = vec4(1,1,0,1);\n  const float e4 = 0.875;\n  const vec4 v4 = vec4(0.9803921568627451,0,0,1);\n  const float e5 = 1.0;\n  const vec4 v5 = vec4(0.5019607843137255,0,0,1);\n  float a0 = smoothstep(e0,e1,x_799389509);\n  float a1 = smoothstep(e1,e2,x_799389509);\n  float a2 = smoothstep(e2,e3,x_799389509);\n  float a3 = smoothstep(e3,e4,x_799389509);\n  float a4 = smoothstep(e4,e5,x_799389509);\n  return max(mix(v0,v1,a0)*step(e0,x_799389509)*step(x_799389509,e1),\n    max(mix(v1,v2,a1)*step(e1,x_799389509)*step(x_799389509,e2),\n    max(mix(v2,v3,a2)*step(e2,x_799389509)*step(x_799389509,e3),\n    max(mix(v3,v4,a3)*step(e3,x_799389509)*step(x_799389509,e4),mix(v4,v5,a4)*step(e4,x_799389509)*step(x_799389509,e5)\n  ))));\n}\n\nvec4 bone (float x_1404936397) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.376;\n  const vec4 v1 = vec4(0.32941176470588235,0.32941176470588235,0.4549019607843137,1);\n  const float e2 = 0.753;\n  const vec4 v2 = vec4(0.6627450980392157,0.7843137254901961,0.7843137254901961,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_1404936397);\n  float a1 = smoothstep(e1,e2,x_1404936397);\n  float a2 = smoothstep(e2,e3,x_1404936397);\n  return max(mix(v0,v1,a0)*step(e0,x_1404936397)*step(x_1404936397,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1404936397)*step(x_1404936397,e2),mix(v2,v3,a2)*step(e2,x_1404936397)*step(x_1404936397,e3)\n  ));\n}\n\nvec4 copper (float x_41650866) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.804;\n  const vec4 v1 = vec4(1,0.6274509803921569,0.4,1);\n  const float e2 = 1.0;\n  const vec4 v2 = vec4(1,0.7803921568627451,0.4980392156862745,1);\n  float a0 = smoothstep(e0,e1,x_41650866);\n  float a1 = smoothstep(e1,e2,x_41650866);\n  return max(mix(v0,v1,a0)*step(e0,x_41650866)*step(x_41650866,e1),mix(v1,v2,a1)*step(e1,x_41650866)*step(x_41650866,e2)\n  );\n}\n\nvec4 density (float x_681601952) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.21176470588235294,0.054901960784313725,0.1411764705882353,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.34901960784313724,0.09019607843137255,0.3137254901960784,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.43137254901960786,0.17647058823529413,0.5176470588235295,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.47058823529411764,0.30196078431372547,0.6980392156862745,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.47058823529411764,0.44313725490196076,0.8352941176470589,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.45098039215686275,0.592156862745098,0.8941176470588236,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.5254901960784314,0.7254901960784313,0.8901960784313725,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.6941176470588235,0.8392156862745098,0.8901960784313725,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9019607843137255,0.9450980392156862,0.9450980392156862,1);\n  float a0 = smoothstep(e0,e1,x_681601952);\n  float a1 = smoothstep(e1,e2,x_681601952);\n  float a2 = smoothstep(e2,e3,x_681601952);\n  float a3 = smoothstep(e3,e4,x_681601952);\n  float a4 = smoothstep(e4,e5,x_681601952);\n  float a5 = smoothstep(e5,e6,x_681601952);\n  float a6 = smoothstep(e6,e7,x_681601952);\n  float a7 = smoothstep(e7,e8,x_681601952);\n  return max(mix(v0,v1,a0)*step(e0,x_681601952)*step(x_681601952,e1),\n    max(mix(v1,v2,a1)*step(e1,x_681601952)*step(x_681601952,e2),\n    max(mix(v2,v3,a2)*step(e2,x_681601952)*step(x_681601952,e3),\n    max(mix(v3,v4,a3)*step(e3,x_681601952)*step(x_681601952,e4),\n    max(mix(v4,v5,a4)*step(e4,x_681601952)*step(x_681601952,e5),\n    max(mix(v5,v6,a5)*step(e5,x_681601952)*step(x_681601952,e6),\n    max(mix(v6,v7,a6)*step(e6,x_681601952)*step(x_681601952,e7),mix(v7,v8,a7)*step(e7,x_681601952)*step(x_681601952,e8)\n  )))))));\n}\n\nvec4 inferno (float x_902288871) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0.01568627450980392,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.12156862745098039,0.047058823529411764,0.2823529411764706,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3333333333333333,0.058823529411764705,0.42745098039215684,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.5333333333333333,0.13333333333333333,0.41568627450980394,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0.7294117647058823,0.21176470588235294,0.3333333333333333,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0.8901960784313725,0.34901960784313724,0.2,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0.9764705882352941,0.5490196078431373,0.0392156862745098,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.9764705882352941,0.788235294117647,0.19607843137254902,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.9882352941176471,1,0.6431372549019608,1);\n  float a0 = smoothstep(e0,e1,x_902288871);\n  float a1 = smoothstep(e1,e2,x_902288871);\n  float a2 = smoothstep(e2,e3,x_902288871);\n  float a3 = smoothstep(e3,e4,x_902288871);\n  float a4 = smoothstep(e4,e5,x_902288871);\n  float a5 = smoothstep(e5,e6,x_902288871);\n  float a6 = smoothstep(e6,e7,x_902288871);\n  float a7 = smoothstep(e7,e8,x_902288871);\n  return max(mix(v0,v1,a0)*step(e0,x_902288871)*step(x_902288871,e1),\n    max(mix(v1,v2,a1)*step(e1,x_902288871)*step(x_902288871,e2),\n    max(mix(v2,v3,a2)*step(e2,x_902288871)*step(x_902288871,e3),\n    max(mix(v3,v4,a3)*step(e3,x_902288871)*step(x_902288871,e4),\n    max(mix(v4,v5,a4)*step(e4,x_902288871)*step(x_902288871,e5),\n    max(mix(v5,v6,a5)*step(e5,x_902288871)*step(x_902288871,e6),\n    max(mix(v6,v7,a6)*step(e6,x_902288871)*step(x_902288871,e7),mix(v7,v8,a7)*step(e7,x_902288871)*step(x_902288871,e8)\n  )))))));\n}\n\nvec4 cool (float x_2444426143) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0.49019607843137253,0,0.7019607843137254,1);\n  const float e1 = 0.13;\n  const vec4 v1 = vec4(0.4549019607843137,0,0.8549019607843137,1);\n  const float e2 = 0.25;\n  const vec4 v2 = vec4(0.3843137254901961,0.2901960784313726,0.9294117647058824,1);\n  const float e3 = 0.38;\n  const vec4 v3 = vec4(0.26666666666666666,0.5725490196078431,0.9058823529411765,1);\n  const float e4 = 0.5;\n  const vec4 v4 = vec4(0,0.8,0.7725490196078432,1);\n  const float e5 = 0.63;\n  const vec4 v5 = vec4(0,0.9686274509803922,0.5725490196078431,1);\n  const float e6 = 0.75;\n  const vec4 v6 = vec4(0,1,0.34509803921568627,1);\n  const float e7 = 0.88;\n  const vec4 v7 = vec4(0.1568627450980392,1,0.03137254901960784,1);\n  const float e8 = 1.0;\n  const vec4 v8 = vec4(0.5764705882352941,1,0,1);\n  float a0 = smoothstep(e0,e1,x_2444426143);\n  float a1 = smoothstep(e1,e2,x_2444426143);\n  float a2 = smoothstep(e2,e3,x_2444426143);\n  float a3 = smoothstep(e3,e4,x_2444426143);\n  float a4 = smoothstep(e4,e5,x_2444426143);\n  float a5 = smoothstep(e5,e6,x_2444426143);\n  float a6 = smoothstep(e6,e7,x_2444426143);\n  float a7 = smoothstep(e7,e8,x_2444426143);\n  return max(mix(v0,v1,a0)*step(e0,x_2444426143)*step(x_2444426143,e1),\n    max(mix(v1,v2,a1)*step(e1,x_2444426143)*step(x_2444426143,e2),\n    max(mix(v2,v3,a2)*step(e2,x_2444426143)*step(x_2444426143,e3),\n    max(mix(v3,v4,a3)*step(e3,x_2444426143)*step(x_2444426143,e4),\n    max(mix(v4,v5,a4)*step(e4,x_2444426143)*step(x_2444426143,e5),\n    max(mix(v5,v6,a5)*step(e5,x_2444426143)*step(x_2444426143,e6),\n    max(mix(v6,v7,a6)*step(e6,x_2444426143)*step(x_2444426143,e7),mix(v7,v8,a7)*step(e7,x_2444426143)*step(x_2444426143,e8)\n  )))))));\n}\n\nvec4 hot (float x_1123650753) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,0,1);\n  const float e1 = 0.3;\n  const vec4 v1 = vec4(0.9019607843137255,0,0,1);\n  const float e2 = 0.6;\n  const vec4 v2 = vec4(1,0.8235294117647058,0,1);\n  const float e3 = 1.0;\n  const vec4 v3 = vec4(1,1,1,1);\n  float a0 = smoothstep(e0,e1,x_1123650753);\n  float a1 = smoothstep(e1,e2,x_1123650753);\n  float a2 = smoothstep(e2,e3,x_1123650753);\n  return max(mix(v0,v1,a0)*step(e0,x_1123650753)*step(x_1123650753,e1),\n    max(mix(v1,v2,a1)*step(e1,x_1123650753)*step(x_1123650753,e2),mix(v2,v3,a2)*step(e2,x_1123650753)*step(x_1123650753,e3)\n  ));\n}\n\nvec4 spring (float x_3460271019) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_3460271019);\n  return mix(v0,v1,a0)*step(e0,x_3460271019)*step(x_3460271019,e1);\n}\n\nvec4 summer (float x_1787574999) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0.5019607843137255,0.4,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0.4,1);\n  float a0 = smoothstep(e0,e1,x_1787574999);\n  return mix(v0,v1,a0)*step(e0,x_1787574999)*step(x_1787574999,e1);\n}\n\nvec4 autumn (float x_204634793) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(1,0,0,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(1,1,0,1);\n  float a0 = smoothstep(e0,e1,x_204634793);\n  return mix(v0,v1,a0)*step(e0,x_204634793)*step(x_204634793,e1);\n}\n\nvec4 winter (float x_4071283602) {\n  const float e0 = 0.0;\n  const vec4 v0 = vec4(0,0,1,1);\n  const float e1 = 1.0;\n  const vec4 v1 = vec4(0,1,0.5019607843137255,1);\n  float a0 = smoothstep(e0,e1,x_4071283602);\n  return mix(v0,v1,a0)*step(e0,x_4071283602)*step(x_4071283602,e1);\n}\n\n// Custom attributes for Vitessce:\nattribute float expressionValue;\n\n// Custom uniforms for Vitessce:\nuniform vec2 uColorScaleRange;\nuniform bool uIsExpressionMode;\n\n";
var inject = {
  "vs:DECKGL_FILTER_COLOR": "\n    if(uIsExpressionMode) {\n      float normalizedExpressionValue = expressionValue / 255.0;\n      float scaledExpressionValue = (normalizedExpressionValue - uColorScaleRange[0]) / max(0.005, (uColorScaleRange[1] - uColorScaleRange[0]));\n      color.rgb = COLORMAP_FUNC(clamp(scaledExpressionValue, 0.0, 1.0)).rgb;\n    }\n  "
};
var shader_module_default = {
  name: "scaled-expression",
  vs: vs4,
  inject
};

// src/layer-extensions/ScaledExpressionExtension/ScaledExpressionExtension.js
var defaultProps6 = {
  colormap: { type: "string", value: GLSL_COLORMAP_DEFAULT, compare: true },
  colorScaleLo: { type: "number", value: 0, compare: true },
  colorScaleHi: { type: "number", value: 1, compare: true },
  isExpressionMode: false,
  getExpressionValue: { type: "accessor", value: 0 },
  getSelectionState: { type: "accessor", value: 0 }
};
var ScaledExpressionExtension = class extends LayerExtension {
  getShaders() {
    const { colormap } = this.props;
    return {
      modules: [shader_module_default],
      defines: {
        [COLORMAP_SHADER_PLACEHOLDER]: GLSL_COLORMAPS.includes(colormap) ? colormap : GLSL_COLORMAP_DEFAULT
      }
    };
  }
  updateState({ props, oldProps }) {
    var _a2, _b2, _c, _d;
    if (props.colormap !== oldProps.colormap) {
      const { gl } = this.context;
      if (this.state.model) {
        (_a2 = this.state.model) == null ? void 0 : _a2.delete();
        this.state.model = this._getModel(gl);
      } else {
        if (this.state.models) {
          (_b2 = this.state.models) == null ? void 0 : _b2.forEach((model) => model == null ? void 0 : model.delete());
        }
        if (this.state.topModel) {
          (_c = this.state.topModel) == null ? void 0 : _c.delete();
        }
        if (this.state.sideModel) {
          (_d = this.state.sideModel) == null ? void 0 : _d.delete();
        }
        if (this._getModels) {
          this.setState(this._getModels(this.context.gl));
        }
      }
      const attributeManager = this.getAttributeManager();
      if (attributeManager) {
        this.getAttributeManager().invalidateAll();
      }
    }
  }
  initializeState() {
    const layer = this.getCurrentLayer();
    if (layer.isComposite) {
      return;
    }
    const attributeManager = this.getAttributeManager();
    if (attributeManager) {
      attributeManager.add({
        expressionValue: {
          type: GL5.FLOAT,
          size: 1,
          transition: true,
          accessor: "getExpressionValue",
          defaultValue: 1,
          divisor: Object.values(attributeManager.attributes)[0].settings.divisor
        }
      });
    }
  }
  draw() {
    const {
      colorScaleLo,
      colorScaleHi,
      isExpressionMode
    } = this.props;
    const {
      topModel,
      sideModel,
      models,
      model
    } = this.state;
    const uniforms = {
      uColorScaleRange: [colorScaleLo, colorScaleHi],
      uIsExpressionMode: isExpressionMode
    };
    model == null ? void 0 : model.setUniforms(uniforms);
    models == null ? void 0 : models.forEach((m) => m.setUniforms(uniforms));
    topModel == null ? void 0 : topModel.setUniforms(uniforms);
    sideModel == null ? void 0 : sideModel.setUniforms(uniforms);
  }
};
ScaledExpressionExtension.extensionName = "ScaledExpressionExtension";
ScaledExpressionExtension.defaultProps = defaultProps6;

// src/layer-extensions/ScaledExpressionExtension/index.js
var ScaledExpressionExtension_default = ScaledExpressionExtension;

// src/layer-extensions/SelectionExtension/SelectionExtension.js
import GL6 from "@luma.gl/constants";
import { LayerExtension as LayerExtension2 } from "@deck.gl/core";

// src/layer-extensions/SelectionExtension/shader-module.js
var vs5 = "\nattribute float isSelected;\n";
var inject2 = {
  "vs:DECKGL_FILTER_GL_POSITION": "\n    position.z += (1. - isSelected) * .00005; // Add a small z offset for unselected points in the positive direction i.e into the screen.\n  ",
  "fs:#main-start": " // Gets rid of bad border effects (active after deck.gl 8.5): https://github.com/visgl/deck.gl/pull/6081\n    float distToCenterNew = length(unitPosition) * outerRadiusPixels;\n    float inCircleNew = step(distToCenterNew, outerRadiusPixels);\n    if (inCircleNew == 0.0) {\n      discard;\n    }\n  "
};
var shader_module_default2 = {
  name: "selection",
  vs: vs5,
  inject: inject2
};

// src/layer-extensions/SelectionExtension/SelectionExtension.js
var SelectionExtension = class extends LayerExtension2 {
  getShaders() {
    return {
      modules: [shader_module_default2]
    };
  }
  initializeState(context, extension) {
    const attributeManager = this.getAttributeManager();
    if (attributeManager) {
      attributeManager.add({
        isSelected: {
          type: GL6.FLOAT,
          size: 1,
          transition: true,
          accessor: "getCellIsSelected",
          defaultValue: 1,
          divisor: Number(extension.opts.instanced)
        }
      });
    }
  }
};
SelectionExtension.extensionName = "SelectionExtension";

// src/layer-extensions/SelectionExtension/index.js
var SelectionExtension_default = SelectionExtension;

// src/components/spatial/Spatial.js
var CELLS_LAYER_ID = "cells-layer";
var MOLECULES_LAYER_ID = "molecules-layer";
var NEIGHBORHOODS_LAYER_ID = "neighborhoods-layer";
var defaultGetCellCoords = (cell) => cell.xy;
var makeDefaultGetCellPolygon = (radius) => (cellEntry) => {
  var _a2;
  const cell = cellEntry[1];
  return ((_a2 = cell.poly) == null ? void 0 : _a2.length) ? cell.poly : square(cell.xy[0], cell.xy[1], radius);
};
var makeDefaultGetCellColors = (cellColors, theme) => (cellEntry) => {
  const [r, g, b, a] = cellColors && cellColors.get(cellEntry[0]) || getDefaultColor(theme);
  return [r, g, b, 255 * (a || 1)];
};
var makeDefaultGetCellIsSelected = (cellSelection) => {
  if (cellSelection) {
    const cellSelectionSet = new Set(cellSelection);
    return (cellEntry) => cellSelectionSet.has(cellEntry[0]) ? 1 : 0;
  }
  return () => 0;
};
var Spatial = class extends AbstractSpatialOrScatterplot {
  constructor(props) {
    super(props);
    this.cellsEntries = [];
    this.moleculesEntries = [];
    this.cellsQuadTree = null;
    this.cellsLayer = null;
    this.moleculesLayer = null;
    this.neighborhoodsLayer = null;
    this.imageLayers = [];
    this.layerLoaderSelections = {};
    this.randomColorData = {
      data: new Uint8Array(2048 * 2048 * 3).map((_, j) => j < 4 ? 0 : Math.round(255 * Math.random())),
      height: 2048,
      width: 2048
    };
    this.color = __spreadValues({}, this.randomColorData);
    this.expression = {
      data: new Uint8Array(2048 * 2048),
      height: 2048,
      width: 2048
    };
    this.onUpdateCellsData();
    this.onUpdateCellsLayer();
    this.onUpdateMoleculesData();
    this.onUpdateMoleculesLayer();
    this.onUpdateNeighborhoodsData();
    this.onUpdateNeighborhoodsLayer();
    this.onUpdateImages();
  }
  createCellsLayer(layerDef) {
    const {
      radius,
      stroked,
      visible,
      opacity
    } = layerDef;
    const { cellsEntries } = this;
    const {
      theme,
      cellFilter,
      cellSelection,
      setCellHighlight,
      setComponentHover,
      getCellIsSelected = makeDefaultGetCellIsSelected(cellsEntries.length === cellSelection.length ? null : cellSelection),
      cellColors,
      getCellColor = makeDefaultGetCellColors(cellColors, theme),
      getCellPolygon = makeDefaultGetCellPolygon(radius),
      onCellClick,
      lineWidthScale = 10,
      lineWidthMaxPixels = 2,
      geneExpressionColormapRange,
      cellColorEncoding,
      getExpressionValue,
      geneExpressionColormap
    } = this.props;
    const filteredCellsEntries = cellFilter ? cellsEntries.filter((cellEntry) => cellFilter.includes(cellEntry[0])) : cellsEntries;
    const flipYTooltip = true;
    return new PolygonLayer2(__spreadValues({
      id: CELLS_LAYER_ID,
      backgroundColor: [0, 0, 0],
      isSelected: getCellIsSelected,
      getPolygon: getCellPolygon,
      updateTriggers: {
        getLineWidth: [stroked],
        isSelected: cellSelection,
        getExpressionValue,
        getFillColor: [opacity, cellColorEncoding, cellSelection, cellColors],
        getLineColor: [cellColorEncoding, cellSelection, cellColors]
      },
      getFillColor: (cellEntry) => {
        const color = getCellColor(cellEntry);
        color[3] = opacity * 255;
        return color;
      },
      getLineColor: (cellEntry) => {
        const color = getCellColor(cellEntry);
        color[3] = 255;
        return color;
      },
      onClick: (info) => {
        if (onCellClick) {
          onCellClick(info);
        }
      },
      visible,
      getLineWidth: stroked ? 1 : 0,
      lineWidthScale,
      lineWidthMaxPixels,
      getExpressionValue,
      extensions: [new ScaledExpressionExtension_default()],
      colorScaleLo: geneExpressionColormapRange[0],
      colorScaleHi: geneExpressionColormapRange[1],
      isExpressionMode: cellColorEncoding === "geneSelection",
      colormap: geneExpressionColormap
    }, cellLayerDefaultProps(filteredCellsEntries, void 0, setCellHighlight, setComponentHover, flipYTooltip)));
  }
  createMoleculesLayer(layerDef) {
    const {
      setMoleculeHighlight,
      getMoleculeColor = (d) => PALETTE[d[2] % PALETTE.length],
      getMoleculePosition = (d) => [d[0], d[1], 0]
    } = this.props;
    const { moleculesEntries } = this;
    return new ScatterplotLayer2({
      id: MOLECULES_LAYER_ID,
      coordinateSystem: COORDINATE_SYSTEM5.CARTESIAN,
      data: moleculesEntries,
      pickable: true,
      autoHighlight: true,
      radiusMaxPixels: 3,
      opacity: layerDef.opacity,
      visible: layerDef.visible,
      getRadius: layerDef.radius,
      getPosition: getMoleculePosition,
      getLineColor: getMoleculeColor,
      getFillColor: getMoleculeColor,
      onHover: (info) => {
        if (setMoleculeHighlight) {
          if (info.object) {
            setMoleculeHighlight(info.object[3]);
          } else {
            setMoleculeHighlight(null);
          }
        }
      }
    });
  }
  createNeighborhoodsLayer(layerDef) {
    const {
      getNeighborhoodPolygon = (neighborhoodsEntry) => {
        const neighborhood = neighborhoodsEntry[1];
        return neighborhood.poly;
      }
    } = this.props;
    const { neighborhoodsEntries } = this;
    return new PolygonLayer2({
      id: NEIGHBORHOODS_LAYER_ID,
      getPolygon: getNeighborhoodPolygon,
      coordinateSystem: COORDINATE_SYSTEM5.CARTESIAN,
      data: neighborhoodsEntries,
      pickable: true,
      autoHighlight: true,
      stroked: true,
      filled: false,
      getElevation: 0,
      getLineWidth: 10,
      visible: layerDef.visible
    });
  }
  createSelectionLayers() {
    const {
      viewState,
      getCellCoords = defaultGetCellCoords,
      setCellSelection: setCellSelection2
    } = this.props;
    const { tool } = this.state;
    const { cellsQuadTree } = this;
    return getSelectionLayers(tool, viewState.zoom, CELLS_LAYER_ID, getCellCoords, setCellSelection2, cellsQuadTree);
  }
  createScaleBarLayer() {
    const {
      viewState,
      width,
      height,
      imageLayerLoaders = {},
      layers
    } = this.props;
    const use3d = (layers || []).some((i) => i.use3d);
    const loaders = Object.values(imageLayerLoaders);
    if (!viewState || !width || !height || loaders.length < 1)
      return null;
    const loader = loaders[0];
    if (!loader)
      return null;
    const source = getSourceFromLoader(loader);
    if (!source.meta)
      return null;
    const { physicalSizes } = source.meta;
    if (physicalSizes && !use3d) {
      const { x } = physicalSizes;
      const { unit: unit2, size } = x;
      if (unit2 && size) {
        return new ScaleBarLayer({
          id: "scalebar-layer",
          unit: unit2,
          size,
          viewState: __spreadProps(__spreadValues({}, viewState), { width, height })
        });
      }
      return null;
    }
    return null;
  }
  createImageLayer(rawLayerDef, loader, i) {
    const layerDef = __spreadProps(__spreadValues({}, rawLayerDef), {
      channels: rawLayerDef.channels.filter((channel) => channel.selection && channel.color && channel.slider)
    });
    let selections;
    const nextLoaderSelection = layerDef.channels.map((c) => c.selection);
    const prevLoaderSelection = this.layerLoaderSelections[layerDef.index];
    if (isEqual5(prevLoaderSelection, nextLoaderSelection)) {
      selections = prevLoaderSelection;
    } else {
      selections = nextLoaderSelection;
      this.layerLoaderSelections[layerDef.index] = nextLoaderSelection;
    }
    const layerProps = {
      colormap: layerDef.colormap,
      opacity: layerDef.opacity,
      transparentColor: layerDef.transparentColor,
      colors: layerDef.channels.map((c) => c.color),
      sliders: layerDef.channels.map((c) => c.slider),
      resolution: layerDef.resolution,
      renderingMode: layerDef.renderingMode,
      xSlice: layerDef.xSlice,
      ySlice: layerDef.ySlice,
      zSlice: layerDef.zSlice,
      callback: layerDef.callback,
      visibilities: layerDef.channels.map((c) => !layerDef.visible && typeof layerDef.visible === "boolean" ? false : c.visible)
    };
    if (!loader || !layerProps)
      return null;
    const {
      metadata: { transform },
      data
    } = loader;
    let modelMatrix;
    if (transform) {
      const { scale, translate } = transform;
      modelMatrix = new Matrix44().translate([translate.x, translate.y, 0]).scale(scale);
    } else if (layerDef.modelMatrix) {
      modelMatrix = new Matrix44(layerDef.modelMatrix);
    }
    if (rawLayerDef.type === "bitmask") {
      const {
        geneExpressionColormap,
        geneExpressionColormapRange = [0, 1],
        cellColorEncoding
      } = this.props;
      return new MultiscaleImageLayer({
        id: `bitmask-layer-${layerDef.index}-${i}`,
        channelsVisible: layerProps.visibilities,
        opacity: layerProps.opacity,
        modelMatrix,
        hoveredCell: Number(this.props.cellHighlight),
        renderSubLayers: renderSubBitmaskLayers,
        loader: data,
        selections,
        cellColorData: this.color.data,
        cellTexHeight: this.color.height,
        cellTexWidth: this.color.width,
        excludeBackground: true,
        onViewportLoad: layerProps.callback,
        colorScaleLo: geneExpressionColormapRange[0],
        colorScaleHi: geneExpressionColormapRange[1],
        isExpressionMode: cellColorEncoding === "geneSelection",
        colormap: geneExpressionColormap,
        expressionData: this.expression.data
      });
    }
    const [Layer2, layerLoader] = getLayerLoaderTuple(data, layerDef.use3d);
    return new Layer2({
      loader: layerLoader,
      id: `${layerDef.use3d ? "volume" : "image"}-layer-${layerDef.index}-${i}`,
      colors: layerProps.colors,
      contrastLimits: layerProps.sliders,
      selections,
      channelsVisible: layerProps.visibilities,
      opacity: layerProps.opacity,
      colormap: layerProps.colormap,
      modelMatrix,
      transparentColor: layerProps.transparentColor,
      resolution: layerProps.resolution,
      renderingMode: layerProps.renderingMode,
      pickable: false,
      xSlice: layerProps.xSlice,
      ySlice: layerProps.ySlice,
      zSlice: layerProps.zSlice,
      onViewportLoad: layerProps.callback
    });
  }
  createImageLayers() {
    const {
      layers,
      imageLayerLoaders = {},
      rasterLayersCallbacks = []
    } = this.props;
    const use3d = (layers || []).some((i) => i.use3d);
    const use3dIndex = (layers || []).findIndex((i) => i.use3d);
    return (layers || []).filter((layer) => layer.type === "raster" || layer.type === "bitmask").filter((layer) => use3d ? layer.use3d === use3d : true).map((layer, i) => this.createImageLayer(__spreadProps(__spreadValues({}, layer), { callback: rasterLayersCallbacks[use3d ? use3dIndex : i] }), imageLayerLoaders[layer.index], i));
  }
  getLayers() {
    const {
      imageLayers,
      cellsLayer,
      neighborhoodsLayer,
      moleculesLayer
    } = this;
    return [
      ...imageLayers,
      cellsLayer,
      neighborhoodsLayer,
      moleculesLayer,
      this.createScaleBarLayer(),
      ...this.createSelectionLayers()
    ];
  }
  onUpdateCellsData() {
    const { cells = {}, getCellCoords = defaultGetCellCoords } = this.props;
    const cellsEntries = Object.entries(cells);
    this.cellsEntries = cellsEntries;
    this.cellsQuadTree = createCellsQuadTree(cellsEntries, getCellCoords);
  }
  onUpdateCellsLayer() {
    const { layers } = this.props;
    const layerDef = (layers || []).find((layer) => layer.type === "cells");
    if (layerDef) {
      this.cellsLayer = this.createCellsLayer(layerDef);
    } else {
      this.cellsLayer = null;
    }
  }
  onUpdateCellColors() {
    const color = this.randomColorData;
    const { size } = this.props.cellColors;
    if (typeof size === "number") {
      const cellIds = this.props.cellColors.keys();
      color.data = new Uint8Array(color.height * color.width * 3).fill(getDefaultColor(this.props.theme)[0]);
      color.data[0] = 0;
      color.data[1] = 0;
      color.data[2] = 0;
      for (const id of cellIds) {
        if (id > 0) {
          const cellColor = this.props.cellColors.get(id);
          if (cellColor) {
            color.data.set(cellColor.slice(0, 3), Number(id) * 3);
          }
        }
      }
    }
    this.color = color;
  }
  onUpdateExpressionData() {
    var _a2;
    const { expressionData } = this.props;
    if ((_a2 = expressionData[0]) == null ? void 0 : _a2.length) {
      this.expression.data = new Uint8Array(this.expression.height * this.expression.width);
      this.expression.data.set(expressionData[0]);
    }
  }
  onUpdateMoleculesData() {
    const { molecules = {} } = this.props;
    const moleculesEntries = Object.entries(molecules).flatMap(([molecule, coords], index) => coords.map(([x, y]) => [x, y, index, molecule]));
    this.moleculesEntries = moleculesEntries;
  }
  onUpdateMoleculesLayer() {
    const { layers } = this.props;
    const layerDef = (layers || []).find((layer) => layer.type === "molecules");
    if (layerDef) {
      this.moleculesLayer = this.createMoleculesLayer(layerDef);
    } else {
      this.moleculesLayer = null;
    }
  }
  onUpdateNeighborhoodsData() {
    const { neighborhoods = {} } = this.props;
    const neighborhoodsEntries = Object.entries(neighborhoods);
    this.neighborhoodsEntries = neighborhoodsEntries;
  }
  onUpdateNeighborhoodsLayer() {
    const { layers } = this.props;
    const layerDef = (layers || []).find((layer) => layer.type === "neighborhoods");
    if (layerDef) {
      this.neighborhoodsLayer = this.createNeighborhoodsLayer(layerDef);
    } else {
      this.neighborhoodsLayer = null;
    }
  }
  onUpdateImages() {
    this.imageLayers = this.createImageLayers();
  }
  viewInfoDidUpdate() {
    const { getCellCoords = defaultGetCellCoords } = this.props;
    super.viewInfoDidUpdate(getCellCoords);
  }
  componentDidUpdate(prevProps) {
    this.viewInfoDidUpdate();
    const shallowDiff = (propName) => prevProps[propName] !== this.props[propName];
    if (["cells"].some(shallowDiff)) {
      this.onUpdateCellsData();
      this.forceUpdate();
    }
    if ([
      "layers",
      "cells",
      "cellFilter",
      "cellSelection",
      "cellColors",
      "geneExpressionColormapRange",
      "cellColorEncoding",
      "geneExpressionColormap"
    ].some(shallowDiff)) {
      this.onUpdateCellsLayer();
      this.forceUpdate();
    }
    if (["cellColors"].some(shallowDiff)) {
      this.onUpdateCellColors();
      this.forceUpdate();
    }
    if (["expressionData"].some(shallowDiff)) {
      this.onUpdateExpressionData();
      this.forceUpdate();
    }
    if (["molecules"].some(shallowDiff)) {
      this.onUpdateMoleculesData();
      this.forceUpdate();
    }
    if (["layers", "molecules"].some(shallowDiff)) {
      this.onUpdateMoleculesLayer();
      this.forceUpdate();
    }
    if (["neighborhoods"].some(shallowDiff)) {
      this.onUpdateNeighborhoodsData();
      this.forceUpdate();
    }
    if (["layers", "neighborhoods"].some(shallowDiff)) {
      this.onUpdateNeighborhoodsLayer();
      this.forceUpdate();
    }
    if ([
      "layers",
      "imageLayerLoaders",
      "cellColors",
      "cellHighlight",
      "geneExpressionColormapRange",
      "expressionData",
      "rasterLayersCallbacks",
      "geneExpressionColormap"
    ].some(shallowDiff)) {
      this.onUpdateImages();
      this.forceUpdate();
    }
  }
};
var SpatialWrapper = forwardRef2((props, deckRef) => /* @__PURE__ */ React20.createElement(Spatial, __spreadProps(__spreadValues({}, props), {
  deckRef
})));
var Spatial_default = SpatialWrapper;

// src/components/spatial/SpatialOptions.js
import React22, { useCallback as useCallback6 } from "react";
import debounce3 from "lodash/debounce";
import Checkbox from "@material-ui/core/Checkbox";
import TableCell3 from "@material-ui/core/TableCell";
import TableRow3 from "@material-ui/core/TableRow";
import Slider2 from "@material-ui/core/Slider";
import { makeStyles as makeStyles5, createStyles } from "@material-ui/core/styles";

// src/components/shared-plot-options/CellColorEncodingOption.js
import React21 from "react";
import TableCell2 from "@material-ui/core/TableCell";
import TableRow2 from "@material-ui/core/TableRow";
function CellColorEncodingOption(props) {
  const {
    observationsLabel,
    cellColorEncoding,
    setCellColorEncoding
  } = props;
  const classes = useStyles2();
  const observationsLabelNice = capitalize(observationsLabel);
  function handleColorEncodingChange(event) {
    setCellColorEncoding(event.target.value);
  }
  return /* @__PURE__ */ React21.createElement(TableRow2, null, /* @__PURE__ */ React21.createElement(TableCell2, {
    className: classes.labelCell,
    htmlFor: "cell-color-encoding-select"
  }, observationsLabelNice, " Color Encoding"), /* @__PURE__ */ React21.createElement(TableCell2, {
    className: classes.inputCell
  }, /* @__PURE__ */ React21.createElement(OptionSelect, {
    className: classes.select,
    value: cellColorEncoding,
    onChange: handleColorEncodingChange,
    inputProps: {
      id: "cell-color-encoding-select"
    }
  }, /* @__PURE__ */ React21.createElement("option", {
    value: "cellSetSelection"
  }, "Cell Sets"), /* @__PURE__ */ React21.createElement("option", {
    value: "geneSelection"
  }, "Gene Expression"))));
}

// src/components/spatial/SpatialOptions.js
var useToggleStyles = makeStyles5(() => createStyles({
  cameraLabel: {
    padding: "0px 0px 0px 16px"
  },
  box: {
    padding: "0px"
  },
  button: {
    padding: "0px 0px 0px 8px"
  }
}));
var ToggleFixedAxisButton = ({
  setSpatialAxisFixed,
  spatialAxisFixed,
  use3d
}) => {
  const classes = useToggleStyles();
  return /* @__PURE__ */ React22.createElement(TableRow3, null, /* @__PURE__ */ React22.createElement(TableCell3, {
    className: classes.cameraLabel
  }, "Fix Camera Axis"), /* @__PURE__ */ React22.createElement(TableCell3, {
    className: classes.box
  }, /* @__PURE__ */ React22.createElement(Checkbox, {
    onClick: () => setSpatialAxisFixed(!spatialAxisFixed),
    disabled: !use3d,
    checked: Boolean(spatialAxisFixed)
  })));
};
function SpatialOptions(props) {
  const {
    observationsLabel,
    cellColorEncoding,
    setCellColorEncoding,
    setSpatialAxisFixed,
    spatialAxisFixed,
    use3d,
    geneExpressionColormap,
    setGeneExpressionColormap,
    geneExpressionColormapRange,
    setGeneExpressionColormapRange,
    canShowExpressionOptions,
    canShowColorEncodingOption,
    canShow3DOptions
  } = props;
  function handleGeneExpressionColormapChange(event) {
    setGeneExpressionColormap(event.target.value);
  }
  function handleColormapRangeChange(event, value) {
    setGeneExpressionColormapRange(value);
  }
  const handleColormapRangeChangeDebounced = useCallback6(debounce3(handleColormapRangeChange, 5, { trailing: true }), [handleColormapRangeChange]);
  const classes = useStyles2();
  return /* @__PURE__ */ React22.createElement(OptionsContainer, null, canShowColorEncodingOption ? /* @__PURE__ */ React22.createElement(CellColorEncodingOption, {
    observationsLabel,
    cellColorEncoding,
    setCellColorEncoding
  }) : null, canShow3DOptions ? /* @__PURE__ */ React22.createElement(ToggleFixedAxisButton, {
    setSpatialAxisFixed,
    spatialAxisFixed,
    use3d
  }) : null, canShowExpressionOptions ? /* @__PURE__ */ React22.createElement(React22.Fragment, null, /* @__PURE__ */ React22.createElement(TableRow3, null, /* @__PURE__ */ React22.createElement(TableCell3, {
    className: classes.labelCell,
    htmlFor: "gene-expression-colormap-select"
  }, "Gene Expression Colormap"), /* @__PURE__ */ React22.createElement(TableCell3, {
    className: classes.inputCell
  }, /* @__PURE__ */ React22.createElement(OptionSelect, {
    className: classes.select,
    value: geneExpressionColormap,
    onChange: handleGeneExpressionColormapChange,
    inputProps: {
      id: "gene-expression-colormap-select"
    }
  }, GLSL_COLORMAPS.map((cmap) => /* @__PURE__ */ React22.createElement("option", {
    key: cmap,
    value: cmap
  }, cmap))))), /* @__PURE__ */ React22.createElement(TableRow3, null, /* @__PURE__ */ React22.createElement(TableCell3, {
    className: classes.labelCell
  }, "Gene Expression Colormap Range"), /* @__PURE__ */ React22.createElement(TableCell3, {
    className: classes.inputCell
  }, /* @__PURE__ */ React22.createElement(Slider2, {
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: geneExpressionColormapRange,
    onChange: handleColormapRangeChangeDebounced,
    "aria-labelledby": "gene-expression-colormap-range-slider",
    valueLabelDisplay: "auto",
    step: 5e-3,
    min: 0,
    max: 1
  })))) : null);
}

// src/components/spatial/SpatialTooltipSubscriber.js
import React23 from "react";
function SpatialTooltipSubscriber(props) {
  const {
    parentUuid,
    cellHighlight,
    width,
    height,
    getCellInfo
  } = props;
  const sourceUuid = useComponentHover();
  const viewInfo = useComponentViewInfo(parentUuid);
  const [cellInfo, x, y] = cellHighlight && getCellInfo ? [
    getCellInfo(cellHighlight),
    ...viewInfo && viewInfo.project ? viewInfo.project(cellHighlight) : [null, null]
  ] : [null, null, null];
  return cellInfo ? /* @__PURE__ */ React23.createElement(Tooltip2D, {
    x,
    y,
    parentUuid,
    sourceUuid,
    parentWidth: width,
    parentHeight: height
  }, /* @__PURE__ */ React23.createElement(TooltipContent, {
    info: cellInfo
  })) : null;
}

// src/components/spatial/SpatialSubscriber.js
var SPATIAL_DATA_TYPES = [
  "cells",
  "molecules",
  "raster",
  "cell-sets",
  "expression-matrix"
];
function SpatialSubscriber(props) {
  const {
    uuid,
    coordinationScopes,
    removeGridComponent,
    observationsLabelOverride: observationsLabel = "cell",
    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,
    subobservationsLabelOverride: subobservationsLabel = "molecule",
    subobservationsPluralLabelOverride: subobservationsPluralLabel = `${subobservationsLabel}s`,
    theme,
    disableTooltip = false,
    title: title16 = "Spatial",
    disable3d,
    globalDisable3d
  } = props;
  const loaders = useLoaders();
  const setComponentHover = useSetComponentHover();
  const setComponentViewInfo = useSetComponentViewInfo(uuid);
  const [{
    dataset,
    spatialZoom: zoom,
    spatialTargetX: targetX,
    spatialTargetY: targetY,
    spatialTargetZ: targetZ,
    spatialRotationX: rotationX,
    spatialRotationY: rotationY,
    spatialRotationZ: rotationZ,
    spatialRotationOrbit: rotationOrbit,
    spatialOrbitAxis: orbitAxis,
    spatialRasterLayers: rasterLayers,
    spatialCellsLayer: cellsLayer,
    spatialMoleculesLayer: moleculesLayer,
    spatialNeighborhoodsLayer: neighborhoodsLayer,
    cellFilter,
    cellHighlight,
    geneSelection,
    cellSetSelection,
    cellSetColor,
    cellColorEncoding,
    additionalCellSets,
    spatialAxisFixed,
    geneExpressionColormap,
    geneExpressionColormapRange
  }, {
    setSpatialZoom: setZoom,
    setSpatialTargetX: setTargetX,
    setSpatialTargetY: setTargetY,
    setSpatialTargetZ: setTargetZ,
    setSpatialRotationX: setRotationX,
    setSpatialRotationOrbit: setRotationOrbit,
    setSpatialOrbitAxis: setOrbitAxis,
    setSpatialRasterLayers: setRasterLayers,
    setSpatialCellsLayer: setCellsLayer,
    setSpatialMoleculesLayer: setMoleculesLayer,
    setSpatialNeighborhoodsLayer: setNeighborhoodsLayer,
    setCellFilter,
    setCellSetSelection,
    setCellHighlight,
    setCellSetColor,
    setCellColorEncoding,
    setAdditionalCellSets,
    setMoleculeHighlight,
    setSpatialAxisFixed,
    setGeneExpressionColormap,
    setGeneExpressionColormapRange
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.spatial, coordinationScopes);
  const [
    {
      rasterLayersCallbacks
    }
  ] = useAuxiliaryCoordination(COMPONENT_COORDINATION_TYPES.layerController, coordinationScopes);
  const use3d = rasterLayers == null ? void 0 : rasterLayers.some((l) => l.use3d);
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(SPATIAL_DATA_TYPES);
  const [width, height, deckRef] = useDeckCanvasSize();
  useEffect6(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [cells, cellsCount] = useCellsData(loaders, dataset, setItemIsReady, addUrl, false, { setSpatialCellsLayer: setCellsLayer }, { spatialCellsLayer: cellsLayer });
  const [molecules, moleculesCount, locationsCount] = useMoleculesData(loaders, dataset, setItemIsReady, addUrl, false, { setSpatialMoleculesLayer: setMoleculesLayer }, { spatialMoleculesLayer: moleculesLayer });
  const [neighborhoods] = useNeighborhoodsData(loaders, dataset, setItemIsReady, addUrl, false, { setSpatialNeighborhoodsLayer: setNeighborhoodsLayer }, { spatialNeighborhoodsLayer: neighborhoodsLayer });
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, false, { setCellSetSelection, setCellSetColor }, { cellSetSelection, cellSetColor });
  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);
  const [attrs] = useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, false);
  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(loaders, dataset, setItemIsReady, addUrl, false, { setSpatialRasterLayers: setRasterLayers }, { spatialRasterLayers: rasterLayers });
  const layers = useMemo6(() => {
    const canPassInCellsLayer = !imageLayerMeta.some((l) => {
      var _a2;
      return (_a2 = l == null ? void 0 : l.metadata) == null ? void 0 : _a2.isBitmask;
    });
    return [
      ...moleculesLayer ? [__spreadProps(__spreadValues({}, moleculesLayer), { type: "molecules" })] : [],
      ...cellsLayer && canPassInCellsLayer ? [__spreadProps(__spreadValues({}, cellsLayer), { type: "cells" })] : [],
      ...neighborhoodsLayer ? [__spreadProps(__spreadValues({}, neighborhoodsLayer), { type: "neighborhoods" })] : [],
      ...rasterLayers ? rasterLayers.map((l) => __spreadProps(__spreadValues({}, l), { type: l.type && ["raster", "bitmask"].includes(l.type) ? l.type : "raster" })) : []
    ];
  }, [cellsLayer, moleculesLayer, neighborhoodsLayer, rasterLayers, imageLayerMeta]);
  useEffect6(() => {
    if (typeof targetX !== "number" || typeof targetY !== "number") {
      const {
        initialTargetX,
        initialTargetY,
        initialTargetZ,
        initialZoom
      } = getInitialSpatialTargets({
        width,
        height,
        cells,
        imageLayerLoaders,
        useRaster: Boolean(loaders[dataset].loaders.raster),
        use3d
      });
      setTargetX(initialTargetX);
      setTargetY(initialTargetY);
      setTargetZ(initialTargetZ);
      setZoom(initialZoom);
    }
  }, [imageLayerLoaders, cells, targetX, targetY, setTargetX, setTargetY, setZoom, use3d]);
  const mergedCellSets = useMemo6(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const setCellSelectionProp = useCallback7((v) => {
    setCellSelection(v, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding);
  }, [
    additionalCellSets,
    cellSetColor,
    setCellColorEncoding,
    setAdditionalCellSets,
    setCellSetColor,
    setCellSetSelection
  ]);
  const cellColors = useMemo6(() => getCellColors({
    cellColorEncoding,
    expressionData: expressionData && expressionData[0],
    geneSelection,
    cellSets: mergedCellSets,
    cellSetSelection,
    cellSetColor,
    expressionDataAttrs: attrs,
    theme
  }), [
    cellColorEncoding,
    geneSelection,
    mergedCellSets,
    theme,
    cellSetColor,
    cellSetSelection,
    expressionData,
    attrs
  ]);
  const shiftedExpressionDataForBitmask = useMemo6(() => {
    const hasBitmask = imageLayerMeta.some((l) => {
      var _a2;
      return (_a2 = l == null ? void 0 : l.metadata) == null ? void 0 : _a2.isBitmask;
    });
    if ((attrs == null ? void 0 : attrs.rows) && expressionData && hasBitmask) {
      const maxId = attrs.rows.reduce((max2, curr) => Math.max(max2, Number(curr)));
      const result = new Uint8Array(maxId + 1);
      for (let i = 0; i < attrs.rows.length; i++) {
        const id = attrs.rows[i];
        result.set(expressionData[0].slice(i, i + 1), Number(id));
      }
      return [result];
    }
    return [new Uint8Array()];
  }, [attrs, expressionData, imageLayerMeta]);
  const cellSelection = useMemo6(() => Array.from(cellColors.keys()), [cellColors]);
  const getCellInfo = (cellId) => {
    const cell = cells[cellId];
    if (cell) {
      return __spreadValues({
        [`${capitalize(observationsLabel)} ID`]: cellId
      }, cell.factors);
    }
    return null;
  };
  const setViewState = ({
    zoom: newZoom,
    target,
    rotationX: newRotationX,
    rotationOrbit: newRotationOrbit,
    orbitAxis: newOrbitAxis
  }) => {
    setZoom(newZoom);
    setTargetX(target[0]);
    setTargetY(target[1]);
    setTargetZ(target[2] || null);
    setRotationX(newRotationX);
    setRotationOrbit(newRotationOrbit);
    setOrbitAxis(newOrbitAxis || null);
  };
  const subtitle = makeSpatialSubtitle({
    observationsCount: cellsCount,
    observationsLabel,
    observationsPluralLabel,
    subobservationsCount: moleculesCount,
    subobservationsLabel,
    subobservationsPluralLabel,
    locationsCount
  });
  const getExpressionValue = useExpressionValueGetter({ attrs, expressionData });
  const hasExpressionData = loaders[dataset].loaders["expression-matrix"];
  const hasCellsData = loaders[dataset].loaders.cells || imageLayerMeta.some((l) => {
    var _a2;
    return (_a2 = l == null ? void 0 : l.metadata) == null ? void 0 : _a2.isBitmask;
  });
  const canLoad3DLayers = imageLayerLoaders.some((loader) => Boolean(Array.from({
    length: loader.data.length
  }).filter((_, res) => canLoadResolution(loader.data, res)).length));
  const canShow3DOptions = canLoad3DLayers && !((disable3d == null ? void 0 : disable3d.length) === imageLayerLoaders.length) && !globalDisable3d;
  return /* @__PURE__ */ React24.createElement(TitleInfo, {
    title: title16,
    info: subtitle,
    isSpatial: true,
    urls,
    theme,
    removeGridComponent,
    isReady,
    options: canShow3DOptions || hasExpressionData ? /* @__PURE__ */ React24.createElement(SpatialOptions, {
      observationsLabel,
      cellColorEncoding,
      setCellColorEncoding,
      setSpatialAxisFixed,
      spatialAxisFixed,
      use3d,
      geneExpressionColormap,
      setGeneExpressionColormap,
      geneExpressionColormapRange,
      setGeneExpressionColormapRange,
      canShowExpressionOptions: hasExpressionData,
      canShowColorEncodingOption: hasCellsData && hasExpressionData,
      canShow3DOptions
    }) : null
  }, /* @__PURE__ */ React24.createElement(Spatial_default, {
    ref: deckRef,
    uuid,
    width,
    height,
    viewState: {
      zoom,
      target: [targetX, targetY, targetZ],
      rotationX,
      rotationY,
      rotationZ,
      rotationOrbit,
      orbitAxis
    },
    setViewState,
    layers,
    cells,
    cellFilter,
    cellSelection,
    cellHighlight,
    cellColors,
    molecules,
    neighborhoods,
    imageLayerLoaders,
    setCellFilter,
    setCellSelection: setCellSelectionProp,
    setCellHighlight,
    setMoleculeHighlight,
    setComponentHover: () => {
      setComponentHover(uuid);
    },
    updateViewInfo: setComponentViewInfo,
    rasterLayersCallbacks,
    spatialAxisFixed,
    geneExpressionColormap,
    geneExpressionColormapRange,
    expressionData: shiftedExpressionDataForBitmask,
    cellColorEncoding,
    getExpressionValue,
    theme
  }), !disableTooltip && /* @__PURE__ */ React24.createElement(SpatialTooltipSubscriber, {
    parentUuid: uuid,
    cellHighlight,
    width,
    height,
    getCellInfo
  }));
}

// src/components/scatterplot/ScatterplotSubscriber.js
import React28, {
  useState as useState8,
  useEffect as useEffect7,
  useCallback as useCallback9,
  useMemo as useMemo7
} from "react";
import { extent as extent2 } from "d3-array";
import isEqual6 from "lodash/isEqual";

// src/components/scatterplot/Scatterplot.js
import React25, { forwardRef as forwardRef3 } from "react";
import { PolygonLayer as PolygonLayer3, TextLayer as TextLayer3, ScatterplotLayer as ScatterplotLayer3 } from "@deck.gl/layers";
import { forceSimulation } from "d3-force";

// src/components/shared-spatial-scatterplot/force-collide-rects.js
import { quadtree as quadtree2 } from "d3-quadtree";
function constant(v) {
  return () => v;
}
function jiggle(v) {
  return v + (Math.random() - 0.5) * 1e-6;
}
function forceCollideRects() {
  let nodes;
  let masses;
  let strength = 1;
  let iterations = 1;
  let sizes;
  let size = constant([0, 0]);
  function xCenter(d) {
    return d.x + d.vx + sizes[d.index][0] / 2;
  }
  function yCenter(d) {
    return d.y + d.vy + sizes[d.index][1] / 2;
  }
  function prepare(quad) {
    if (quad.data) {
      quad.size = sizes[quad.data.index];
    } else {
      quad.size = [0, 0];
      for (let i = 0; i < 4; i++) {
        if (quad[i] && quad[i].size) {
          quad.size[0] = Math.max(quad.size[0], quad[i].size[0]);
          quad.size[1] = Math.max(quad.size[1], quad[i].size[1]);
        }
      }
    }
  }
  function force() {
    let node;
    let nodeSize;
    let nodeMass;
    let xi;
    let yi;
    const tree = quadtree2(nodes, xCenter, yCenter).visitAfter(prepare);
    function apply(quad, x0, y0, x1, y1) {
      const { data } = quad;
      const xSize = (nodeSize[0] + quad.size[0]) / 2;
      const ySize = (nodeSize[1] + quad.size[1]) / 2;
      if (data && data.index > node.index) {
        let x = jiggle(xi - xCenter(data));
        let y = jiggle(yi - yCenter(data));
        const xd = Math.abs(x) - xSize;
        const yd = Math.abs(y) - ySize;
        if (xd < 0 && yd < 0) {
          const l = Math.sqrt(x * x + y * y);
          const m = masses[data.index] / (nodeMass + masses[data.index]);
          if (Math.abs(xd) < Math.abs(yd)) {
            node.vx -= (x *= xd / l * strength) * m;
            data.vx += x * (1 - m);
          } else {
            node.vy -= (y *= yd / l * strength) * m;
            data.vy += y * (1 - m);
          }
        }
        return x0 > xi + xSize || x1 < xi - xSize || y0 > yi + ySize || y1 < yi - ySize;
      }
      return false;
    }
    function iterate() {
      for (let j = 0; j < nodes.length; j++) {
        node = nodes[j];
        nodeSize = sizes[j];
        nodeMass = masses[j];
        xi = xCenter(node);
        yi = yCenter(node);
        tree.visit(apply);
      }
    }
    for (let i = 0; i < iterations; i++) {
      iterate();
    }
  }
  force.initialize = (v) => {
    nodes = v;
    sizes = nodes.map(size);
    masses = sizes.map((d) => d[0] + d[1]);
  };
  force.iterations = (...v) => {
    if (v.length) {
      iterations = +v[0];
      return force;
    }
    return iterations;
  };
  force.strength = (...v) => {
    if (v.length) {
      strength = +v[0];
      return force;
    }
    return strength;
  };
  force.size = (...v) => {
    if (v.length) {
      size = typeof v[0] === "function" ? v[0] : constant(v[0]);
      return force;
    }
    return size;
  };
  return force;
}

// src/components/scatterplot/Scatterplot.js
var CELLS_LAYER_ID2 = "scatterplot";
var LABEL_FONT_FAMILY = "-apple-system, 'Helvetica Neue', Arial, sans-serif";
var NUM_FORCE_SIMULATION_TICKS = 100;
var LABEL_UPDATE_ZOOM_DELTA = 0.25;
var makeDefaultGetCellPosition = (mapping) => (cellEntry) => {
  const { mappings } = cellEntry[1];
  if (!(mapping in mappings)) {
    const available = Object.keys(mappings).map((s) => `"${s}"`).join(", ");
    throw new Error(`Expected to find "${mapping}", but available mappings are: ${available}`);
  }
  const mappedCell = mappings[mapping];
  return [mappedCell[0], -mappedCell[1], 0];
};
var makeDefaultGetCellCoords = (mapping) => (cell) => cell.mappings[mapping];
var makeDefaultGetCellColors2 = (cellColors, theme) => (cellEntry) => {
  const [r, g, b, a] = cellColors && cellColors.get(cellEntry[0]) || getDefaultColor(theme);
  return [r, g, b, 255 * (a || 1)];
};
var Scatterplot = class extends AbstractSpatialOrScatterplot {
  constructor(props) {
    super(props);
    this.cellsEntries = [];
    this.cellsQuadTree = null;
    this.cellsLayer = null;
    this.cellSetsForceSimulation = forceCollideRects();
    this.cellSetsLabelPrevZoom = null;
    this.cellSetsLayers = [];
    this.onUpdateCellsData();
    this.onUpdateCellsLayer();
    this.onUpdateCellSetsLayers();
  }
  createCellsLayer() {
    const { cellsEntries } = this;
    const {
      theme,
      mapping,
      getCellPosition = makeDefaultGetCellPosition(mapping),
      cellRadius = 1,
      cellOpacity = 1,
      cellFilter,
      cellSelection,
      setCellHighlight,
      setComponentHover,
      getCellIsSelected,
      cellColors,
      getCellColor = makeDefaultGetCellColors2(cellColors, theme),
      getExpressionValue,
      onCellClick,
      geneExpressionColormap,
      geneExpressionColormapRange = [0, 1],
      cellColorEncoding
    } = this.props;
    const filteredCellsEntries = cellFilter ? cellsEntries.filter((cellEntry) => cellFilter.includes(cellEntry[0])) : cellsEntries;
    return new ScatterplotLayer3(__spreadProps(__spreadValues({
      id: CELLS_LAYER_ID2,
      backgroundColor: theme === "dark" ? [0, 0, 0] : [241, 241, 241],
      getCellIsSelected,
      opacity: cellOpacity,
      radiusScale: cellRadius,
      radiusMinPixels: 1,
      radiusMaxPixels: 30,
      radiusUnits: "pixels",
      getPosition: getCellPosition,
      getFillColor: getCellColor,
      getLineColor: getCellColor,
      getRadius: 1,
      getExpressionValue,
      getLineWidth: 0,
      extensions: [
        new ScaledExpressionExtension_default(),
        new SelectionExtension_default({ instanced: true })
      ],
      colorScaleLo: geneExpressionColormapRange[0],
      colorScaleHi: geneExpressionColormapRange[1],
      isExpressionMode: cellColorEncoding === "geneSelection",
      colormap: geneExpressionColormap,
      onClick: (info) => {
        if (onCellClick) {
          onCellClick(info);
        }
      },
      updateTriggers: {
        getExpressionValue,
        getFillColor: [cellColorEncoding, cellSelection, cellColors],
        getLineColor: [cellColorEncoding, cellSelection, cellColors],
        getCellIsSelected
      }
    }, cellLayerDefaultProps(filteredCellsEntries, void 0, setCellHighlight, setComponentHover)), {
      stroked: 0
    }));
  }
  createCellSetsLayers() {
    const {
      theme,
      cellSetPolygons,
      viewState,
      cellSetPolygonsVisible,
      cellSetLabelsVisible,
      cellSetLabelSize
    } = this.props;
    const result = [];
    if (cellSetPolygonsVisible) {
      result.push(new PolygonLayer3({
        id: "cell-sets-polygon-layer",
        data: cellSetPolygons,
        stroked: true,
        filled: false,
        wireframe: true,
        lineWidthMaxPixels: 1,
        getPolygon: (d) => d.hull,
        getLineColor: (d) => d.color,
        getLineWidth: 1
      }));
    }
    if (cellSetLabelsVisible) {
      const { zoom } = viewState;
      const nodes = cellSetPolygons.map((p) => ({
        x: p.centroid[0],
        y: p.centroid[1],
        label: p.name
      }));
      const collisionForce = this.cellSetsForceSimulation.size((d) => [
        cellSetLabelSize * 1 / __pow(2, zoom) * 4 * d.label.length,
        cellSetLabelSize * 1 / __pow(2, zoom) * 1.5
      ]);
      forceSimulation().nodes(nodes).force("collision", collisionForce).tick(NUM_FORCE_SIMULATION_TICKS);
      result.push(new TextLayer3({
        id: "cell-sets-text-layer",
        data: nodes,
        getPosition: (d) => [d.x, d.y],
        getText: (d) => d.label,
        getColor: theme === "dark" ? [255, 255, 255] : [0, 0, 0],
        getSize: cellSetLabelSize,
        getAngle: 0,
        getTextAnchor: "middle",
        getAlignmentBaseline: "center",
        fontFamily: LABEL_FONT_FAMILY,
        fontWeight: "normal"
      }));
    }
    return result;
  }
  createSelectionLayers() {
    const {
      viewState,
      mapping,
      getCellCoords = makeDefaultGetCellCoords(mapping),
      setCellSelection: setCellSelection2
    } = this.props;
    const { tool } = this.state;
    const { cellsQuadTree } = this;
    const flipYTooltip = true;
    return getSelectionLayers(tool, viewState.zoom, CELLS_LAYER_ID2, getCellCoords, setCellSelection2, cellsQuadTree, flipYTooltip);
  }
  getLayers() {
    const {
      cellsLayer,
      cellSetsLayers
    } = this;
    return [
      cellsLayer,
      ...cellSetsLayers,
      ...this.createSelectionLayers()
    ];
  }
  onUpdateCellsData() {
    const {
      cells = {},
      mapping,
      getCellCoords = makeDefaultGetCellCoords(mapping)
    } = this.props;
    const cellsEntries = Object.entries(cells);
    this.cellsEntries = cellsEntries;
    this.cellsQuadTree = createCellsQuadTree(cellsEntries, getCellCoords);
  }
  onUpdateCellsLayer() {
    this.cellsLayer = this.createCellsLayer();
  }
  onUpdateCellSetsLayers(onlyViewStateChange) {
    if (onlyViewStateChange) {
      const { viewState, cellSetLabelsVisible } = this.props;
      const { zoom } = viewState;
      const { cellSetsLabelPrevZoom } = this;
      if (cellSetLabelsVisible && (cellSetsLabelPrevZoom === null || Math.abs(cellSetsLabelPrevZoom - zoom) > LABEL_UPDATE_ZOOM_DELTA)) {
        this.cellSetsLayers = this.createCellSetsLayers();
        this.cellSetsLabelPrevZoom = zoom;
      }
    } else {
      this.cellSetsLayers = this.createCellSetsLayers();
    }
  }
  viewInfoDidUpdate() {
    const {
      mapping,
      getCellPosition = makeDefaultGetCellPosition(mapping)
    } = this.props;
    super.viewInfoDidUpdate((cell) => getCellPosition([null, cell]));
  }
  componentDidUpdate(prevProps) {
    this.viewInfoDidUpdate();
    const shallowDiff = (propName) => prevProps[propName] !== this.props[propName];
    if (["cells"].some(shallowDiff)) {
      this.onUpdateCellsData();
      this.forceUpdate();
    }
    if ([
      "cells",
      "cellFilter",
      "cellSelection",
      "cellColors",
      "cellRadius",
      "cellOpacity",
      "cellRadiusMode",
      "geneExpressionColormap",
      "geneExpressionColormapRange",
      "geneSelection",
      "cellColorEncoding"
    ].some(shallowDiff)) {
      this.onUpdateCellsLayer();
      this.forceUpdate();
    }
    if ([
      "cellSetPolygons",
      "cellSetPolygonsVisible",
      "cellSetLabelsVisible",
      "cellSetLabelSize"
    ].some(shallowDiff)) {
      this.onUpdateCellSetsLayers(false);
      this.forceUpdate();
    }
    if (shallowDiff("viewState")) {
      this.onUpdateCellSetsLayers(true);
      this.forceUpdate();
    }
  }
};
var ScatterplotWrapper = forwardRef3((props, deckRef) => /* @__PURE__ */ React25.createElement(Scatterplot, __spreadProps(__spreadValues({}, props), {
  deckRef
})));
var Scatterplot_default = ScatterplotWrapper;

// src/components/scatterplot/ScatterplotTooltipSubscriber.js
import React26 from "react";
function ScatterplotTooltipSubscriber(props) {
  const {
    parentUuid,
    cellHighlight,
    width,
    height,
    getCellInfo
  } = props;
  const sourceUuid = useComponentHover();
  const viewInfo = useComponentViewInfo(parentUuid);
  const [cellInfo, x, y] = cellHighlight && getCellInfo ? [
    getCellInfo(cellHighlight),
    ...viewInfo && viewInfo.project ? viewInfo.project(cellHighlight) : [null, null]
  ] : [null, null, null];
  return cellInfo ? /* @__PURE__ */ React26.createElement(Tooltip2D, {
    x,
    y,
    parentUuid,
    sourceUuid,
    parentWidth: width,
    parentHeight: height
  }, /* @__PURE__ */ React26.createElement(TooltipContent, {
    info: cellInfo
  })) : null;
}

// src/components/scatterplot/ScatterplotOptions.js
import React27, { useCallback as useCallback8 } from "react";
import debounce4 from "lodash/debounce";
import Checkbox2 from "@material-ui/core/Checkbox";
import Slider3 from "@material-ui/core/Slider";
import TableCell4 from "@material-ui/core/TableCell";
import TableRow4 from "@material-ui/core/TableRow";
function ScatterplotOptions(props) {
  const {
    observationsLabel,
    cellRadius,
    setCellRadius,
    cellRadiusMode,
    setCellRadiusMode,
    cellOpacity,
    setCellOpacity,
    cellOpacityMode,
    setCellOpacityMode,
    cellSetLabelsVisible,
    setCellSetLabelsVisible,
    cellSetLabelSize,
    setCellSetLabelSize,
    cellSetPolygonsVisible,
    setCellSetPolygonsVisible,
    cellColorEncoding,
    setCellColorEncoding,
    geneExpressionColormap,
    setGeneExpressionColormap,
    geneExpressionColormapRange,
    setGeneExpressionColormapRange
  } = props;
  const observationsLabelNice = capitalize(observationsLabel);
  const classes = useStyles2();
  function handleCellRadiusModeChange(event) {
    setCellRadiusMode(event.target.value);
  }
  function handleCellOpacityModeChange(event) {
    setCellOpacityMode(event.target.value);
  }
  function handleRadiusChange(event, value) {
    setCellRadius(value);
  }
  function handleOpacityChange(event, value) {
    setCellOpacity(value);
  }
  function handleLabelVisibilityChange(event) {
    setCellSetLabelsVisible(event.target.checked);
  }
  function handleLabelSizeChange(event, value) {
    setCellSetLabelSize(value);
  }
  function handlePolygonVisibilityChange(event) {
    setCellSetPolygonsVisible(event.target.checked);
  }
  function handleGeneExpressionColormapChange(event) {
    setGeneExpressionColormap(event.target.value);
  }
  function handleColormapRangeChange(event, value) {
    setGeneExpressionColormapRange(value);
  }
  const handleColormapRangeChangeDebounced = useCallback8(debounce4(handleColormapRangeChange, 5, { trailing: true }), [handleColormapRangeChange]);
  return /* @__PURE__ */ React27.createElement(OptionsContainer, null, /* @__PURE__ */ React27.createElement(CellColorEncodingOption, {
    observationsLabel,
    cellColorEncoding,
    setCellColorEncoding
  }), /* @__PURE__ */ React27.createElement(TableRow4, null, /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.labelCell
  }, observationsLabelNice, " Set Labels Visible"), /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.inputCell
  }, /* @__PURE__ */ React27.createElement(Checkbox2, {
    className: classes.checkbox,
    checked: cellSetLabelsVisible,
    onChange: handleLabelVisibilityChange,
    name: "scatterplot-option-cell-set-labels",
    color: "default"
  }))), /* @__PURE__ */ React27.createElement(TableRow4, null, /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.labelCell
  }, observationsLabelNice, " Set Label Size"), /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.inputCell
  }, /* @__PURE__ */ React27.createElement(Slider3, {
    disabled: !cellSetLabelsVisible,
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: cellSetLabelSize,
    onChange: handleLabelSizeChange,
    "aria-labelledby": "cell-set-label-size-slider",
    valueLabelDisplay: "auto",
    step: 1,
    min: 8,
    max: 36
  }))), /* @__PURE__ */ React27.createElement(TableRow4, null, /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.labelCell
  }, observationsLabelNice, " Set Polygons Visible"), /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.inputCell
  }, /* @__PURE__ */ React27.createElement(Checkbox2, {
    className: classes.checkbox,
    checked: cellSetPolygonsVisible,
    onChange: handlePolygonVisibilityChange,
    name: "scatterplot-option-cell-set-polygons",
    color: "default"
  }))), /* @__PURE__ */ React27.createElement(TableRow4, null, /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.labelCell,
    htmlFor: "cell-radius-mode-select"
  }, observationsLabelNice, " Radius Mode"), /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.inputCell
  }, /* @__PURE__ */ React27.createElement(OptionSelect, {
    className: classes.select,
    value: cellRadiusMode,
    onChange: handleCellRadiusModeChange,
    inputProps: {
      id: "cell-radius-mode-select"
    }
  }, /* @__PURE__ */ React27.createElement("option", {
    value: "auto"
  }, "Auto"), /* @__PURE__ */ React27.createElement("option", {
    value: "manual"
  }, "Manual")))), /* @__PURE__ */ React27.createElement(TableRow4, null, /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.labelCell
  }, observationsLabelNice, " Radius"), /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.inputCell
  }, /* @__PURE__ */ React27.createElement(Slider3, {
    disabled: cellRadiusMode !== "manual",
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: cellRadius,
    onChange: handleRadiusChange,
    "aria-labelledby": "cell-radius-slider",
    valueLabelDisplay: "auto",
    step: 0.01,
    min: 0.01,
    max: 10
  }))), /* @__PURE__ */ React27.createElement(TableRow4, null, /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.labelCell,
    htmlFor: "cell-opacity-mode-select"
  }, observationsLabelNice, " Opacity Mode"), /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.inputCell
  }, /* @__PURE__ */ React27.createElement(OptionSelect, {
    className: classes.select,
    value: cellOpacityMode,
    onChange: handleCellOpacityModeChange,
    inputProps: {
      id: "cell-opacity-mode-select"
    }
  }, /* @__PURE__ */ React27.createElement("option", {
    value: "auto"
  }, "Auto"), /* @__PURE__ */ React27.createElement("option", {
    value: "manual"
  }, "Manual")))), /* @__PURE__ */ React27.createElement(TableRow4, null, /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.labelCell
  }, observationsLabelNice, " Opacity"), /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.inputCell
  }, /* @__PURE__ */ React27.createElement(Slider3, {
    disabled: cellOpacityMode !== "manual",
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: cellOpacity,
    onChange: handleOpacityChange,
    "aria-labelledby": "cell-opacity-slider",
    valueLabelDisplay: "auto",
    step: 0.05,
    min: 0,
    max: 1
  }))), /* @__PURE__ */ React27.createElement(TableRow4, null, /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.labelCell,
    htmlFor: "gene-expression-colormap-select"
  }, "Gene Expression Colormap"), /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.inputCell
  }, /* @__PURE__ */ React27.createElement(OptionSelect, {
    className: classes.select,
    value: geneExpressionColormap,
    onChange: handleGeneExpressionColormapChange,
    inputProps: {
      id: "gene-expression-colormap-select"
    }
  }, GLSL_COLORMAPS.map((cmap) => /* @__PURE__ */ React27.createElement("option", {
    key: cmap,
    value: cmap
  }, cmap))))), /* @__PURE__ */ React27.createElement(TableRow4, null, /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.labelCell
  }, "Gene Expression Colormap Range"), /* @__PURE__ */ React27.createElement(TableCell4, {
    className: classes.inputCell
  }, /* @__PURE__ */ React27.createElement(Slider3, {
    classes: { root: classes.slider, valueLabel: classes.sliderValueLabel },
    value: geneExpressionColormapRange,
    onChange: handleColormapRangeChangeDebounced,
    "aria-labelledby": "gene-expression-colormap-range-slider",
    valueLabelDisplay: "auto",
    step: 5e-3,
    min: 0,
    max: 1
  }))));
}

// src/components/shared-spatial-scatterplot/dynamic-opacity.js
import { OrthographicView as OrthographicView4 } from "deck.gl";
import clamp3 from "lodash/clamp";
function getPointSizeDevicePixels(devicePixelRatio, zoom, xRange, yRange, width, height) {
  const pointSize = 1e-3;
  const pointScreenSizeMax = 10;
  const pointScreenSizeMin = 1 / devicePixelRatio;
  const scaleFactor = __pow(2, zoom);
  const xAxisRange = 2 / (xRange * scaleFactor / width);
  const yAxisRange = 2 / (yRange * scaleFactor / height);
  const diagonalScreenSize = Math.sqrt(__pow(width, 2) + __pow(height, 2));
  const diagonalAxisRange = Math.sqrt(__pow(xAxisRange, 2) + __pow(yAxisRange, 2));
  const diagonalFraction = pointSize / diagonalAxisRange;
  const deviceSize = diagonalFraction * diagonalScreenSize;
  const pointSizeDevicePixels = clamp3(deviceSize, pointScreenSizeMin, pointScreenSizeMax);
  return pointSizeDevicePixels;
}
function getPointOpacity(zoom, xRange, yRange, width, height, numCells, avgFillDensity) {
  const N = numCells;
  const [minX, minY, maxX, maxY] = new OrthographicView4({ zoom }).makeViewport({
    height,
    width,
    viewState: { zoom, target: [0, 0, 0] }
  }).getBounds();
  const X = maxY - minY;
  const Y = maxX - minX;
  const X0 = xRange;
  const Y0 = yRange;
  const W = width;
  const H = height;
  let rho = avgFillDensity;
  if (!rho) {
    rho = Math.min(1, 1 / __pow(10, Math.log10(N) - 3));
  }
  const alpha = rho * W * H / N * (Y0 / Y) * (X0 / X);
  const pointOpacity = clamp3(alpha, 1.01 / 255, 1);
  return pointOpacity;
}

// src/components/scatterplot/ScatterplotSubscriber.js
var SCATTERPLOT_DATA_TYPES = ["cells", "expression-matrix", "cell-sets"];
function ScatterplotSubscriber(props) {
  const {
    uuid,
    coordinationScopes,
    removeGridComponent,
    theme,
    disableTooltip = false,
    observationsLabelOverride: observationsLabel = "cell",
    observationsPluralLabelOverride: observationsPluralLabel = `${observationsLabel}s`,
    title: titleOverride,
    averageFillDensity
  } = props;
  const loaders = useLoaders();
  const setComponentHover = useSetComponentHover();
  const setComponentViewInfo = useSetComponentViewInfo(uuid);
  const [{
    dataset,
    embeddingZoom: zoom,
    embeddingTargetX: targetX,
    embeddingTargetY: targetY,
    embeddingTargetZ: targetZ,
    embeddingType: mapping,
    cellFilter,
    cellHighlight,
    geneSelection,
    cellSetSelection,
    cellSetColor,
    cellColorEncoding,
    additionalCellSets,
    embeddingCellSetPolygonsVisible: cellSetPolygonsVisible,
    embeddingCellSetLabelsVisible: cellSetLabelsVisible,
    embeddingCellSetLabelSize: cellSetLabelSize,
    embeddingCellRadius: cellRadiusFixed,
    embeddingCellRadiusMode: cellRadiusMode,
    embeddingCellOpacity: cellOpacityFixed,
    embeddingCellOpacityMode: cellOpacityMode,
    geneExpressionColormap,
    geneExpressionColormapRange
  }, {
    setEmbeddingZoom: setZoom,
    setEmbeddingTargetX: setTargetX,
    setEmbeddingTargetY: setTargetY,
    setEmbeddingTargetZ: setTargetZ,
    setCellFilter,
    setCellSetSelection,
    setCellHighlight,
    setCellSetColor,
    setCellColorEncoding,
    setAdditionalCellSets,
    setEmbeddingCellSetPolygonsVisible: setCellSetPolygonsVisible,
    setEmbeddingCellSetLabelsVisible: setCellSetLabelsVisible,
    setEmbeddingCellSetLabelSize: setCellSetLabelSize,
    setEmbeddingCellRadius: setCellRadiusFixed,
    setEmbeddingCellRadiusMode: setCellRadiusMode,
    setEmbeddingCellOpacity: setCellOpacityFixed,
    setEmbeddingCellOpacityMode: setCellOpacityMode,
    setGeneExpressionColormap,
    setGeneExpressionColormapRange
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.scatterplot, coordinationScopes);
  const [urls, addUrl, resetUrls] = useUrls();
  const [width, height, deckRef] = useDeckCanvasSize();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(SCATTERPLOT_DATA_TYPES);
  const title16 = titleOverride || `Scatterplot (${mapping})`;
  useEffect7(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [cells, cellsCount] = useCellsData(loaders, dataset, setItemIsReady, addUrl, true);
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, false, { setCellSetSelection, setCellSetColor }, { cellSetSelection, cellSetColor });
  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);
  const [attrs] = useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, false);
  const [dynamicCellRadius, setDynamicCellRadius] = useState8(cellRadiusFixed);
  const [dynamicCellOpacity, setDynamicCellOpacity] = useState8(cellOpacityFixed);
  const mergedCellSets = useMemo7(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const setCellSelectionProp = useCallback9((v) => {
    setCellSelection(v, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding);
  }, [
    additionalCellSets,
    cellSetColor,
    setCellColorEncoding,
    setAdditionalCellSets,
    setCellSetColor,
    setCellSetSelection
  ]);
  const cellColors = useMemo7(() => getCellColors({
    cellColorEncoding,
    expressionData: expressionData && expressionData[0],
    geneSelection,
    cellSets: mergedCellSets,
    cellSetSelection,
    cellSetColor,
    expressionDataAttrs: attrs,
    theme
  }), [
    cellColorEncoding,
    geneSelection,
    mergedCellSets,
    theme,
    cellSetSelection,
    cellSetColor,
    expressionData,
    attrs
  ]);
  const [cellSetPolygonCache, setCellSetPolygonCache] = useState8([]);
  const cacheHas = (cache, key) => cache.findIndex((el) => isEqual6(el[0], key)) !== -1;
  const cacheGet = (cache, key) => {
    var _a2;
    return (_a2 = cache.find((el) => isEqual6(el[0], key))) == null ? void 0 : _a2[1];
  };
  const cellSetPolygons = useMemo7(() => {
    var _a2;
    if ((cellSetLabelsVisible || cellSetPolygonsVisible) && !cacheHas(cellSetPolygonCache, cellSetSelection) && ((_a2 = mergedCellSets == null ? void 0 : mergedCellSets.tree) == null ? void 0 : _a2.length) && Object.values(cells).length && (cellSetColor == null ? void 0 : cellSetColor.length)) {
      const newCellSetPolygons = getCellSetPolygons({
        cells,
        mapping,
        cellSets: mergedCellSets,
        cellSetSelection,
        cellSetColor,
        theme
      });
      setCellSetPolygonCache((cache) => [...cache, [cellSetSelection, newCellSetPolygons]]);
      return newCellSetPolygons;
    }
    return cacheGet(cellSetPolygonCache, cellSetSelection) || [];
  }, [
    cellSetPolygonsVisible,
    cellSetPolygonCache,
    cellSetLabelsVisible,
    theme,
    cells,
    mapping,
    mergedCellSets,
    cellSetSelection,
    cellSetColor
  ]);
  const cellSelection = useMemo7(() => Array.from(cellColors.keys()), [cellColors]);
  const [xRange, yRange, xExtent, yExtent, numCells] = useMemo7(() => {
    const cellValues = cells && Object.values(cells);
    if (cellValues == null ? void 0 : cellValues.length) {
      const cellCoordinates = Object.values(cells).map((c) => c.mappings[mapping]);
      const xE = extent2(cellCoordinates, (c) => c[0]);
      const yE = extent2(cellCoordinates, (c) => c[1]);
      const xR = xE[1] - xE[0];
      const yR = yE[1] - yE[0];
      return [xR, yR, xE, yE, cellValues.length];
    }
    return [null, null, null, null, null];
  }, [cells, mapping]);
  useEffect7(() => {
    if (xRange && yRange) {
      const pointSizeDevicePixels = getPointSizeDevicePixels(window.devicePixelRatio, zoom, xRange, yRange, width, height);
      setDynamicCellRadius(pointSizeDevicePixels);
      const nextCellOpacityScale = getPointOpacity(zoom, xRange, yRange, width, height, numCells, averageFillDensity);
      setDynamicCellOpacity(nextCellOpacityScale);
      if (typeof targetX !== "number" || typeof targetY !== "number") {
        const newTargetX = xExtent[0] + xRange / 2;
        const newTargetY = yExtent[0] + yRange / 2;
        const newZoom = Math.log2(Math.min(width / xRange, height / yRange));
        setTargetX(newTargetX);
        setTargetY(-newTargetY);
        setZoom(newZoom);
      }
    }
  }, [
    xRange,
    yRange,
    xExtent,
    yExtent,
    numCells,
    cells,
    mapping,
    width,
    height,
    zoom,
    averageFillDensity
  ]);
  const getCellInfo = useCallback9((cellId) => {
    const cellInfo = cells[cellId];
    return __spreadValues({
      [`${capitalize(observationsLabel)} ID`]: cellId
    }, cellInfo ? cellInfo.factors : {});
  }, [cells, observationsLabel]);
  const cellSelectionSet = useMemo7(() => new Set(cellSelection), [cellSelection]);
  const getCellIsSelected = useCallback9((cellEntry) => (cellSelectionSet || new Set([])).has(cellEntry[0]) ? 1 : 0, [cellSelectionSet]);
  const cellRadius = cellRadiusMode === "manual" ? cellRadiusFixed : dynamicCellRadius;
  const cellOpacity = cellOpacityMode === "manual" ? cellOpacityFixed : dynamicCellOpacity;
  const getExpressionValue = useExpressionValueGetter({ attrs, expressionData });
  return /* @__PURE__ */ React28.createElement(TitleInfo, {
    title: title16,
    info: `${cellsCount} ${pluralize(observationsLabel, observationsPluralLabel, cellsCount)}`,
    removeGridComponent,
    urls,
    theme,
    isReady,
    options: /* @__PURE__ */ React28.createElement(ScatterplotOptions, {
      observationsLabel,
      cellRadius: cellRadiusFixed,
      setCellRadius: setCellRadiusFixed,
      cellRadiusMode,
      setCellRadiusMode,
      cellOpacity: cellOpacityFixed,
      setCellOpacity: setCellOpacityFixed,
      cellOpacityMode,
      setCellOpacityMode,
      cellSetLabelsVisible,
      setCellSetLabelsVisible,
      cellSetLabelSize,
      setCellSetLabelSize,
      cellSetPolygonsVisible,
      setCellSetPolygonsVisible,
      cellColorEncoding,
      setCellColorEncoding,
      geneExpressionColormap,
      setGeneExpressionColormap,
      geneExpressionColormapRange,
      setGeneExpressionColormapRange
    })
  }, /* @__PURE__ */ React28.createElement(Scatterplot_default, {
    ref: deckRef,
    uuid,
    theme,
    viewState: { zoom, target: [targetX, targetY, targetZ] },
    setViewState: ({ zoom: newZoom, target }) => {
      setZoom(newZoom);
      setTargetX(target[0]);
      setTargetY(target[1]);
      setTargetZ(target[2] || 0);
    },
    cells,
    mapping,
    cellFilter,
    cellSelection,
    cellHighlight,
    cellColors,
    cellSetPolygons,
    cellSetLabelSize,
    cellSetLabelsVisible,
    cellSetPolygonsVisible,
    setCellFilter,
    setCellSelection: setCellSelectionProp,
    setCellHighlight,
    cellRadius,
    cellOpacity,
    cellColorEncoding,
    geneExpressionColormap,
    geneExpressionColormapRange,
    setComponentHover: () => {
      setComponentHover(uuid);
    },
    updateViewInfo: setComponentViewInfo,
    getExpressionValue,
    getCellIsSelected
  }), !disableTooltip && /* @__PURE__ */ React28.createElement(ScatterplotTooltipSubscriber, {
    parentUuid: uuid,
    cellHighlight,
    width,
    height,
    getCellInfo
  }));
}

// src/app/VitessceGrid.js
import React30, {
  useEffect as useEffect9
} from "react";

// src/app/vitessce-grid-layout/VitessceGridLayout.js
import React29 from "react";
import { Responsive, WidthProvider } from "react-grid-layout";
import isEqual7 from "lodash/isEqual";

// src/app/vitessce-grid-layout/layout-utils.js
var COMPONENT_ID_PREFIX = "i";
function sum(a) {
  return a.reduce((x, y) => x + y, 0);
}
function makeGridLayout(colXs, colLayout) {
  const colWs = [];
  for (let i = 0; i < colXs.length; i++) {
    colWs.push(colXs[i + 1] - colXs[i]);
  }
  return Object.entries(colLayout).map(([id, spec]) => ({
    i: id,
    y: spec.y,
    h: spec.h || 1,
    x: colXs[spec.x],
    w: sum(colWs.slice(spec.x, spec.x + (spec.w || 1)))
  }));
}
function getMaxRows(layouts) {
  return Math.max(...Object.values(layouts).map((layout) => Math.max(...layout.map((xywh) => xywh.y + xywh.h))));
}
function resolveLayout(layout) {
  const cols = {};
  const layouts = {};
  const breakpoints = {};
  const components = {};
  const positions = {};
  ("components" in layout ? layout.components : layout).forEach((def, i) => {
    const id = `${COMPONENT_ID_PREFIX}${i}`;
    components[id] = {
      component: def.component,
      props: def.props || {},
      coordinationScopes: def.coordinationScopes || {}
    };
    positions[id] = {
      id,
      x: def.x,
      y: def.y,
      w: def.w,
      h: def.h
    };
  });
  if ("components" in layout) {
    Object.entries(layout.columns).forEach(([width, columnXs]) => {
      cols[width] = columnXs[columnXs.length - 1];
      layouts[width] = makeGridLayout(columnXs, positions);
      breakpoints[width] = width;
    });
  } else {
    const id = "ID";
    const columnCount = 12;
    cols[id] = columnCount;
    layouts[id] = makeGridLayout(range(columnCount + 1), positions);
    breakpoints[id] = 1e3;
  }
  return {
    cols,
    layouts,
    breakpoints,
    components
  };
}

// src/app/vitessce-grid-layout/VitessceGridLayout.js
var ResponsiveGridLayout = WidthProvider(Responsive);
var ResponsiveHeightGridLayout = class extends ResponsiveGridLayout {
  componentDidUpdate(prevProps) {
    if (this.props.height !== prevProps.height) {
      this.onWindowResize();
    }
  }
};
function VitessceGridLayout(props) {
  const {
    layout,
    getComponent: getComponent2,
    padding: padding2,
    margin: margin2,
    draggableHandle,
    reactGridLayoutProps,
    rowHeight,
    theme,
    height,
    onRemoveComponent,
    onLayoutChange: onLayoutChangeProp
  } = props;
  const {
    cols: gridCols,
    layouts: gridLayouts,
    breakpoints: gridBreakpoints,
    components: gridComponents
  } = resolveLayout(layout);
  const maxRows = getMaxRows(gridLayouts);
  const style = /* @__PURE__ */ React29.createElement("style", null, `
        ${draggableHandle} {
          cursor: grab;
        }
        ${draggableHandle}:active {
          cursor: grabbing;
        }
     `);
  const onLayoutChange = (newLayout) => {
    if (newLayout.length === Object.entries(gridComponents).length) {
      const newComponentProps = [];
      newLayout.forEach((nextC) => {
        const id = nextC.i;
        const prevC = gridComponents[id];
        if (prevC) {
          const i = parseInt(id.substring(id.indexOf(COMPONENT_ID_PREFIX) + 1), 10);
          const nextProps = {
            x: nextC.x,
            y: nextC.y,
            w: nextC.w,
            h: nextC.h
          };
          const prevProps = {
            x: prevC.x,
            y: prevC.y,
            w: prevC.w,
            h: prevC.h
          };
          if (!isEqual7(nextProps, prevProps)) {
            newComponentProps.push([i, nextProps]);
          }
        }
      });
      if (newComponentProps.length > 0) {
        onLayoutChangeProp(newComponentProps);
      }
    }
  };
  const layoutChildren = Object.entries(gridComponents).map(([k, v], i) => {
    const Component = getComponent2(v.component);
    const removeGridComponent = () => {
      onRemoveComponent(i);
    };
    return /* @__PURE__ */ React29.createElement("div", {
      key: k
    }, /* @__PURE__ */ React29.createElement(Component, __spreadProps(__spreadValues({}, v.props), {
      uuid: i,
      coordinationScopes: v.coordinationScopes,
      theme,
      removeGridComponent
    })));
  });
  return gridLayouts && gridComponents && gridBreakpoints && gridCols && /* @__PURE__ */ React29.createElement(React29.Fragment, null, style, /* @__PURE__ */ React29.createElement(ResponsiveHeightGridLayout, __spreadValues({
    className: "layout",
    cols: gridCols,
    layouts: gridLayouts,
    breakpoints: gridBreakpoints,
    height,
    rowHeight: rowHeight || (window.innerHeight - 2 * padding2 - (maxRows - 1) * margin2) / maxRows,
    containerPadding: [padding2, padding2],
    margin: [margin2, margin2],
    draggableHandle,
    onLayoutChange
  }, reactGridLayoutProps), layoutChildren));
}
VitessceGridLayout.defaultProps = {
  padding: 10,
  margin: 10
};

// src/app/vitessce-grid-utils.js
import {
  useState as useState9,
  useEffect as useEffect8,
  useRef as useRef6
} from "react";

// src/loaders/JsonLoader.js
import Ajv from "ajv";

// src/loaders/AbstractLoader.js
import uuidv43 from "uuid/v4";
var AbstractLoader = class {
  constructor({
    type: type16,
    url,
    requestInit,
    options
  }) {
    this.type = type16;
    this.url = url;
    this.requestInit = requestInit;
    this.options = options;
    this.subscriptions = {};
  }
  load() {
    throw new Error("The load() method has not been implemented.");
  }
  subscribe(subscriber) {
    const token = uuidv43();
    this.subscriptions[token] = subscriber;
    return token;
  }
  unsubscribe(token) {
    delete this.subscriptions[token];
  }
  publish(data) {
    Object.values(this.subscriptions).forEach((subscriber) => {
      subscriber(data);
    });
  }
};

// src/loaders/AbstractTwoStepLoader.js
var AbstractTwoStepLoader = class extends AbstractLoader {
  constructor(dataSource, params) {
    super(params);
    this.dataSource = dataSource;
  }
};

// src/loaders/LoaderResult.js
var LoaderResult = class {
  constructor(data, url, coordinationValues = null) {
    this.data = data;
    this.url = url;
    this.coordinationValues = coordinationValues;
  }
};

// src/schemas/cells.schema.json
var $schema3 = "http://json-schema.org/draft-07/schema#";
var $id3 = "https://github.com/vitessce/vitessce/#cells";
var title3 = "Vitessce cell data";
var type3 = "object";
var definitions3 = {
  coord: {
    type: "array",
    minItems: 2,
    maxItems: 2,
    items: { type: "number" }
  },
  positiveFloatValues: {
    type: "object",
    patternProperties: {
      ".": {
        type: "number",
        minimum: 0
      }
    }
  },
  stringValues: {
    type: "object",
    patternProperties: {
      ".": {
        type: "string"
      }
    }
  }
};
var patternProperties = {
  ".": {
    additionalProperties: false,
    required: [],
    properties: {
      mappings: {
        type: "object",
        patternProperties: {
          ".": { $ref: "#/definitions/coord" }
        }
      },
      xy: { $ref: "#/definitions/coord" },
      genes: { $ref: "#/definitions/positiveFloatValues" },
      factors: { $ref: "#/definitions/stringValues" },
      poly: {
        type: "array",
        items: { $ref: "#/definitions/coord" }
      }
    }
  }
};
var cells_schema_default = {
  $schema: $schema3,
  $id: $id3,
  title: title3,
  type: type3,
  definitions: definitions3,
  patternProperties
};

// src/schemas/molecules.schema.json
var $schema4 = "http://json-schema.org/draft-07/schema#";
var $id4 = "https://github.com/vitessce/vitessce/#molecules";
var title4 = "Vitessce molecule data";
var type4 = "object";
var definitions4 = {
  coord: {
    type: "array",
    maxItems: 2,
    minItems: 2,
    items: { type: "number" }
  }
};
var patternProperties2 = {
  ".": {
    type: "array",
    items: { $ref: "#/definitions/coord" }
  }
};
var molecules_schema_default = {
  $schema: $schema4,
  $id: $id4,
  title: title4,
  type: type4,
  definitions: definitions4,
  patternProperties: patternProperties2
};

// src/schemas/neighborhoods.schema.json
var $schema5 = "http://json-schema.org/draft-07/schema#";
var $id5 = "https://github.com/vitessce/vitessce/#neighborhoods";
var title5 = "Vitessce neighborhood data";
var type5 = "object";
var definitions5 = {
  coord: {
    type: "array",
    maxItems: 2,
    minItems: 2,
    items: { type: "number" }
  }
};
var patternProperties3 = {
  ".": {
    additionalProperties: false,
    required: ["poly"],
    properties: {
      poly: {
        type: "array",
        maxItems: 3,
        minItems: 3,
        items: { $ref: "#/definitions/coord" }
      }
    }
  }
};
var neighborhoods_schema_default = {
  $schema: $schema5,
  $id: $id5,
  title: title5,
  type: type5,
  definitions: definitions5,
  patternProperties: patternProperties3
};

// src/schemas/raster.schema.json
var $schema6 = "http://json-schema.org/draft-07/schema#";
var $id6 = "https://github.com/vitessce/vitessce/#raster";
var title6 = "Vitessce image data";
var type6 = "object";
var definitions6 = {
  transform: {
    type: "object",
    additionalProperties: false,
    oneOf: [{ required: ["scale", "translate"] }, { required: ["matrix"] }],
    properties: {
      scale: { type: "number" },
      translate: {
        type: "object",
        additionalProperties: false,
        required: ["y", "x"],
        properties: {
          y: { type: "number" },
          x: { type: "number" }
        }
      },
      matrix: {
        type: "array",
        items: { type: "number" },
        minItems: 16,
        maxItems: 16
      }
    }
  },
  dimensions: {
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["field", "type", "values"],
      properties: {
        field: { type: "string" },
        type: {
          type: "string",
          enum: ["quantitative", "nominal", "ordinal", "temporal"]
        },
        values: {
          type: ["array", "null"],
          items: { type: "string" }
        }
      }
    }
  },
  metadata: {
    type: "object",
    additionalProperties: false,
    anyOf: [{ required: ["dimensions", "isPyramid"] }, { required: ["transform"] }, { required: ["omeTiffOffsetsUrl"] }, { required: ["isBitmask"] }],
    properties: {
      dimensions: { $ref: "#/definitions/dimensions" },
      isPyramid: { type: "boolean" },
      transform: { $ref: "#/definitions/transform" },
      isBitmask: { type: "boolean" },
      omeTiffOffsetsUrl: { type: "string", format: "uri" }
    }
  },
  requestInit: {
    type: "object",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  image: {
    type: "object",
    additionalProperties: false,
    required: ["name", "url", "type"],
    properties: {
      name: { type: "string" },
      url: { type: "string", format: "uri" },
      type: { type: "string" },
      metadata: { $ref: "#/definitions/metadata" },
      requestInit: { $ref: "#/definitions/requestInit" }
    }
  }
};
var additionalProperties = false;
var required = ["schemaVersion", "images"];
var properties = {
  schemaVersion: { type: "string" },
  usePhysicalSizeScaling: { type: "boolean", description: "Default is false: passing true in will infer scaling from the reported physcial size" },
  renderLayers: { type: "array", items: { type: "string" } },
  images: {
    type: "array",
    items: { $ref: "#/definitions/image" }
  }
};
var raster_schema_default = {
  $schema: $schema6,
  $id: $id6,
  title: title6,
  type: type6,
  definitions: definitions6,
  additionalProperties,
  required,
  properties
};

// src/loaders/JsonLoader.js
var typeToSchema = {
  cells: cells_schema_default,
  molecules: molecules_schema_default,
  neighborhoods: neighborhoods_schema_default,
  raster: raster_schema_default,
  "cell-sets": cell_sets_schema_default
};
var JsonLoader = class extends AbstractTwoStepLoader {
  constructor(dataSource, params) {
    super(dataSource, params);
    const { type: type16 } = params;
    this.schema = typeToSchema[type16];
  }
  load() {
    const {
      url,
      type: type16,
      fileType
    } = this;
    if (this.data) {
      return this.data;
    }
    this.data = this.dataSource.data.then((data) => {
      if (data instanceof AbstractLoaderError) {
        return Promise.reject(data);
      }
      const [valid, reason] = this.validate(data);
      if (valid) {
        return Promise.resolve(new LoaderResult(data, url));
      }
      return Promise.reject(new LoaderValidationError(type16, fileType, url, reason));
    });
    return this.data;
  }
  validate(data) {
    const { schema, type: type16 } = this;
    if (!schema) {
      throw Error(`No schema for ${type16}`);
    }
    const validate = new Ajv().compile(schema);
    const valid = validate(data);
    let failureReason;
    if (!valid) {
      failureReason = validate.errors;
    }
    return [valid, failureReason];
  }
};

// src/loaders/MatrixZarrLoader.js
import { openArray } from "zarr";
var MatrixZarrLoader = class extends AbstractTwoStepLoader {
  loadAttrs() {
    if (this.attrs) {
      return this.attrs;
    }
    this.attrs = this.dataSource.getJson(".zattrs");
    return this.attrs;
  }
  loadArr() {
    const { store } = this.dataSource;
    if (this.arr) {
      return this.arr;
    }
    this.arr = openArray({ store, path: "/", mode: "r" }).then((z) => new Promise((resolve) => {
      z.getRaw([null, null]).then(resolve);
    }));
    return this.arr;
  }
  load() {
    return Promise.all([this.loadAttrs(), this.loadArr()]).then((data) => Promise.resolve(new LoaderResult(data, null)));
  }
};

// src/schemas/genes.schema.json
var $schema7 = "http://json-schema.org/draft-07/schema#";
var $id7 = "https://github.com/vitessce/vitessce/#genes";
var title7 = "Vitessce gene data";
var type7 = "object";
var definitions7 = {
  positiveFloatValues: {
    type: "object",
    patternProperties: {
      ".": {
        type: "number",
        minimum: 0
      }
    }
  }
};
var patternProperties4 = {
  ".": {
    additionalProperties: false,
    required: ["max", "cells"],
    properties: {
      max: { type: "number" },
      cells: { $ref: "#/definitions/positiveFloatValues" }
    }
  }
};
var genes_schema_default = {
  $schema: $schema7,
  $id: $id7,
  title: title7,
  type: type7,
  definitions: definitions7,
  patternProperties: patternProperties4
};

// src/loaders/GenesJsonAsMatrixZarrLoader.js
var GenesJsonAsMatrixZarrLoader = class extends JsonLoader {
  constructor(dataSource, params) {
    super(dataSource, params);
    this.schema = genes_schema_default;
  }
  load() {
    var __super = (key) => super[key];
    return __async(this, null, function* () {
      const payload = yield __super("load").call(this).catch((reason) => Promise.resolve(reason));
      if (payload instanceof AbstractLoaderError) {
        return Promise.reject(payload);
      }
      const { data, url } = payload;
      const cols = Object.keys(data);
      const rows = cols.length > 0 ? Object.keys(data[cols[0]].cells) : [];
      const attrs = { rows, cols };
      const normalizedFlatMatrix = rows.flatMap((cellId) => cols.map((geneId) => data[geneId].cells[cellId] / data[geneId].max * 255));
      const arr = { data: Uint8Array.from(normalizedFlatMatrix) };
      return Promise.resolve(new LoaderResult([attrs, arr], url));
    });
  }
};

// src/loaders/ClustersJsonAsMatrixZarrLoader.js
import { extent as extent3 } from "d3-array";
import range6 from "lodash/range";

// src/schemas/clusters.schema.json
var $schema8 = "http://json-schema.org/draft-07/schema#";
var $id8 = "https://github.com/vitessce/vitessce/#clusters";
var title8 = "Vitessce cluster data";
var type8 = "object";
var definitions8 = {
  stringArray: {
    type: "array",
    items: { type: "string" }
  },
  matrix: {
    type: "array",
    items: {
      type: "array",
      items: {
        type: "number",
        minimum: 0,
        maximum: 1
      }
    }
  }
};
var additionalProperties2 = false;
var required2 = ["rows", "cols", "matrix"];
var properties2 = {
  rows: { $ref: "#/definitions/stringArray" },
  cols: { $ref: "#/definitions/stringArray" },
  matrix: { $ref: "#/definitions/matrix" }
};
var clusters_schema_default = {
  $schema: $schema8,
  $id: $id8,
  title: title8,
  type: type8,
  definitions: definitions8,
  additionalProperties: additionalProperties2,
  required: required2,
  properties: properties2
};

// src/loaders/ClustersJsonAsMatrixZarrLoader.js
var ClustersJsonAsMatrixZarrLoader = class extends JsonLoader {
  constructor(dataSource, params) {
    super(dataSource, params);
    this.schema = clusters_schema_default;
  }
  load() {
    var __super = (key) => super[key];
    return __async(this, null, function* () {
      const payload = yield __super("load").call(this).catch((reason) => Promise.resolve(reason));
      if (payload instanceof AbstractLoaderError) {
        return Promise.reject(payload);
      }
      const { data, url } = payload;
      const { rows, cols, matrix } = data;
      const attrs = {
        rows: cols,
        cols: rows
      };
      const shape = [attrs.rows.length, attrs.cols.length];
      const normalizedMatrix = matrix.map((col) => {
        const [min, max2] = extent3(col);
        const normalize2 = (d) => Math.floor((d - min) / (max2 - min) * 255);
        return col.map(normalize2);
      });
      const tNormalizedMatrix = range6(shape[0]).map((i) => range6(shape[1]).map((j) => normalizedMatrix[j][i]));
      const normalizedFlatMatrix = tNormalizedMatrix.flat();
      const arr = { data: Uint8Array.from(normalizedFlatMatrix) };
      return Promise.resolve(new LoaderResult([attrs, arr], url));
    });
  }
};

// src/loaders/RasterJsonLoader.js
import { openArray as openArray2 } from "zarr";
function initLoader(imageData) {
  return __async(this, null, function* () {
    const {
      type: type16,
      url,
      metadata,
      requestInit
    } = imageData;
    switch (type16) {
      case "zarr": {
        const {
          dimensions,
          isPyramid,
          transform
        } = metadata || {};
        const labels = dimensions.map((d) => d.field);
        let source;
        if (isPyramid) {
          const metadataUrl = `${url}${url.slice(-1) === "/" ? "" : "/"}.zmetadata`;
          const response = yield fetch(metadataUrl);
          const { metadata: zarrMetadata } = yield response.json();
          const paths = Object.keys(zarrMetadata).filter((metaKey) => metaKey.includes(".zarray")).map((arrMetaKeys) => arrMetaKeys.slice(0, -7));
          const data = yield Promise.all(paths.map((path) => openArray2({ store: url, path })));
          const [yChunk, xChunk] = data[0].chunks.slice(-2);
          const size = Math.min(yChunk, xChunk);
          const tileSize = __pow(2, Math.floor(Math.log2(size)));
          source = data.map((d) => new ZarrPixelSource(d, labels, tileSize));
        } else {
          const data = yield openArray2({ store: url });
          source = new ZarrPixelSource(data, labels);
        }
        return { data: source, metadata: { dimensions, transform }, channels: (dimensions.find((d) => d.field === "channel") || dimensions[0]).values };
      }
      case "ome-tiff": {
        let loader;
        if (metadata && "omeTiffOffsetsUrl" in metadata) {
          const { omeTiffOffsetsUrl } = metadata;
          const res = yield fetch(omeTiffOffsetsUrl, requestInit || {});
          if (res.ok) {
            const offsets = yield res.json();
            loader = yield loadOmeTiff(url, {
              offsets,
              headers: requestInit == null ? void 0 : requestInit.headers
            });
          } else {
            throw new Error("Offsets not found but provided.");
          }
        } else {
          loader = yield loadOmeTiff(url, { headers: requestInit == null ? void 0 : requestInit.headers });
        }
        const { Pixels: { Channels } } = loader.metadata;
        const channels2 = Array.isArray(Channels) ? Channels.map((channel, i) => channel.Name || `Channel ${i}`) : [Channels.Name || `Channel ${0}`];
        return __spreadProps(__spreadValues({}, loader), { channels: channels2 });
      }
      default: {
        throw Error(`Image type (${type16}) is not supported`);
      }
    }
  });
}
var RasterLoader = class extends JsonLoader {
  constructor(dataSource, params) {
    const { url, options } = params;
    if (!url && options) {
      dataSource.url = URL.createObjectURL(new Blob([JSON.stringify(options)]));
    }
    super(dataSource, params);
    this.schema = raster_schema_default;
  }
  load() {
    var __super = (key) => super[key];
    return __async(this, null, function* () {
      const payload = yield __super("load").call(this).catch((reason) => Promise.resolve(reason));
      if (payload instanceof AbstractLoaderError) {
        return Promise.reject(payload);
      }
      const { data: raster } = payload;
      const { images, renderLayers, usePhysicalSizeScaling = false } = raster;
      const urls = images.filter((image) => !image.url.includes("zarr")).map((image) => [image.url, image.name]);
      const imagesWithLoaderCreators = images.map((image) => __spreadProps(__spreadValues({}, image), {
        loaderCreator: () => __async(this, null, function* () {
          return initLoader(image);
        })
      }));
      if (!this.autoImageCache) {
        this.autoImageCache = initializeRasterLayersAndChannels(imagesWithLoaderCreators, renderLayers, usePhysicalSizeScaling);
      }
      return this.autoImageCache.then((autoImages) => {
        const [autoImageLayers, imageLayerLoaders, imageLayerMeta] = autoImages;
        const coordinationValues = {
          spatialRasterLayers: autoImageLayers
        };
        return new LoaderResult({ loaders: imageLayerLoaders, meta: imageLayerMeta }, urls, coordinationValues);
      });
    });
  }
};

// src/loaders/OmeZarrLoader.js
function hexToRgb(hex) {
  const result = /^#?([A-F\d]{2})([A-F\d]{2})([A-F\d]{2})$/i.exec(hex);
  return [
    parseInt(result[1].toLowerCase(), 16),
    parseInt(result[2].toLowerCase(), 16),
    parseInt(result[3].toLowerCase(), 16)
  ];
}
var OmeZarrLoader = class extends AbstractTwoStepLoader {
  load() {
    return __async(this, null, function* () {
      var _a2, _b2;
      const payload = yield this.dataSource.getJson(".zattrs").catch((reason) => Promise.resolve(reason));
      if (payload instanceof AbstractLoaderError) {
        return Promise.reject(payload);
      }
      const loader = yield loadOmeZarr(this.url, { fetchOptions: this.requestInit, type: "multiscales" });
      const { metadata } = loader;
      const { omero } = metadata;
      if (!omero) {
        console.error("Path for image not valid");
        return Promise.reject(payload);
      }
      const { rdefs, channels: channels2 } = omero;
      const t = (_a2 = rdefs.defaultT) != null ? _a2 : 0;
      const z = (_b2 = rdefs.defaultZ) != null ? _b2 : 0;
      const imagesWithLoaderCreators = [
        {
          name: omero.name,
          channels: channels2.map((channel, i) => ({
            selection: { z, t, c: i },
            slider: [channel.window.start, channel.window.end],
            color: hexToRgb(channel.color)
          })),
          loaderCreator: () => __async(this, null, function* () {
            return __spreadProps(__spreadValues({}, loader), { channels: channels2.map((c) => c.label) });
          })
        }
      ];
      const [
        autoImageLayers,
        imageLayerLoaders,
        imageLayerMeta
      ] = yield initializeRasterLayersAndChannels(imagesWithLoaderCreators, void 0);
      const coordinationValues = {
        spatialRasterLayers: autoImageLayers
      };
      return Promise.resolve(new LoaderResult({ loaders: imageLayerLoaders, meta: imageLayerMeta }, [], coordinationValues));
    });
  }
};

// src/components/sets/io.js
import Ajv2 from "ajv";
import isNil2 from "lodash/isNil";
import { dsvFormat } from "d3-dsv";
import { parse as json2csv } from "json2csv";
function tryUpgradeTreeToLatestSchema(currTree, datatype) {
  const validate = new Ajv2().compile(HIERARCHICAL_SCHEMAS[datatype].schema);
  const valid = validate(currTree);
  if (!valid) {
    const failureReason = JSON.stringify(validate.errors, null, 2);
    throw new Error(`Tree validation failed: ${failureReason}`);
  } else if (currTree.datatype !== datatype) {
    throw new Error(`The data type does not match the expected data type of '${datatype}'.`);
  }
  if (currTree.version === "0.1.2") {
    return __spreadProps(__spreadValues({}, currTree), {
      version: HIERARCHICAL_SCHEMAS[datatype].latestVersion,
      tree: currTree.tree.map((levelZeroNode) => nodeTransform(levelZeroNode, (n) => !n.children && Array.isArray(n.set), (n) => __spreadProps(__spreadValues({}, n), { set: n.set.map((itemId) => [itemId, null]) }), []))
    });
  }
  return currTree;
}
function handleImportJSON(result, datatype, theme) {
  let importData = JSON.parse(result);
  importData = tryUpgradeTreeToLatestSchema(importData, datatype);
  return importData;
}
function handleImportTabular(result, datatype, theme) {
  const dsvParser = dsvFormat(SEPARATOR_TABULAR);
  const importData = dsvParser.parse(result, (row) => ({
    groupName: row.groupName,
    setName: row.setName,
    setColor: row.setColor ? colorStringToArray(row.setColor) : getDefaultColor(theme),
    obsId: row.obsId,
    predictionScore: isNil2(row.predictionScore) || row.predictionScore === NA_VALUE_TABULAR ? null : +row.predictionScore
  }));
  const validate = new Ajv2().compile(TABULAR_SCHEMAS[datatype].schema);
  const valid = validate(importData);
  if (!valid) {
    const failureReason = JSON.stringify(validate.errors, null, 2);
    throw new Error(`Import validation failed: ${failureReason}`);
  } else {
    const treeToImport = {
      version: HIERARCHICAL_SCHEMAS[datatype].latestVersion,
      datatype,
      tree: []
    };
    const uniqueGroupNames = Array.from(new Set(importData.map((d) => d.groupName)));
    uniqueGroupNames.forEach((groupName) => {
      const levelZeroNode = {
        name: groupName,
        children: []
      };
      const groupRows = importData.filter((d) => d.groupName === groupName);
      const uniqueSetNames = Array.from(new Set(groupRows.map((d) => d.setName)));
      uniqueSetNames.forEach((setName) => {
        const setRows = groupRows.filter((d) => d.setName === setName);
        const { setColor } = setRows[0];
        const levelOneNode = {
          name: setName,
          color: setColor,
          set: setRows.map((d) => [d.obsId, d.predictionScore])
        };
        levelZeroNode.children.push(levelOneNode);
      });
      treeToImport.tree.push(levelZeroNode);
    });
    return treeToImport;
  }
}
function handleExportJSON(result) {
  const jsonString = JSON.stringify(result);
  const dataString = `data:${MIME_TYPE_JSON};charset=utf-8,${encodeURIComponent(jsonString)}`;
  return dataString;
}
function handleExportTabular(result) {
  const exportData = [];
  result.tree.forEach((levelZeroNode) => {
    levelZeroNode.children.forEach((levelOneNode) => {
      if (levelOneNode.set) {
        levelOneNode.set.forEach(([obsId, prob]) => {
          exportData.push({
            groupName: levelZeroNode.name,
            setName: levelOneNode.name,
            setColor: colorArrayToString(levelOneNode.color),
            obsId,
            predictionScore: isNil2(prob) ? NA_VALUE_TABULAR : prob
          });
        });
      }
    });
  });
  const csvString = json2csv(exportData, {
    fields: ["groupName", "setName", "setColor", "obsId", "predictionScore"],
    delimiter: SEPARATOR_TABULAR
  });
  const dataString = `data:${MIME_TYPE_TABULAR};charset=utf-8,${encodeURIComponent(csvString)}`;
  return dataString;
}
function downloadForUser(dataString, fileName) {
  const downloadAnchorNode = document.createElement("a");
  downloadAnchorNode.setAttribute("href", dataString);
  downloadAnchorNode.setAttribute("download", fileName);
  document.body.appendChild(downloadAnchorNode);
  downloadAnchorNode.click();
  downloadAnchorNode.remove();
}

// src/loaders/CellSetsJsonLoader.js
var CellSetsJsonLoader = class extends JsonLoader {
  constructor(dataSource, params) {
    super(dataSource, params);
    this.schema = cell_sets_schema_default;
  }
  load() {
    var __super = (key) => super[key];
    return __async(this, null, function* () {
      const payload = yield __super("load").call(this).catch((reason) => Promise.resolve(reason));
      if (payload instanceof AbstractLoaderError) {
        return Promise.reject(payload);
      }
      const { data: rawData, url } = payload;
      const upgradedData = tryUpgradeTreeToLatestSchema(rawData, "cell");
      const coordinationValues = {
        cellSetSelection: [],
        cellSetColor: []
      };
      if (upgradedData && upgradedData.tree.length >= 1) {
        const { tree } = upgradedData;
        const newAutoSetSelectionParentName = tree[0].name;
        const newAutoSetSelections = tree[0].children.map((node) => [newAutoSetSelectionParentName, node.name]);
        const newAutoSetColors = initializeCellSetColor(upgradedData, []);
        coordinationValues.cellSetSelection = newAutoSetSelections;
        coordinationValues.cellSetColor = newAutoSetColors;
      }
      return Promise.resolve(new LoaderResult(upgradedData, url, coordinationValues));
    });
  }
};

// src/loaders/anndata-loaders/CellSetsZarrLoader.js
import { InternMap } from "internmap";
function dataToCellSetsTree(data, options) {
  const [cellNames, cellSets] = data;
  const cellSetsTree = treeInitialize(SETS_DATATYPE_CELL);
  cellSets.forEach((cellSetIds, j) => {
    const name2 = options[j].groupName;
    let levelZeroNode = {
      name: name2,
      children: []
    };
    if (cellSetIds.length > 0 && Array.isArray(cellSetIds[0])) {
      const levelSets = new InternMap([], JSON.stringify);
      cellNames.forEach((id, i) => {
        const classes = cellSetIds.map((col) => col[i]);
        if (levelSets.has(classes)) {
          levelSets.get(classes).push([id, null]);
        } else {
          levelSets.set(classes, [[id, null]]);
        }
      });
      const levels = Array.from(levelSets.keys());
      const getNextLevelNames = (levelSuffixes) => {
        const nextLevelNames = Array.from(new Set(levelSuffixes.map((l) => l[0])));
        return nextLevelNames.sort((a, b) => a.localeCompare(b));
      };
      const getNode = (parentLevelPrefixes, currLevelName, childLevelSuffixes) => {
        const isLeaf = childLevelSuffixes.length === 0;
        const resultNode = {
          name: currLevelName
        };
        if (isLeaf) {
          resultNode.set = levelSets.get([...parentLevelPrefixes, currLevelName]);
        } else {
          const shouldBeLeaf = childLevelSuffixes.length === 1 && currLevelName === childLevelSuffixes[0][childLevelSuffixes[0].length - 1];
          if (shouldBeLeaf) {
            resultNode.set = levelSets.get([...parentLevelPrefixes, currLevelName, ...childLevelSuffixes[0]]);
          } else {
            const nextLevelNames = getNextLevelNames(childLevelSuffixes);
            resultNode.children = nextLevelNames.map((nextLevelName) => getNode([...parentLevelPrefixes, currLevelName], nextLevelName, childLevelSuffixes.filter((l) => l[0] === nextLevelName).map((l) => l.slice(1)).filter((v) => v.length > 0)));
          }
        }
        return resultNode;
      };
      const levelOneNodes = getNextLevelNames(levels).map((levelOneName) => getNode([], levelOneName, levels.filter((l) => l[0] === levelOneName).map((l) => l.slice(1))));
      levelZeroNode.children = levelOneNodes;
    } else {
      const uniqueCellSetIds = Array.from(new Set(cellSetIds)).sort();
      const clusters = {};
      uniqueCellSetIds.forEach((id) => clusters[id] = { name: id, set: [] });
      cellSetIds.forEach((id, i) => clusters[id].set.push([cellNames[i], null]));
      Object.values(clusters).forEach((cluster) => levelZeroNode = nodeAppendChild(levelZeroNode, cluster));
    }
    cellSetsTree.tree.push(levelZeroNode);
  });
  return cellSetsTree;
}
var CellSetsZarrLoader = class extends AbstractTwoStepLoader {
  loadCellSetIds() {
    const { options } = this;
    const cellSetZarrLocation = options.map(({ setName }) => setName);
    return this.dataSource.loadObsVariables(cellSetZarrLocation);
  }
  load() {
    return __async(this, null, function* () {
      if (!this.cellSetsTree) {
        const { options } = this;
        this.cellSetsTree = Promise.all([
          this.dataSource.loadObsIndex(),
          this.loadCellSetIds()
        ]).then((data) => dataToCellSetsTree(data, options));
      }
      const cellSetsTree = yield this.cellSetsTree;
      const coordinationValues = {};
      const { tree } = cellSetsTree;
      const newAutoSetSelectionParentName = tree[0].name;
      const newAutoSetSelections = tree[0].children.map((node) => [
        newAutoSetSelectionParentName,
        node.name
      ]);
      const newAutoSetColors = initializeCellSetColor(cellSetsTree, []);
      coordinationValues.cellSetSelection = newAutoSetSelections;
      coordinationValues.cellSetColor = newAutoSetColors;
      return Promise.resolve(new LoaderResult(cellSetsTree, null, coordinationValues));
    });
  }
};

// src/loaders/anndata-loaders/CellsZarrLoader.js
var CellsZarrLoader = class extends AbstractTwoStepLoader {
  loadXy() {
    const { xy } = this.options || {};
    if (this.xy) {
      return this.xy;
    }
    if (!this.xy && xy) {
      this.xy = this.dataSource.loadNumeric(xy);
      return this.xy;
    }
    this.xy = Promise.resolve(null);
    return this.xy;
  }
  loadPoly() {
    const { poly } = this.options || {};
    if (this.poly) {
      return this.poly;
    }
    if (!this.poly && poly) {
      this.poly = this.dataSource.loadNumeric(poly);
      return this.poly;
    }
    this.poly = Promise.resolve(null);
    return this.poly;
  }
  loadMappings() {
    const { mappings } = this.options || {};
    if (this.mappings) {
      return this.mappings;
    }
    if (!this.mappings && mappings) {
      this.mappings = Promise.all(Object.keys(mappings).map((coordinationName) => __async(this, null, function* () {
        const { key } = mappings[coordinationName];
        return { coordinationName, arr: yield this.dataSource.loadNumeric(key) };
      })));
      return this.mappings;
    }
    this.mappings = Promise.resolve(null);
    return this.mappings;
  }
  loadFactors() {
    const { factors } = this.options || {};
    if (factors) {
      return this.dataSource.loadObsVariables(factors);
    }
    return Promise.resolve(null);
  }
  load() {
    return __async(this, null, function* () {
      if (!this.cells) {
        this.cells = Promise.all([
          this.loadMappings(),
          this.loadXy(),
          this.loadPoly(),
          this.dataSource.loadObsIndex(),
          this.loadFactors()
        ]).then(([mappings, xy, poly, cellNames, factors]) => {
          const cells = {};
          cellNames.forEach((name2, i) => {
            cells[name2] = {};
            if (mappings) {
              mappings.forEach(({ coordinationName, arr }) => {
                if (!cells[name2].mappings) {
                  cells[name2].mappings = {};
                }
                const { dims } = this.options.mappings[coordinationName];
                cells[name2].mappings[coordinationName] = dims.map((dim) => arr.data[i][dim]);
              });
            }
            if (xy) {
              cells[name2].xy = xy.data[i];
            }
            if (poly) {
              cells[name2].poly = poly.data[i];
            }
            if (factors) {
              const factorsObj = {};
              factors.forEach((factor, j) => factorsObj[this.options.factors[j].split("/").slice(-1)] = factor[i]);
              cells[name2].factors = factorsObj;
            }
          });
          return cells;
        });
      }
      return Promise.resolve(new LoaderResult(yield this.cells, null));
    });
  }
};

// src/loaders/anndata-loaders/MatrixZarrLoader.js
import { openArray as openArray3, slice as slice2 } from "zarr";
import { extent as extent4 } from "d3-array";
var normalize = (arr) => {
  const [min, max2] = extent4(arr);
  const ratio = 255 / (max2 - min);
  const data = new Uint8Array(arr.map((i) => Math.floor((i - min) * ratio)));
  return { data };
};
var concatenateColumnVectors = (arr) => {
  const numCols = arr.length;
  const numRows = arr[0].length;
  const { BYTES_PER_ELEMENT } = arr[0];
  const view = new DataView(new ArrayBuffer(numCols * numRows * BYTES_PER_ELEMENT));
  const TypedArray = arr[0].constructor;
  const dtype = TypedArray.name.replace("Array", "");
  for (let i = 0; i < numCols; i += 1) {
    for (let j = 0; j < numRows; j += 1) {
      view[`set${dtype}`](BYTES_PER_ELEMENT * (j * numCols + i), arr[i][j], true);
    }
  }
  return new TypedArray(view.buffer);
};
var MatrixZarrLoader2 = class extends AbstractTwoStepLoader {
  loadFilteredGeneNames() {
    return __async(this, null, function* () {
      if (this.filteredGeneNames) {
        return this.filteredGeneNames;
      }
      const { geneFilter: geneFilterZarr } = this.options;
      const getFilterFn = () => __async(this, null, function* () {
        if (!geneFilterZarr)
          return (data) => data;
        const geneFilter = yield this.dataSource.getFlatArrDecompressed(geneFilterZarr);
        return (data) => data.filter((_, j) => geneFilter[j]);
      });
      this.filteredGeneNames = Promise.all([this.dataSource.loadVarIndex(), getFilterFn()]).then(([data, filter]) => filter(data));
      return this.filteredGeneNames;
    });
  }
  _getFilteredGenes(filterZarr) {
    return __async(this, null, function* () {
      const filter = yield this.dataSource.getFlatArrDecompressed(filterZarr);
      const geneNames = yield this.loadFilteredGeneNames();
      const genes = geneNames.filter((_, i) => filter[i]);
      return genes;
    });
  }
  _getGeneIndices(selection) {
    return __async(this, null, function* () {
      const geneNames = yield this.loadFilteredGeneNames();
      return selection.map((gene) => geneNames.indexOf(gene));
    });
  }
  _getNumCells() {
    return __async(this, null, function* () {
      const cells = yield this.dataSource.loadObsIndex();
      return cells.length;
    });
  }
  _getNumGenes() {
    return __async(this, null, function* () {
      const genes = yield this.loadFilteredGeneNames();
      return genes.length;
    });
  }
  _openSparseArrays() {
    return __async(this, null, function* () {
      const { options: { matrix } } = this;
      const { store } = this.dataSource;
      if (this.sparseArrays) {
        return this.sparseArrays;
      }
      this.sparseArrays = Promise.all(["indptr", "indices", "data"].map((name2) => openArray3({ store, path: `${matrix}/${name2}`, mode: "r" })));
      return this.sparseArrays;
    });
  }
  _loadCSCGeneSelection(selection) {
    return __async(this, null, function* () {
      const indices = yield this._getGeneIndices(selection);
      const [indptrArr, indexArr, cellXGeneArr] = yield this._openSparseArrays();
      const numCells = yield this._getNumCells();
      const { data: cols } = yield indptrArr.getRaw(null);
      return Promise.all(indices.map((index) => __async(this, null, function* () {
        const startRowIndex = cols[index];
        const endRowIndex = cols[index + 1];
        const isColumnAllZeros = startRowIndex === endRowIndex;
        const geneData = new Float32Array(numCells).fill(0);
        if (isColumnAllZeros) {
          return geneData;
        }
        const { data: rowIndices } = yield indexArr.get([
          slice2(startRowIndex, endRowIndex)
        ]);
        const { data: cellXGeneData } = yield cellXGeneArr.get([
          slice2(startRowIndex, endRowIndex)
        ]);
        for (let rowIndex = 0; rowIndex < rowIndices.length; rowIndex += 1) {
          geneData[rowIndices[rowIndex]] = cellXGeneData[rowIndex];
        }
        return geneData;
      })));
    });
  }
  _loadCSRGeneSelection(selection) {
    return __async(this, null, function* () {
      const indices = yield this._getGeneIndices(selection);
      const numGenes = yield this._getNumGenes();
      const numCells = yield this._getNumCells();
      const cellXGene = yield this._loadCSRSparseCellXGene();
      return indices.map((index) => {
        const geneData = new Float32Array(numCells).fill(0);
        for (let i = 0; i < numCells; i += 1) {
          geneData[i] = cellXGene[i * numGenes + index];
        }
        return geneData;
      });
    });
  }
  _loadCSRSparseCellXGene() {
    return __async(this, null, function* () {
      if (this._sparseMatrix) {
        return this._sparseMatrix;
      }
      this._sparseMatrix = this._openSparseArrays().then((sparseArrays) => __async(this, null, function* () {
        const { options: { matrix } } = this;
        const { shape } = yield this.dataSource.getJson(`${matrix}/.zattrs`);
        const [rows, cols, cellXGene] = yield Promise.all(sparseArrays.map((arr) => __async(this, null, function* () {
          const { data } = yield arr.getRaw(null);
          return data;
        })));
        const cellXGeneMatrix = new Float32Array(shape[0] * shape[1]).fill(0);
        let row = 0;
        rows.forEach((_, index) => {
          const rowStart = rows[index];
          const rowEnd = rows[index + 1];
          for (let i = rowStart; i < rowEnd; i += 1) {
            const val = cellXGene[i];
            const col = cols[i];
            cellXGeneMatrix[row * shape[1] + col] = val;
          }
          row += 1;
        });
        return cellXGeneMatrix;
      }));
      return this._sparseMatrix;
    });
  }
  _loadCSCSparseCellXGene() {
    return __async(this, null, function* () {
      if (this._sparseMatrix) {
        return this._sparseMatrix;
      }
      this._sparseMatrix = this._openSparseArrays().then((sparseArrays) => __async(this, null, function* () {
        const { options: { matrix } } = this;
        const { shape } = yield this.dataSource.getJson(`${matrix}/.zattrs`);
        const [cols, rows, cellXGene] = yield Promise.all(sparseArrays.map((arr) => __async(this, null, function* () {
          const { data } = yield arr.getRaw(null);
          return data;
        })));
        const cellXGeneMatrix = new Float32Array(shape[0] * shape[1]).fill(0);
        let col = 0;
        cols.forEach((_, index) => {
          const colStart = cols[index];
          const colEnd = cols[index + 1];
          for (let i = colStart; i < colEnd; i += 1) {
            const val = cellXGene[i];
            const row = rows[i];
            cellXGeneMatrix[row * shape[1] + col] = val;
          }
          col += 1;
        });
        return cellXGeneMatrix;
      }));
      return this._sparseMatrix;
    });
  }
  loadCellXGene() {
    return __async(this, null, function* () {
      const { store } = this.dataSource;
      if (this.cellXGene) {
        return this.cellXGene;
      }
      const { options: { matrix, matrixGeneFilter } } = this;
      if (!this._matrixZattrs) {
        this._matrixZattrs = yield this.dataSource.getJson(`${matrix}/.zattrs`);
      }
      const encodingType = this._matrixZattrs["encoding-type"];
      if (!matrixGeneFilter) {
        if (encodingType === "csr_matrix") {
          this.cellXGene = this._loadCSRSparseCellXGene().then((data) => normalize(data));
        } else if (encodingType === "csc_matrix") {
          this.cellXGene = this._loadCSCSparseCellXGene().then((data) => normalize(data));
        } else {
          if (!this.arr) {
            this.arr = openArray3({ store, path: matrix, mode: "r" });
          }
          this.cellXGene = this.arr.then((z) => z.getRaw(null).then(({ data }) => normalize(data)));
        }
      } else if (encodingType === "csr_matrix") {
        this.cellXGene = this._loadCSRSparseCellXGene().then((cellXGene) => __async(this, null, function* () {
          const filteredGenes = yield this._getFilteredGenes(matrixGeneFilter);
          const numGenesFiltered = filteredGenes.length;
          const geneNames = yield this.loadFilteredGeneNames();
          const numGenes = geneNames.length;
          const numCells = yield this._getNumCells();
          const cellXGeneMatrixFiltered = new Float32Array(numCells * numGenesFiltered).fill(0);
          for (let i = 0; i < numGenesFiltered; i += 1) {
            const index = geneNames.indexOf(filteredGenes[i]);
            for (let j = 0; j < numCells; j += 1) {
              cellXGeneMatrixFiltered[j * numGenesFiltered + i] = cellXGene[j * numGenes + index];
            }
          }
          return normalize(cellXGeneMatrixFiltered);
        }));
      } else {
        const genes = yield this._getFilteredGenes(matrixGeneFilter);
        this.cellXGene = this.loadGeneSelection({ selection: genes, shouldNormalize: false }).then(({ data }) => normalize(concatenateColumnVectors(data)));
      }
      return this.cellXGene;
    });
  }
  loadGeneSelection(_0) {
    return __async(this, arguments, function* ({ selection, shouldNormalize = true }) {
      const { options: { matrix } } = this;
      const { store } = this.dataSource;
      if (!this._matrixZattrs) {
        this._matrixZattrs = yield this.dataSource.getJson(`${matrix}/.zattrs`);
      }
      const encodingType = this._matrixZattrs["encoding-type"];
      let genes;
      if (encodingType === "csc_matrix") {
        genes = yield this._loadCSCGeneSelection(selection);
      } else if (encodingType === "csr_matrix") {
        genes = yield this._loadCSRGeneSelection(selection);
      } else {
        if (!this.arr) {
          this.arr = openArray3({ store, path: matrix, mode: "r" });
        }
        const indices = yield this._getGeneIndices(selection);
        genes = yield Promise.all(indices.map((index) => this.arr.then((z) => z.get([null, index])).then(({ data }) => data)));
      }
      return { data: genes.map((i) => shouldNormalize ? normalize(i).data : i), url: null };
    });
  }
  loadAttrs() {
    return Promise.all([this.dataSource.loadObsIndex(), this.loadFilteredGeneNames()]).then((d) => {
      const [cellNames, geneNames] = d;
      const attrs = { rows: cellNames, cols: geneNames };
      return {
        data: attrs,
        url: null
      };
    });
  }
  load() {
    return Promise.all([this.loadAttrs(), this.loadCellXGene()]).then((d) => __async(this, null, function* () {
      const [{ data: attrs }, cellXGene] = d;
      const {
        options: { matrixGeneFilter: matrixGeneFilterZarr }
      } = this;
      if (matrixGeneFilterZarr) {
        const matrixGeneFilter = yield this.dataSource.getFlatArrDecompressed(matrixGeneFilterZarr);
        attrs.cols = attrs.cols.filter((_, i) => matrixGeneFilter[i]);
      }
      return Promise.resolve(new LoaderResult([attrs, cellXGene], null));
    }));
  }
};

// src/loaders/anndata-loaders/index.js
var anndata_loaders_default = { CellSetsZarrLoader, CellsZarrLoader, MatrixZarrLoader: MatrixZarrLoader2 };

// src/loaders/GenomicProfilesZarrLoader.js
var GenomicProfilesZarrLoader = class extends AbstractTwoStepLoader {
  loadAttrs() {
    if (this.attrs) {
      return this.attrs;
    }
    this.attrs = this.dataSource.getJson(".zattrs");
    return this.attrs;
  }
  load() {
    const { url } = this;
    return this.loadAttrs().then((attrs) => Promise.resolve(new LoaderResult(attrs, url)));
  }
};

// src/loaders/data-sources/AnnDataSource.js
import { openArray as openArray4 } from "zarr";
import range7 from "lodash/range";

// src/loaders/data-sources/ZarrDataSource.js
import { HTTPStore as HTTPStore2, KeyError as KeyError2 } from "zarr";
var ZarrDataSource = class {
  constructor({ url, requestInit }) {
    const supportedMethods = ["GET"];
    this.store = new HTTPStore2(url, {
      supportedMethods,
      fetchOptions: requestInit
    });
  }
  getJson(key) {
    return __async(this, null, function* () {
      try {
        const buf = yield this.store.getItem(key);
        const text = new TextDecoder("utf-8").decode(buf);
        return JSON.parse(text);
      } catch (err) {
        if (err instanceof KeyError2) {
          return {};
        }
        throw err;
      }
    });
  }
};

// src/loaders/data-sources/AnnDataSource.js
var readFloat32FromUint8 = (bytes) => {
  if (bytes.length !== 4) {
    throw new Error("readFloat32 only takes in length 4 byte buffers");
  }
  return new Int32Array(bytes.buffer)[0];
};
var HEADER_LENGTH = 4;
function parseVlenUtf8(buffer) {
  const decoder = new TextDecoder();
  let data = 0;
  const dataEnd = data + buffer.length;
  const length = readFloat32FromUint8(buffer.slice(data, HEADER_LENGTH));
  if (buffer.length < HEADER_LENGTH) {
    throw new Error("corrupt buffer, missing or truncated header");
  }
  data += HEADER_LENGTH;
  const output = new Array(length);
  for (let i = 0; i < length; i += 1) {
    if (data + 4 > dataEnd) {
      throw new Error("corrupt buffer, data seem truncated");
    }
    const l = readFloat32FromUint8(buffer.slice(data, data + 4));
    data += 4;
    if (data + l > dataEnd) {
      throw new Error("corrupt buffer, data seem truncated");
    }
    output[i] = decoder.decode(buffer.slice(data, data + l));
    data += l;
  }
  return output;
}
var AnnDataSource = class extends ZarrDataSource {
  constructor(...args) {
    super(...args);
    this.obsPromises = new Map();
  }
  loadObsVariables(obsPaths) {
    const obsPromises = obsPaths.map((obsPath) => {
      const getObsCol = (obsCol) => {
        if (!this.obsPromises.has(obsCol)) {
          const obsPromise = this._loadObsVariable(obsCol).catch((err) => {
            this.obsPromises.delete(obsCol);
            throw err;
          });
          this.obsPromises.set(obsCol, obsPromise);
        }
        return this.obsPromises.get(obsCol);
      };
      if (Array.isArray(obsPath)) {
        return Promise.resolve(Promise.all(obsPath.map(getObsCol)));
      }
      return getObsCol(obsPath);
    });
    return Promise.all(obsPromises);
  }
  _loadObsVariable(obs) {
    return __async(this, null, function* () {
      const { store } = this;
      const { categories } = yield this.getJson(`${obs}/.zattrs`);
      let categoriesValues;
      if (categories) {
        const { dtype } = yield this.getJson(`/obs/${categories}/.zarray`);
        if (dtype === "|O") {
          categoriesValues = yield this.getFlatArrDecompressed(`/obs/${categories}`);
        }
      }
      const obsArr = yield openArray4({ store, path: obs, mode: "r" });
      const obsValues = yield obsArr.get();
      const { data } = obsValues;
      const mappedObsValues = Array.from(data).map((i) => !categoriesValues ? String(i) : categoriesValues[i]);
      return mappedObsValues;
    });
  }
  loadNumeric(path) {
    const { store } = this;
    return openArray4({
      store,
      path,
      mode: "r"
    }).then((arr) => arr.get());
  }
  getFlatArrDecompressed(path) {
    const { store } = this;
    return openArray4({
      store,
      path,
      mode: "r"
    }).then((z) => __async(this, null, function* () {
      let data;
      const parseAndMergeTextBytes = (dbytes) => {
        const text = parseVlenUtf8(dbytes);
        if (!data) {
          data = text;
        } else {
          data = data.concat(text);
        }
      };
      const mergeBytes = (dbytes) => {
        if (!data) {
          data = dbytes;
        } else {
          const tmp = new Uint8Array(dbytes.buffer.byteLength + data.buffer.byteLength);
          tmp.set(new Uint8Array(data.buffer), 0);
          tmp.set(dbytes, data.buffer.byteLength);
          data = tmp;
        }
      };
      const numRequests = Math.ceil(z.meta.shape[0] / z.meta.chunks[0]);
      const requests = range7(numRequests).map((item) => __async(this, null, function* () {
        return store.getItem(`${z.keyPrefix}${String(item)}`).then((buf) => z.compressor.then((compressor) => compressor.decode(buf)));
      }));
      const dbytesArr = yield Promise.all(requests);
      dbytesArr.forEach((dbytes) => {
        if (Array.isArray(z.meta.filters) && z.meta.filters[0].id === "vlen-utf8") {
          parseAndMergeTextBytes(dbytes);
        } else {
          mergeBytes(dbytes);
        }
      });
      const {
        meta: {
          shape: [length]
        }
      } = z;
      return data.slice(0, length);
    }));
  }
  loadObsIndex() {
    if (this.obsIndex) {
      return this.obsIndex;
    }
    this.obsIndex = this.getJson("obs/.zattrs").then(({ _index }) => this.getFlatArrDecompressed(`/obs/${_index}`));
    return this.obsIndex;
  }
  loadVarIndex() {
    if (this.varIndex) {
      return this.varIndex;
    }
    this.varIndex = this.getJson("var/.zattrs").then(({ _index }) => this.getFlatArrDecompressed(`/var/${_index}`));
    return this.varIndex;
  }
};

// src/loaders/errors/DataSourceFetchError.js
var DataSourceFetchError = class extends AbstractLoaderError {
  constructor(source, url, headers) {
    super(`${source} Error HTTP Status fetching from ${url}`);
    this.source = source;
    this.url = url;
    this.headers = headers;
  }
  warnInConsole() {
    const { source, url, headers } = this;
    console.warn(`${source} failed to fetch from ${url} with headers ${headers}`);
  }
};

// src/loaders/data-sources/JsonSource.js
var JsonSource = class {
  constructor({ url, requestInit }) {
    this.url = url;
    this.requestInit = requestInit;
  }
  get data() {
    if (this._data)
      return this._data;
    this._data = fetch(this.url, this.requestInit).then((response) => {
      if (!response.ok) {
        return Promise.reject(new DataSourceFetchError("JsonSource", this.url, response.headers));
      }
      return response.json();
    }).catch(() => Promise.reject(new DataSourceFetchError("JsonSource", this.url, {})));
    return this._data;
  }
};

// src/loaders/types.js
var ANNDATA = "anndata";
var fileTypeToLoaderAndSource = {
  "expression-matrix.zarr": [ZarrDataSource, MatrixZarrLoader],
  "clusters.json": [JsonSource, ClustersJsonAsMatrixZarrLoader],
  "genes.json": [JsonSource, GenesJsonAsMatrixZarrLoader],
  "cells.json": [JsonSource, JsonLoader],
  "molecules.json": [JsonSource, JsonLoader],
  "neighborhoods.json": [JsonSource, JsonLoader],
  "raster.json": [JsonSource, RasterLoader],
  "raster.ome-zarr": [ZarrDataSource, OmeZarrLoader],
  "cell-sets.json": [JsonSource, CellSetsJsonLoader],
  [`${ANNDATA}-cell-sets.zarr`]: [AnnDataSource, anndata_loaders_default.CellSetsZarrLoader],
  [`${ANNDATA}-cells.zarr`]: [AnnDataSource, anndata_loaders_default.CellsZarrLoader],
  [`${ANNDATA}-expression-matrix.zarr`]: [AnnDataSource, anndata_loaders_default.MatrixZarrLoader],
  "genomic-profiles.zarr": [ZarrDataSource, GenomicProfilesZarrLoader]
};
function getSourceAndLoaderFromFileType(type16) {
  return fileTypeToLoaderAndSource[type16] || [JsonSource, JsonLoader];
}

// src/app/vitessce-grid-utils.js
function getNumRows(layout) {
  let max2 = 0;
  let bottomY;
  for (let i = 0, len = layout.length; i < len; i++) {
    bottomY = layout[i].y + layout[i].h;
    if (bottomY > max2)
      max2 = bottomY;
  }
  return max2;
}
function getRowHeight(containerHeight, numRows, margin2, padding2) {
  const effectiveContainerHeight = containerHeight - 2 * padding2 - (numRows - 1) * margin2;
  return effectiveContainerHeight / numRows;
}
function useRowHeight(config, initialRowHeight, height, margin2, padding2) {
  const [containerHeight, setContainerHeight] = useState9(height);
  const [rowHeight, setRowHeight] = useState9(initialRowHeight);
  const containerRef = useRef6();
  useEffect8(() => {
    const numRows = getNumRows(config.layout);
    const newRowHeight = getRowHeight(containerHeight, numRows, margin2, padding2);
    setRowHeight(newRowHeight);
  }, [containerHeight, config, margin2, padding2]);
  useEffect8(() => {
    if (height !== null && height !== void 0) {
      setContainerHeight(height);
    }
  }, [height]);
  useEffect8(() => {
    if (height !== null && height !== void 0) {
      return () => {
      };
    }
    function onWindowResize() {
      if (!containerRef.current)
        return;
      const containerRect = containerRef.current.getBoundingClientRect();
      setContainerHeight(containerRect.height);
    }
    window.addEventListener("resize", onWindowResize);
    onWindowResize();
    return () => {
      window.removeEventListener("resize", onWindowResize);
    };
  }, [containerRef, height]);
  return [rowHeight, containerRef];
}
function createLoaders(datasets, configDescription) {
  const result = {};
  const dataSources = {};
  datasets.forEach((dataset) => {
    const datasetLoaders = {
      name: dataset.name,
      description: dataset.description || configDescription,
      loaders: {}
    };
    dataset.files.forEach((file) => {
      const [DataSourceClass, LoaderClass] = getSourceAndLoaderFromFileType(file.fileType);
      const { url, options, requestInit } = file;
      const fileId = url || JSON.stringify(options);
      if (!(fileId in dataSources)) {
        dataSources[fileId] = new DataSourceClass({ url, requestInit });
      }
      const loader = new LoaderClass(dataSources[fileId], file);
      datasetLoaders.loaders[file.type] = loader;
    });
    result[dataset.uid] = datasetLoaders;
  });
  return result;
}

// src/app/VitessceGrid.js
var padding = 10;
var margin = 5;
function VitessceGrid(props) {
  const {
    rowHeight: initialRowHeight,
    config,
    getComponent: getComponent2,
    theme,
    height
  } = props;
  const [rowHeight, containerRef] = useRowHeight(config, initialRowHeight, height, margin, padding);
  const onResize = useEmitGridResize();
  useEffect9(() => {
    onResize();
  }, [rowHeight, onResize]);
  const viewConfigStoreApi = useViewConfigStoreApi();
  const setViewConfig = useSetViewConfig(viewConfigStoreApi);
  const setLoaders = useSetLoaders();
  const removeComponent = useRemoveComponent();
  const changeLayout = useChangeLayout();
  const layout = useLayout();
  useEffect9(() => {
    if (config) {
      setViewConfig(config);
      const loaders = createLoaders(config.datasets, config.description);
      setLoaders(loaders);
    } else {
      setLoaders({});
    }
  }, [config, setViewConfig, setLoaders]);
  return /* @__PURE__ */ React30.createElement("div", {
    ref: containerRef,
    className: `vitessce-container vitessce-theme-${theme}`
  }, layout && /* @__PURE__ */ React30.createElement(VitessceGridLayout, {
    layout,
    height,
    rowHeight,
    theme,
    getComponent: getComponent2,
    draggableHandle: ".title",
    margin,
    padding,
    onRemoveComponent: removeComponent,
    onLayoutChange: changeLayout,
    reactGridLayoutProps: {
      onResize,
      onResizeStop: onResize
    }
  }));
}

// src/app/app.js
import React75, { useEffect as useEffect26, useRef as useRef11, useState as useState21 } from "react";

// src/app/api.js
var urlPrefix = "https://s3.amazonaws.com/vitessce-data/0.0.31/master_release";
function makeLayerNameToConfig(datasetPrefix) {
  return (name2) => ({
    name: name2,
    type: name2.toUpperCase(),
    fileType: `${name2}.json`,
    url: `${urlPrefix}/${datasetPrefix}/${datasetPrefix}.${name2}.json`
  });
}
var linnarssonLayerNames = [
  "cells",
  "cell-sets",
  "raster",
  "molecules",
  "neighborhoods"
];
var linnarssonDescription = "Spatial organization of the somatosensory cortex revealed by cyclic smFISH";
var linnarssonBase = {
  description: linnarssonDescription,
  layers: [
    ...linnarssonLayerNames.map(makeLayerNameToConfig("linnarsson")),
    __spreadProps(__spreadValues({}, makeLayerNameToConfig("linnarsson")("clusters")), {
      type: "EXPRESSION-MATRIX"
    })
  ]
};
var linnarssonBaseNoClusters = {
  description: linnarssonDescription,
  layers: linnarssonLayerNames.filter((name2) => name2 !== "clusters").map(makeLayerNameToConfig("linnarsson"))
};
var driesDescription = "Giotto, a pipeline for integrative analysis and visualization of single-cell spatial transcriptomic data";
var driesBase = {
  description: driesDescription,
  layers: [
    "cells",
    "cell-sets"
  ].map(makeLayerNameToConfig("dries"))
};
var wangDescription = "Multiplexed imaging of high-density libraries of RNAs with MERFISH and expansion microscopy";
var wangBase = {
  description: wangDescription,
  layers: [
    ...["cells", "molecules"].map(makeLayerNameToConfig("wang")),
    __spreadProps(__spreadValues({}, makeLayerNameToConfig("wang")("genes")), {
      name: "expression-matrix",
      type: "EXPRESSION-MATRIX"
    })
  ]
};
var vanderbiltDescription = "High Bit Depth (uint16) Multiplex Immunofluorescence Imaging";
var vanderbiltBase = {
  description: vanderbiltDescription,
  layers: [
    "raster"
  ].map(makeLayerNameToConfig("spraggins"))
};
var configs = {
  "just-scatter": {
    version: "0.1.0",
    public: false,
    layers: [
      {
        name: "cells",
        type: "CELLS",
        fileType: "cells.json",
        url: `${urlPrefix}/linnarsson/linnarsson.cells.json`,
        requestInit: {
          method: "GET",
          headers: { "x-foo": "FAKE" },
          mode: "cors",
          credentials: "omit",
          cache: "no-store",
          redirect: "error",
          referrer: "FAKE",
          integrity: "FAKE"
        }
      }
    ],
    name: "Linnarsson, just scatterplot",
    staticLayout: [
      {
        component: "scatterplot",
        props: {
          mapping: "t-SNE",
          view: {
            zoom: 0.75,
            target: [0, 0, 0]
          }
        },
        x: 0,
        y: 0,
        w: 12,
        h: 2
      }
    ]
  },
  "just-scatter-expression": {
    version: "0.1.0",
    public: false,
    layers: [
      {
        name: "cells",
        type: "CELLS",
        url: "https://s3.amazonaws.com/vitessce-data/0.0.20/master_release/linnarsson/linnarsson.cells.json"
      },
      {
        name: "genes",
        type: "GENES",
        url: "https://s3.amazonaws.com/vitessce-data/0.0.20/master_release/linnarsson/linnarsson.genes.json"
      }
    ],
    name: "Linnarsson, just scatterplot and expression",
    staticLayout: [
      {
        component: "scatterplot",
        props: {
          mapping: "t-SNE",
          view: {
            zoom: 0.75,
            target: [0, 0, 0]
          }
        },
        x: 0,
        y: 0,
        w: 8,
        h: 2
      },
      {
        component: "genes",
        x: 8,
        y: 2,
        w: 4,
        h: 2
      }
    ]
  },
  "linnarsson-2018": {
    name: "Linnarsson",
    version: "1.0.0",
    description: linnarssonDescription,
    public: true,
    datasets: [
      {
        uid: "linnarsson-2018",
        name: "Linnarsson 2018",
        description: `Linnarsson: ${linnarssonDescription}`,
        files: linnarssonBase.layers.map((file) => ({
          type: file.type.toLowerCase(),
          fileType: file.fileType,
          url: file.url
        }))
      }
    ],
    initStrategy: "auto",
    coordinationSpace: {
      embeddingZoom: {
        PCA: 0,
        TSNE: 0.75
      },
      embeddingType: {
        PCA: "PCA",
        TSNE: "t-SNE"
      },
      spatialZoom: {
        A: -5.5
      },
      spatialTargetX: {
        A: 16e3
      },
      spatialTargetY: {
        A: 2e4
      }
    },
    layout: [
      {
        component: "description",
        x: 0,
        y: 0,
        w: 2,
        h: 1
      },
      {
        component: "layerController",
        x: 0,
        y: 1,
        w: 2,
        h: 4
      },
      {
        component: "status",
        x: 0,
        y: 5,
        w: 2,
        h: 1
      },
      {
        component: "spatial",
        coordinationScopes: {
          spatialZoom: "A",
          spatialTargetX: "A",
          spatialTargetY: "A"
        },
        x: 2,
        y: 0,
        w: 4,
        h: 4
      },
      {
        component: "genes",
        x: 9,
        y: 0,
        w: 3,
        h: 2
      },
      {
        component: "cellSets",
        x: 9,
        y: 3,
        w: 3,
        h: 2
      },
      {
        component: "heatmap",
        props: {
          transpose: true
        },
        x: 2,
        y: 4,
        w: 5,
        h: 2
      },
      {
        component: "cellSetExpression",
        x: 7,
        y: 4,
        w: 3,
        h: 2
      },
      {
        component: "expressionHistogram",
        x: 10,
        y: 4,
        w: 2,
        h: 2
      },
      {
        component: "scatterplot",
        coordinationScopes: {
          embeddingType: "PCA",
          embeddingZoom: "PCA"
        },
        x: 6,
        y: 0,
        w: 3,
        h: 2
      },
      {
        component: "scatterplot",
        coordinationScopes: {
          embeddingType: "TSNE",
          embeddingZoom: "TSNE"
        },
        x: 6,
        y: 2,
        w: 3,
        h: 2
      }
    ]
  },
  "linnarsson-2018-two-spatial": __spreadProps(__spreadValues({}, linnarssonBase), {
    version: "0.1.0",
    name: "Linnarsson (two spatial)",
    staticLayout: [
      {
        component: "spatial",
        props: {
          view: {
            zoom: -8,
            target: [18e3, 18e3, 0]
          }
        },
        x: 0,
        y: 0,
        w: 5,
        h: 2
      },
      {
        component: "scatterplot",
        props: { mapping: "t-SNE" },
        x: 0,
        y: 2,
        w: 5,
        h: 2
      },
      {
        component: "spatial",
        props: {
          view: {
            zoom: -6,
            target: [18e3, 18e3, 0]
          }
        },
        x: 5,
        y: 0,
        w: 5,
        h: 2
      },
      {
        component: "scatterplot",
        props: { mapping: "PCA" },
        x: 5,
        y: 2,
        w: 5,
        h: 2
      },
      {
        component: "genes",
        x: 10,
        y: 2,
        w: 2,
        h: 2
      },
      {
        component: "heatmap",
        x: 0,
        y: 4,
        w: 12
      }
    ]
  }),
  "linnarsson-2018-just-spatial": __spreadProps(__spreadValues({}, linnarssonBaseNoClusters), {
    version: "0.1.0",
    name: "Linnarsson (just spatial)",
    staticLayout: [
      {
        component: "spatial",
        props: {
          view: {
            zoom: -6.5,
            target: [18e3, 18e3, 0]
          }
        },
        x: 0,
        y: 0,
        w: 10,
        h: 2
      },
      {
        component: "genes",
        x: 10,
        y: 1,
        w: 2,
        h: 1
      }
    ]
  }),
  "linnarsson-2018-static": __spreadProps(__spreadValues({}, linnarssonBase), {
    version: "0.1.0",
    name: "Linnarsson (static layout)",
    staticLayout: [
      {
        component: "description",
        props: {
          description: `Linnarsson (static layout): ${linnarssonDescription}`
        },
        x: 0,
        y: 0,
        w: 3,
        h: 1
      },
      {
        component: "scatterplot",
        props: { mapping: "t-SNE" },
        x: 0,
        y: 2,
        w: 3,
        h: 2
      },
      {
        component: "spatial",
        props: {
          view: {
            zoom: -6.5,
            target: [18e3, 18e3, 0]
          }
        },
        x: 3,
        y: 0,
        w: 6,
        h: 4
      },
      {
        component: "genes",
        x: 9,
        y: 2,
        w: 3,
        h: 2
      },
      {
        component: "heatmap",
        x: 0,
        y: 4,
        w: 12,
        h: 1
      }
    ]
  }),
  "linnarsson-2018-dozen": __spreadProps(__spreadValues({}, linnarssonBase), {
    version: "0.1.0",
    name: "Linnarsson (static layout, redundant components for performance testing)",
    staticLayout: [
      {
        component: "spatial",
        props: {
          view: {
            zoom: -6.5,
            target: [18e3, 18e3, 0]
          }
        },
        x: 0,
        y: 0,
        w: 4,
        h: 1
      },
      {
        component: "spatial",
        props: {
          view: {
            zoom: -6.5,
            target: [18e3, 18e3, 0]
          }
        },
        x: 0,
        y: 1,
        w: 4,
        h: 1
      },
      {
        component: "spatial",
        props: {
          view: {
            zoom: -6.5,
            target: [18e3, 18e3, 0]
          }
        },
        x: 4,
        y: 0,
        w: 4,
        h: 1
      },
      {
        component: "spatial",
        props: {
          view: {
            zoom: -6.5,
            target: [18e3, 18e3, 0]
          }
        },
        x: 4,
        y: 1,
        w: 4,
        h: 1
      },
      {
        component: "scatterplot",
        props: { mapping: "t-SNE" },
        x: 0,
        y: 2,
        w: 4,
        h: 1
      },
      {
        component: "scatterplot",
        props: { mapping: "t-SNE" },
        x: 0,
        y: 3,
        w: 4,
        h: 1
      },
      {
        component: "scatterplot",
        props: { mapping: "t-SNE" },
        x: 0,
        y: 4,
        w: 4,
        h: 1
      },
      {
        component: "scatterplot",
        props: { mapping: "t-SNE" },
        x: 0,
        y: 5,
        w: 4,
        h: 1
      },
      {
        component: "scatterplot",
        props: { mapping: "PCA" },
        x: 4,
        y: 2,
        w: 4,
        h: 1
      },
      {
        component: "scatterplot",
        props: { mapping: "PCA" },
        x: 4,
        y: 3,
        w: 4,
        h: 1
      },
      {
        component: "scatterplot",
        props: { mapping: "PCA" },
        x: 4,
        y: 4,
        w: 4,
        h: 1
      },
      {
        component: "scatterplot",
        props: { mapping: "PCA" },
        x: 4,
        y: 5,
        w: 4,
        h: 1
      },
      {
        component: "genes",
        x: 8,
        y: 2,
        w: 4,
        h: 2
      },
      {
        component: "heatmap",
        x: 8,
        y: 4,
        w: 4,
        h: 2
      }
    ]
  }),
  "dries-2019": {
    name: "Dries",
    version: "1.0.0",
    description: driesDescription,
    public: true,
    datasets: [
      {
        uid: "dries-2019",
        name: "Dries 2019",
        files: driesBase.layers.map((file) => ({
          type: file.type.toLowerCase(),
          fileType: file.fileType,
          url: file.url
        }))
      }
    ],
    initStrategy: "auto",
    coordinationSpace: {
      embeddingType: {
        TSNE: "t-SNE",
        UMAP: "UMAP"
      },
      embeddingCellSetPolygonsVisible: {
        A: false
      },
      embeddingCellSetLabelsVisible: {
        A: true
      },
      embeddingCellSetLabelSize: {
        A: 16
      },
      embeddingCellRadius: {
        A: 1
      },
      embeddingZoom: {
        TSNE: 3,
        UMAP: 3
      },
      spatialZoom: {
        A: -4.4
      },
      spatialTargetX: {
        A: 3800
      },
      spatialTargetY: {
        A: -900
      }
    },
    layout: [
      {
        component: "description",
        x: 9,
        y: 0,
        w: 3,
        h: 2
      },
      {
        component: "status",
        x: 9,
        y: 2,
        w: 3,
        h: 2
      },
      {
        component: "cellSets",
        x: 9,
        y: 4,
        w: 3,
        h: 4
      },
      {
        component: "cellSetSizes",
        x: 5,
        y: 4,
        w: 4,
        h: 4
      },
      {
        component: "scatterplot",
        coordinationScopes: {
          embeddingType: "TSNE",
          embeddingZoom: "TSNE",
          embeddingCellSetLabelsVisible: "A",
          embeddingCellSetLabelSize: "A",
          embeddingCellSetPolygonsVisible: "A",
          embeddingCellRadius: "A"
        },
        x: 0,
        y: 2,
        w: 5,
        h: 4
      },
      {
        component: "spatial",
        props: {
          cellRadius: 50
        },
        coordinationScopes: {
          spatialZoom: "A",
          spatialTargetX: "A",
          spatialTargetY: "A"
        },
        x: 5,
        y: 0,
        w: 4,
        h: 4
      },
      {
        component: "scatterplot",
        coordinationScopes: {
          embeddingType: "UMAP",
          embeddingZoom: "UMAP",
          embeddingCellSetLabelsVisible: "A",
          embeddingCellSetLabelSize: "A",
          embeddingCellSetPolygonsVisible: "A",
          embeddingCellRadius: "A"
        },
        x: 0,
        y: 0,
        w: 5,
        h: 4
      }
    ]
  },
  "wang-2019": {
    name: "Wang",
    version: "1.0.0",
    description: wangDescription,
    public: true,
    datasets: [
      {
        uid: "wang-2019",
        name: "Wang 2019",
        files: wangBase.layers.map((file) => ({
          type: file.type.toLowerCase(),
          fileType: file.fileType,
          url: file.url
        }))
      }
    ],
    initStrategy: "auto",
    coordinationSpace: {
      spatialZoom: {
        A: -1
      },
      spatialLayers: {
        A: [
          {
            type: "molecules",
            radius: 2,
            opacity: 1,
            visible: true
          },
          {
            type: "cells",
            opacity: 1,
            radius: 50,
            visible: true,
            stroked: false
          }
        ]
      }
    },
    layout: [
      {
        component: "spatial",
        coordinationScopes: {
          spatialZoom: "A",
          spatialLayers: "A"
        },
        props: {},
        x: 0,
        y: 0,
        w: 10,
        h: 2
      },
      {
        component: "genes",
        x: 10,
        y: 0,
        w: 2,
        h: 4
      },
      {
        component: "expressionHistogram",
        x: 0,
        y: 2,
        w: 10,
        h: 2
      }
    ]
  },
  vanderbilt: __spreadProps(__spreadValues({}, vanderbiltBase), {
    version: "0.1.0",
    name: "Spraggins",
    public: true,
    staticLayout: [
      {
        component: "spatial",
        props: {
          view: {
            zoom: -6.5,
            target: [2e4, 2e4, 0]
          }
        },
        x: 0,
        y: 0,
        w: 9,
        h: 2
      },
      {
        component: "layerController",
        x: 9,
        y: 0,
        w: 3,
        h: 2
      }
    ]
  }),
  "just-higlass": {
    public: false,
    initStrategy: "auto",
    version: "1.0.0",
    datasets: [
      {
        uid: "higlass-dataset",
        name: "HiGlass Dataset",
        files: []
      }
    ],
    name: "HiGlass demo",
    coordinationSpace: {
      genomicZoomX: {
        A: 0
      },
      genomicZoomY: {
        A: 0
      },
      genomicTargetX: {
        A: 15499999995e-1
      },
      genomicTargetY: {
        A: 15499999995e-1
      }
    },
    layout: [
      {
        component: "higlass",
        coordinationScopes: {
          genomicZoomX: "A",
          genomicZoomY: "A",
          genomicTargetX: "A",
          genomicTargetY: "A"
        },
        props: {
          hgViewConfig: {
            uid: "aa",
            autocompleteSource: "/api/v1/suggest/?d=OHJakQICQD6gTD7skx4EWA&",
            genomePositionSearchBox: {
              autocompleteServer: "//higlass.io/api/v1",
              autocompleteId: "OHJakQICQD6gTD7skx4EWA",
              chromInfoServer: "//higlass.io/api/v1",
              chromInfoId: "hg19",
              visible: true
            },
            chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
            tracks: {
              top: [
                {
                  type: "horizontal-gene-annotations",
                  height: 60,
                  tilesetUid: "OHJakQICQD6gTD7skx4EWA",
                  server: "//higlass.io/api/v1",
                  uid: "OHJakQICQD6gTD7skx4EWA",
                  options: {
                    name: "Gene Annotations (hg19)",
                    fontSize: 10,
                    labelPosition: "hidden",
                    labelLeftMargin: 0,
                    labelRightMargin: 0,
                    labelTopMargin: 0,
                    labelBottomMargin: 0,
                    minHeight: 24,
                    geneAnnotationHeight: 16,
                    geneLabelPosition: "outside",
                    geneStrandSpacing: 4,
                    showMousePosition: true,
                    mousePositionColor: "#ff00ff",
                    plusStrandColor: "#fdff54",
                    minusStrandColor: "#68bf30",
                    labelColor: "black",
                    trackBorderWidth: 0,
                    trackBorderColor: "black"
                  }
                },
                {
                  chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
                  type: "horizontal-chromosome-labels",
                  height: 30,
                  uid: "X4e_1DKiQHmyghDa6lLMVA",
                  options: {
                    color: "#808080",
                    stroke: "black",
                    fontSize: 12,
                    fontIsLeftAligned: false,
                    showMousePosition: true,
                    mousePositionColor: "#ff00ff"
                  }
                }
              ],
              left: [
                {
                  type: "vertical-gene-annotations",
                  width: 60,
                  tilesetUid: "OHJakQICQD6gTD7skx4EWA",
                  server: "//higlass.io/api/v1",
                  options: {
                    labelPosition: "bottomRight",
                    name: "Gene Annotations (hg19)",
                    fontSize: 10,
                    labelLeftMargin: 0,
                    labelRightMargin: 0,
                    labelTopMargin: 0,
                    labelBottomMargin: 0,
                    minWidth: 24,
                    geneAnnotationHeight: 16,
                    geneLabelPosition: "outside",
                    geneStrandSpacing: 4,
                    showMousePosition: true,
                    mousePositionColor: "#ff00ff",
                    plusStrandColor: "#fdff54",
                    minusStrandColor: "#68bf30",
                    labelColor: "black",
                    trackBorderWidth: 0,
                    trackBorderColor: "black"
                  },
                  uid: "dqBTMH78Rn6DeSyDBoAEXw"
                },
                {
                  chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
                  type: "vertical-chromosome-labels",
                  width: 30,
                  uid: "RHdQK4IRQ7yJeDmKWb7Pcg",
                  options: {
                    color: "#777777",
                    stroke: "black",
                    fontSize: 12,
                    fontIsLeftAligned: false,
                    minWidth: 35,
                    showMousePosition: true,
                    mousePositionColor: "#ff00ff"
                  }
                }
              ],
              center: [
                {
                  uid: "c1",
                  type: "combined",
                  height: 600,
                  contents: [
                    {
                      server: "//higlass.io/api/v1",
                      tilesetUid: "CQMd6V_cRw6iCI_-Unl3PQ",
                      type: "heatmap",
                      options: {
                        maxZoom: null,
                        labelPosition: "bottomRight",
                        name: "Rao et al. (2014) GM12878 MboI (allreps) 1kb",
                        backgroundColor: "black",
                        labelLeftMargin: 0,
                        labelRightMargin: 0,
                        labelTopMargin: 0,
                        labelBottomMargin: 0,
                        labelShowResolution: true,
                        labelShowAssembly: true,
                        labelColor: "#ffffff",
                        labelTextOpacity: 0.5,
                        labelBackgroundColor: "black",
                        labelBackgroundOpacity: 0.01,
                        colorRange: [
                          "#000000",
                          "#222e54",
                          "#448db2",
                          "#68bf30",
                          "#fdff54",
                          "#FFFFFF"
                        ],
                        colorbarBackgroundColor: "black",
                        colorbarBackgroundOpacity: 0.01,
                        colorbarPosition: "topRight",
                        trackBorderWidth: 0,
                        trackBorderColor: "black",
                        heatmapValueScaling: "log",
                        showMousePosition: true,
                        mousePositionColor: "#ff00ff",
                        showTooltip: false,
                        extent: "full",
                        zeroValueColor: null,
                        scaleStartPercent: "0.00000",
                        scaleEndPercent: "1.00000"
                      },
                      height: 500,
                      uid: "GjuZed1ySGW1IzZZqFB9BA",
                      transforms: [
                        {
                          name: "ICE",
                          value: "weight"
                        }
                      ]
                    }
                  ],
                  options: {}
                }
              ],
              right: [],
              bottom: [],
              whole: [],
              gallery: []
            },
            layout: {
              w: 12,
              h: 12,
              x: 0,
              y: 0,
              moved: false,
              static: false
            }
          }
        },
        x: 0,
        y: 0,
        w: 8,
        h: 2
      },
      {
        component: "higlass",
        coordinationScopes: {
          genomicZoomX: "A",
          genomicZoomY: "A",
          genomicTargetX: "A",
          genomicTargetY: "A"
        },
        props: {
          hgViewConfig: {
            uid: "aa",
            autocompleteSource: "/api/v1/suggest/?d=OHJakQICQD6gTD7skx4EWA&",
            genomePositionSearchBox: {
              autocompleteServer: "//higlass.io/api/v1",
              autocompleteId: "OHJakQICQD6gTD7skx4EWA",
              chromInfoServer: "//higlass.io/api/v1",
              chromInfoId: "hg19",
              visible: true
            },
            chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
            tracks: {
              top: [
                {
                  type: "horizontal-gene-annotations",
                  height: 60,
                  tilesetUid: "OHJakQICQD6gTD7skx4EWA",
                  server: "//higlass.io/api/v1",
                  uid: "OHJakQICQD6gTD7skx4EWA",
                  options: {
                    name: "Gene Annotations (hg19)",
                    fontSize: 10,
                    labelPosition: "hidden",
                    labelLeftMargin: 0,
                    labelRightMargin: 0,
                    labelTopMargin: 0,
                    labelBottomMargin: 0,
                    minHeight: 24,
                    geneAnnotationHeight: 16,
                    geneLabelPosition: "outside",
                    geneStrandSpacing: 4,
                    showMousePosition: true,
                    mousePositionColor: "#ff00ff",
                    plusStrandColor: "#fdff54",
                    minusStrandColor: "#68bf30",
                    labelColor: "black",
                    trackBorderWidth: 0,
                    trackBorderColor: "black"
                  }
                },
                {
                  chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
                  type: "horizontal-chromosome-labels",
                  height: 30,
                  uid: "X4e_1DKiQHmyghDa6lLMVA",
                  options: {
                    color: "#808080",
                    stroke: "black",
                    fontSize: 12,
                    fontIsLeftAligned: false,
                    showMousePosition: true,
                    mousePositionColor: "#ff00ff"
                  }
                }
              ],
              left: [
                {
                  type: "vertical-gene-annotations",
                  width: 60,
                  tilesetUid: "OHJakQICQD6gTD7skx4EWA",
                  server: "//higlass.io/api/v1",
                  options: {
                    labelPosition: "bottomRight",
                    name: "Gene Annotations (hg19)",
                    fontSize: 10,
                    labelLeftMargin: 0,
                    labelRightMargin: 0,
                    labelTopMargin: 0,
                    labelBottomMargin: 0,
                    minWidth: 24,
                    geneAnnotationHeight: 16,
                    geneLabelPosition: "outside",
                    geneStrandSpacing: 4,
                    showMousePosition: true,
                    mousePositionColor: "#ff00ff",
                    plusStrandColor: "#fdff54",
                    minusStrandColor: "#68bf30",
                    labelColor: "black",
                    trackBorderWidth: 0,
                    trackBorderColor: "black"
                  },
                  uid: "dqBTMH78Rn6DeSyDBoAEXw"
                },
                {
                  chromInfoPath: "//s3.amazonaws.com/pkerp/data/hg19/chromSizes.tsv",
                  type: "vertical-chromosome-labels",
                  width: 30,
                  uid: "RHdQK4IRQ7yJeDmKWb7Pcg",
                  options: {
                    color: "#777777",
                    stroke: "black",
                    fontSize: 12,
                    fontIsLeftAligned: false,
                    minWidth: 35,
                    showMousePosition: true,
                    mousePositionColor: "#ff00ff"
                  }
                }
              ],
              center: [
                {
                  uid: "c1",
                  type: "combined",
                  height: 600,
                  contents: [
                    {
                      server: "//higlass.io/api/v1",
                      tilesetUid: "CQMd6V_cRw6iCI_-Unl3PQ",
                      type: "heatmap",
                      options: {
                        maxZoom: null,
                        labelPosition: "bottomRight",
                        name: "Rao et al. (2014) GM12878 MboI (allreps) 1kb",
                        backgroundColor: "black",
                        labelLeftMargin: 0,
                        labelRightMargin: 0,
                        labelTopMargin: 0,
                        labelBottomMargin: 0,
                        labelShowResolution: true,
                        labelShowAssembly: true,
                        labelColor: "#ffffff",
                        labelTextOpacity: 0.5,
                        labelBackgroundColor: "black",
                        labelBackgroundOpacity: 0.01,
                        colorRange: [
                          "#000000",
                          "#222e54",
                          "#448db2",
                          "#68bf30",
                          "#fdff54",
                          "#FFFFFF"
                        ],
                        colorbarBackgroundColor: "black",
                        colorbarBackgroundOpacity: 0.01,
                        colorbarPosition: "topRight",
                        trackBorderWidth: 0,
                        trackBorderColor: "black",
                        heatmapValueScaling: "log",
                        showMousePosition: true,
                        mousePositionColor: "#ff00ff",
                        showTooltip: false,
                        extent: "full",
                        zeroValueColor: null,
                        scaleStartPercent: "0.00000",
                        scaleEndPercent: "1.00000"
                      },
                      height: 500,
                      uid: "GjuZed1ySGW1IzZZqFB9BA",
                      transforms: [
                        {
                          name: "ICE",
                          value: "weight"
                        }
                      ]
                    }
                  ],
                  options: {}
                }
              ],
              right: [],
              bottom: [],
              whole: [],
              gallery: []
            },
            layout: {
              w: 12,
              h: 12,
              x: 0,
              y: 0,
              moved: false,
              static: false
            }
          }
        },
        x: 8,
        y: 0,
        w: 4,
        h: 2
      }
    ]
  },
  "sc-atac-seq-10x-genomics-pbmc": {
    version: "1.0.0",
    name: "HiGlass serverless demo with 10x Genomics scATAC-seq 5k PBMC dataset",
    datasets: [
      {
        uid: "10x-genomics-pbmc",
        name: "10x Genomics PBMC",
        files: [
          {
            type: "genomic-profiles",
            fileType: "genomic-profiles.zarr",
            url: "http://higlass-serverless.s3.amazonaws.com/multivec/pbmc_10x_peaks_by_cluster.zarr"
          }
        ]
      }
    ],
    layout: [
      {
        component: "genomicProfiles",
        props: {
          profileTrackUidKey: "file"
        },
        x: 0,
        y: 0,
        w: 8,
        h: 2
      },
      {
        component: "description",
        props: {
          description: "10x Genomics scATAC-seq of 5k PBMCs. Note: the Zarr HiGlass Plugin Datafetcher is not yet optimized. Please be patient while the HiGlass tracks load."
        },
        x: 8,
        y: 0,
        w: 4,
        h: 2
      }
    ],
    initStrategy: "auto"
  },
  "portal-ui-featured": {
    coordinationSpace: {
      dataset: {
        A: "A"
      },
      spatialZoom: {
        A: 0.6219962674826599
      },
      spatialRotation: {
        A: 0
      },
      spatialTargetX: {
        A: 550.9755273834661
      },
      spatialTargetY: {
        A: 418.2987491735642
      },
      spatialTargetZ: {
        A: 6252776074688882e-28
      },
      heatmapZoomX: {
        A: 0
      },
      heatmapZoomY: {
        A: 0
      },
      heatmapTargetX: {
        A: 0
      },
      heatmapTargetY: {
        A: 0
      },
      cellFilter: {
        A: null
      },
      cellHighlight: {
        A: "761"
      },
      cellSetSelection: {
        A: [
          [
            "K-Means [Mean] Expression",
            "Cluster 1"
          ],
          [
            "K-Means [Mean] Expression",
            "Cluster 2"
          ],
          [
            "K-Means [Mean] Expression",
            "Cluster 3"
          ],
          [
            "K-Means [Mean] Expression",
            "Cluster 4"
          ],
          [
            "K-Means [Mean] Expression",
            "Cluster 5"
          ],
          [
            "K-Means [Mean] Expression",
            "Cluster 6"
          ]
        ]
      },
      cellSetHighlight: {
        A: null
      },
      cellSetColor: {
        A: [
          {
            path: [
              "K-Means [Mean] Expression"
            ],
            color: [
              68,
              119,
              170,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean] Expression",
              "Cluster 1"
            ],
            color: [
              68,
              119,
              170,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean] Expression",
              "Cluster 2"
            ],
            color: [
              136,
              204,
              238,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean] Expression",
              "Cluster 3"
            ],
            color: [
              68,
              170,
              153,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean] Expression",
              "Cluster 4"
            ],
            color: [
              17,
              119,
              51,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean] Expression",
              "Cluster 5"
            ],
            color: [
              153,
              153,
              51,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean] Expression",
              "Cluster 6"
            ],
            color: [
              221,
              204,
              119,
              255
            ]
          },
          {
            path: [
              "K-Means [Covariance] Expression"
            ],
            color: [
              68,
              119,
              170,
              255
            ]
          },
          {
            path: [
              "K-Means [Covariance] Expression",
              "Cluster 1"
            ],
            color: [
              68,
              119,
              170,
              255
            ]
          },
          {
            path: [
              "K-Means [Covariance] Expression",
              "Cluster 2"
            ],
            color: [
              136,
              204,
              238,
              255
            ]
          },
          {
            path: [
              "K-Means [Covariance] Expression",
              "Cluster 3"
            ],
            color: [
              68,
              170,
              153,
              255
            ]
          },
          {
            path: [
              "K-Means [Covariance] Expression",
              "Cluster 4"
            ],
            color: [
              17,
              119,
              51,
              255
            ]
          },
          {
            path: [
              "K-Means [Covariance] Expression",
              "Cluster 5"
            ],
            color: [
              153,
              153,
              51,
              255
            ]
          },
          {
            path: [
              "K-Means [Covariance] Expression",
              "Cluster 6"
            ],
            color: [
              221,
              204,
              119,
              255
            ]
          },
          {
            path: [
              "K-Means [Total] Expression"
            ],
            color: [
              68,
              119,
              170,
              255
            ]
          },
          {
            path: [
              "K-Means [Total] Expression",
              "Cluster 1"
            ],
            color: [
              68,
              119,
              170,
              255
            ]
          },
          {
            path: [
              "K-Means [Total] Expression",
              "Cluster 2"
            ],
            color: [
              136,
              204,
              238,
              255
            ]
          },
          {
            path: [
              "K-Means [Total] Expression",
              "Cluster 3"
            ],
            color: [
              68,
              170,
              153,
              255
            ]
          },
          {
            path: [
              "K-Means [Total] Expression",
              "Cluster 4"
            ],
            color: [
              17,
              119,
              51,
              255
            ]
          },
          {
            path: [
              "K-Means [Total] Expression",
              "Cluster 5"
            ],
            color: [
              153,
              153,
              51,
              255
            ]
          },
          {
            path: [
              "K-Means [Total] Expression",
              "Cluster 6"
            ],
            color: [
              221,
              204,
              119,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean-All-SubRegions] Expression"
            ],
            color: [
              68,
              119,
              170,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean-All-SubRegions] Expression",
              "Cluster 1"
            ],
            color: [
              68,
              119,
              170,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean-All-SubRegions] Expression",
              "Cluster 2"
            ],
            color: [
              136,
              204,
              238,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean-All-SubRegions] Expression",
              "Cluster 3"
            ],
            color: [
              68,
              170,
              153,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean-All-SubRegions] Expression",
              "Cluster 4"
            ],
            color: [
              17,
              119,
              51,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean-All-SubRegions] Expression",
              "Cluster 5"
            ],
            color: [
              153,
              153,
              51,
              255
            ]
          },
          {
            path: [
              "K-Means [Mean-All-SubRegions] Expression",
              "Cluster 6"
            ],
            color: [
              221,
              204,
              119,
              255
            ]
          },
          {
            path: [
              "K-Means [Shape-Vectors]"
            ],
            color: [
              68,
              119,
              170,
              255
            ]
          },
          {
            path: [
              "K-Means [Shape-Vectors]",
              "Cluster 1"
            ],
            color: [
              68,
              119,
              170,
              255
            ]
          },
          {
            path: [
              "K-Means [Shape-Vectors]",
              "Cluster 2"
            ],
            color: [
              136,
              204,
              238,
              255
            ]
          },
          {
            path: [
              "K-Means [Shape-Vectors]",
              "Cluster 3"
            ],
            color: [
              68,
              170,
              153,
              255
            ]
          }
        ]
      },
      geneFilter: {
        A: null
      },
      geneHighlight: {
        A: null
      },
      geneSelection: {
        A: null
      },
      geneExpressionColormap: {
        A: "plasma"
      },
      geneExpressionColormapRange: {
        A: [
          0.065,
          0.435
        ]
      },
      cellColorEncoding: {
        A: "cellSetSelection"
      },
      spatialRasterLayers: {
        A: [
          {
            type: "t",
            index: 0,
            colormap: null,
            opacity: 1,
            domainType: "Min/Max",
            transparentColor: null,
            channels: [
              {
                selection: {
                  z: 5,
                  t: 0,
                  c: 10
                },
                color: [
                  0,
                  0,
                  255
                ],
                visible: true,
                slider: [
                  1,
                  14906
                ]
              },
              {
                selection: {
                  z: 5,
                  t: 0,
                  c: 15
                },
                color: [
                  0,
                  255,
                  0
                ],
                visible: true,
                slider: [
                  2313,
                  31611
                ]
              },
              {
                selection: {
                  z: 5,
                  t: 0,
                  c: 45
                },
                color: [
                  255,
                  0,
                  255
                ],
                visible: true,
                slider: [
                  2570,
                  21074
                ]
              },
              {
                selection: {
                  z: 5,
                  t: 0,
                  c: 20
                },
                color: [
                  255,
                  255,
                  0
                ],
                visible: true,
                slider: [
                  2827,
                  11565
                ]
              },
              {
                selection: {
                  z: 5,
                  t: 0,
                  c: 31
                },
                slider: [
                  5658,
                  17479
                ],
                visible: true,
                color: [
                  255,
                  128,
                  0
                ]
              },
              {
                selection: {
                  z: 5,
                  t: 0,
                  c: 39
                },
                slider: [
                  1767,
                  11735
                ],
                visible: true,
                color: [
                  255,
                  255,
                  255
                ]
              }
            ]
          }
        ]
      },
      spatialCellsLayer: {
        A: {
          opacity: 0,
          radius: 50,
          visible: true,
          stroked: true
        }
      },
      spatialMoleculesLayer: {
        A: null
      },
      spatialNeighborhoodsLayer: {
        A: null
      },
      additionalCellSets: {
        A: null
      },
      moleculeHighlight: {
        A: null
      }
    },
    datasets: [
      {
        files: [
          {
            fileType: "cells.json",
            type: "cells",
            url: "https://assets.hubmapconsortium.org/ca3016d836d8ee50bef1b93f339c9679/output_json/R002_X002_Y007.cells.json?token="
          },
          {
            fileType: "cell-sets.json",
            type: "cell-sets",
            url: "https://assets.hubmapconsortium.org/ca3016d836d8ee50bef1b93f339c9679/output_json/R002_X002_Y007.cell-sets.json?token="
          },
          {
            fileType: "clusters.json",
            type: "expression-matrix",
            url: "https://assets.hubmapconsortium.org/ca3016d836d8ee50bef1b93f339c9679/output_json/R002_X002_Y007.clusters.json?token="
          },
          {
            fileType: "raster.json",
            options: {
              images: [
                {
                  metadata: {
                    omeTiffOffsetsUrl: "https://assets.hubmapconsortium.org/ca3016d836d8ee50bef1b93f339c9679/output_offsets/R002_X002_Y007.offsets.json?token="
                  },
                  name: "R002_X002_Y007",
                  type: "ome-tiff",
                  url: "https://assets.hubmapconsortium.org/ca3016d836d8ee50bef1b93f339c9679/output/extract/expressions/ome-tiff/R002_X002_Y007.ome.tiff?token="
                }
              ],
              schemaVersion: "0.0.2"
            },
            type: "raster"
          }
        ],
        name: "SPRM",
        uid: "A"
      }
    ],
    description: "",
    initStrategy: "auto",
    layout: [
      {
        component: "spatial",
        coordinationScopes: {
          dataset: "A",
          spatialZoom: "A",
          spatialRotation: "A",
          spatialTargetX: "A",
          spatialTargetY: "A",
          spatialTargetZ: "A",
          cellFilter: "A",
          cellHighlight: "A",
          cellSetSelection: "A",
          cellSetHighlight: "A",
          cellSetColor: "A",
          geneHighlight: "A",
          geneSelection: "A",
          geneExpressionColormap: "A",
          geneExpressionColormapRange: "A",
          cellColorEncoding: "A",
          spatialRasterLayers: "A",
          spatialCellsLayer: "A",
          spatialMoleculesLayer: "A",
          spatialNeighborhoodsLayer: "A",
          additionalCellSets: "A",
          moleculeHighlight: "A"
        },
        h: 8,
        w: 7,
        x: 3,
        y: 0
      },
      {
        component: "description",
        coordinationScopes: {
          dataset: "A",
          spatialRasterLayers: "A"
        },
        h: 2,
        w: 2,
        x: 10,
        y: 10
      },
      {
        component: "layerController",
        coordinationScopes: {
          dataset: "A",
          spatialRasterLayers: "A",
          spatialCellsLayer: "A",
          spatialMoleculesLayer: "A",
          spatialNeighborhoodsLayer: "A"
        },
        h: 8,
        w: 3,
        x: 0,
        y: 0
      },
      {
        component: "cellSets",
        coordinationScopes: {
          dataset: "A",
          cellSetSelection: "A",
          cellSetHighlight: "A",
          cellSetColor: "A",
          cellColorEncoding: "A",
          additionalCellSets: "A"
        },
        h: 5,
        w: 2,
        x: 10,
        y: 5
      },
      {
        component: "genes",
        coordinationScopes: {
          dataset: "A",
          geneFilter: "A",
          geneHighlight: "A",
          geneSelection: "A",
          cellColorEncoding: "A"
        },
        h: 5,
        props: {
          variablesLabelOverride: "antigen"
        },
        w: 2,
        x: 10,
        y: 0
      },
      {
        component: "heatmap",
        coordinationScopes: {
          dataset: "A",
          heatmapZoomX: "A",
          heatmapZoomY: "A",
          heatmapTargetX: "A",
          heatmapTargetY: "A",
          cellFilter: "A",
          cellHighlight: "A",
          cellSetSelection: "A",
          cellSetHighlight: "A",
          cellSetColor: "A",
          geneFilter: "A",
          geneHighlight: "A",
          geneSelection: "A",
          geneExpressionColormap: "A",
          geneExpressionColormapRange: "A",
          cellColorEncoding: "A",
          additionalCellSets: "A"
        },
        h: 4,
        props: {
          transpose: true,
          variablesLabelOverride: "antigen"
        },
        w: 10,
        x: 0,
        y: 8
      }
    ],
    name: "R002_X002_Y007",
    version: "1.0.1"
  }
};
function listConfigs(showAll) {
  return Object.entries(configs).filter((entry) => showAll || entry[1].public).map(([id, config]) => ({
    id,
    name: config.name,
    description: config.description
  }));
}
function getConfig(id) {
  return configs[id];
}

// src/app/Welcome.js
import React31 from "react";

// src/version.json
var note = "This file is regenerated by push-demo.sh.";
var branch = "release_1.1.17";
var date = "2021-11-17";
var hash = "db07d05";
var version_default = {
  note,
  branch,
  date,
  hash
};

// src/app/Welcome.js
function DatasetList(props) {
  const { configs: configs2, theme } = props;
  const aClassName = "list-group-item list-group-item-action flex-column align-items-start bg-secondary";
  const links = configs2.map(({ id, name: name2, description: description2 }) => /* @__PURE__ */ React31.createElement("div", {
    className: aClassName,
    key: id
  }, /* @__PURE__ */ React31.createElement("a", {
    href: `?dataset=${id}&theme=${theme}`,
    key: id
  }, /* @__PURE__ */ React31.createElement("h5", null, name2), /* @__PURE__ */ React31.createElement("p", null, description2)), /* @__PURE__ */ React31.createElement("a", {
    href: `?dataset=${id}&theme=${theme}&small`,
    style: { fontSize: "75%" }
  }, name2, " as component")));
  return /* @__PURE__ */ React31.createElement("div", {
    className: "list-group"
  }, links);
}
function Form(props) {
  const { configs: configs2, theme } = props;
  return /* @__PURE__ */ React31.createElement("form", {
    method: "GET"
  }, /* @__PURE__ */ React31.createElement("h1", null, "Vitessce"), /* @__PURE__ */ React31.createElement("div", null, "Select a dataset:"), /* @__PURE__ */ React31.createElement(DatasetList, {
    configs: configs2,
    theme
  }), /* @__PURE__ */ React31.createElement("br", null), /* @__PURE__ */ React31.createElement("div", null, "Or specify URL of configuration:"), /* @__PURE__ */ React31.createElement("div", {
    className: "input-group mb-3"
  }, /* @__PURE__ */ React31.createElement("input", {
    type: "text",
    name: "url",
    className: "form-control"
  }), /* @__PURE__ */ React31.createElement("input", {
    type: "hidden",
    name: "theme",
    value: theme
  }), /* @__PURE__ */ React31.createElement("div", {
    className: "input-group-append"
  }, /* @__PURE__ */ React31.createElement("button", {
    className: "btn btn-outline-secondary",
    type: "submit"
  }, "Load"))));
}
function Info() {
  return /* @__PURE__ */ React31.createElement(React31.Fragment, null, /* @__PURE__ */ React31.createElement("p", {
    className: "info-paragraph"
  }, "Vitessce is a visual integration tool for exploration of spatial single cell experiments. Its modular design is optimized for scalable, linked visualizations that support the spatial and non-spatial representation of tissue-, cell- and molecule-level data. Vitessce integrates the ", /* @__PURE__ */ React31.createElement("a", {
    href: "https://github.com/hms-dbmi/viv"
  }, "Viv library"), " to visualize highly multiplexed, high-resolution, high-bit depth image data directly from OME-TIFF files and Bio-Formats-compatible Zarr stores."), /* @__PURE__ */ React31.createElement("h5", {
    className: "info-section-text"
  }, "Contributors"), /* @__PURE__ */ React31.createElement("ul", null, /* @__PURE__ */ React31.createElement("li", null, /* @__PURE__ */ React31.createElement("a", {
    href: "https://github.com/keller-mark"
  }, "Mark Keller")), /* @__PURE__ */ React31.createElement("li", null, /* @__PURE__ */ React31.createElement("a", {
    href: "https://github.com/mccalluc"
  }, "Chuck McCallum")), /* @__PURE__ */ React31.createElement("li", null, /* @__PURE__ */ React31.createElement("a", {
    href: "https://github.com/ilan-gold"
  }, "Ilan Gold")), /* @__PURE__ */ React31.createElement("li", null, /* @__PURE__ */ React31.createElement("a", {
    href: "https://github.com/manzt"
  }, "Trevor Manz")), /* @__PURE__ */ React31.createElement("li", null, /* @__PURE__ */ React31.createElement("a", {
    href: "https://github.com/thomaslchan"
  }, "Tos Chan")), /* @__PURE__ */ React31.createElement("li", null, /* @__PURE__ */ React31.createElement("a", {
    href: "https://github.com/jkmarx"
  }, "Jennifer Marx")), /* @__PURE__ */ React31.createElement("li", null, /* @__PURE__ */ React31.createElement("a", {
    href: "https://github.com/pkharchenko"
  }, "Peter Kharchenko")), /* @__PURE__ */ React31.createElement("li", null, /* @__PURE__ */ React31.createElement("a", {
    href: "https://github.com/ngehlenborg"
  }, "Nils Gehlenborg"))), /* @__PURE__ */ React31.createElement("h5", {
    className: "info-section-text"
  }, "Source Code"), /* @__PURE__ */ React31.createElement("ul", null, /* @__PURE__ */ React31.createElement("li", null, /* @__PURE__ */ React31.createElement("a", {
    href: "https://github.com/vitessce/vitessce"
  }, "GitHub")), /* @__PURE__ */ React31.createElement("li", null, /* @__PURE__ */ React31.createElement("a", {
    href: "https://www.npmjs.com/package/vitessce"
  }, "NPM"))), /* @__PURE__ */ React31.createElement("h5", {
    className: "info-section-text"
  }, "Funding"), /* @__PURE__ */ React31.createElement("ul", null, /* @__PURE__ */ React31.createElement("li", null, "NIH/OD Human BioMolecular Atlas Program (HuBMAP) (OT2OD026677, PI: Nils Gehlenborg)."), /* @__PURE__ */ React31.createElement("li", null, "NIH/NLM Biomedical Informatics and Data Science Research Training Program (T15LM007092, PI: Nils Gehlenborg)"), /* @__PURE__ */ React31.createElement("li", null, "Harvard Stem Cell Institute (CF-0014-17-03, PI: Nils Gehlenborg)")), /* @__PURE__ */ React31.createElement("p", {
    className: "info-section-text"
  }, "This deployment: branch=", version_default.branch, " | hash=", version_default.hash, " | date=", version_default.date));
}
function Welcome(props) {
  const { configs: configs2, theme, showBetaHeader } = props;
  return /* @__PURE__ */ React31.createElement("div", {
    className: `vitessce-container vitessce-theme-${theme} welcome-container`
  }, showBetaHeader && /* @__PURE__ */ React31.createElement("div", {
    className: "welcome-beta-header"
  }, /* @__PURE__ */ React31.createElement("p", null, "Visit ", /* @__PURE__ */ React31.createElement("a", {
    href: "http://beta.vitessce.io"
  }, "beta.vitessce.io"), " to view the next version of the Vitessce home page and documentation!")), /* @__PURE__ */ React31.createElement("div", {
    className: "react-grid-layout container-fluid",
    style: { height: "max(100vh, 100%)" }
  }, /* @__PURE__ */ React31.createElement("div", {
    className: "row"
  }, /* @__PURE__ */ React31.createElement("div", {
    className: "welcome-col-left"
  }, /* @__PURE__ */ React31.createElement("div", {
    className: "card card-body bg-primary"
  }, /* @__PURE__ */ React31.createElement(Form, {
    configs: configs2,
    theme
  }))), /* @__PURE__ */ React31.createElement("div", {
    className: "welcome-col-right"
  }, /* @__PURE__ */ React31.createElement("div", {
    className: "card card-body bg-primary"
  }, /* @__PURE__ */ React31.createElement(Info, null))))));
}

// src/app/Warning.js
import React32 from "react";
function Warning(props) {
  const {
    title: title16,
    preformatted,
    unformatted,
    theme
  } = props;
  return /* @__PURE__ */ React32.createElement("div", {
    className: `vitessce-container vitessce-theme-${theme}`
  }, /* @__PURE__ */ React32.createElement("div", {
    className: "warning-layout container-fluid"
  }, /* @__PURE__ */ React32.createElement("div", {
    className: "row"
  }, /* @__PURE__ */ React32.createElement("div", {
    className: "col-12"
  }, /* @__PURE__ */ React32.createElement("div", {
    className: PRIMARY_CARD
  }, /* @__PURE__ */ React32.createElement("h1", null, title16), /* @__PURE__ */ React32.createElement("pre", null, preformatted), /* @__PURE__ */ React32.createElement("div", null, unformatted))))));
}

// src/app/Vitessce.js
import React74, { useEffect as useEffect25, useMemo as useMemo17 } from "react";
import {
  ThemeProvider,
  StylesProvider,
  createGenerateClassName
} from "@material-ui/core/styles";
import isEqual14 from "lodash/isEqual";

// src/app/CallbackPublisher.js
import { useEffect as useEffect10 } from "react";

// src/app/view-config-versions.js
import Ajv3 from "ajv";

// src/schemas/config-0.1.0.schema.json
var $schema9 = "http://json-schema.org/draft-07/schema#";
var $id9 = "https://github.com/vitessce/vitessce/#dataset";
var title9 = "Vitessce data set";
var type9 = "object";
var definitions9 = {
  components: {
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: { type: "string" },
        props: { type: "object" },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" }
      }
    }
  },
  requestInit: {
    type: "object",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  }
};
var additionalProperties3 = false;
var required3 = ["version", "name", "layers"];
var properties3 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  layers: {
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["name", "type", "fileType", "url"],
      properties: {
        name: { type: "string" },
        type: { type: "string" },
        fileType: { type: "string" },
        url: { type: "string" },
        requestInit: { $ref: "#/definitions/requestInit" }
      }
    }
  },
  staticLayout: { $ref: "#/definitions/components" },
  version: {
    type: "string",
    enum: ["0.1.0"]
  }
};
var config_0_1_0_schema_default = {
  $schema: $schema9,
  $id: $id9,
  title: title9,
  type: type9,
  definitions: definitions9,
  additionalProperties: additionalProperties3,
  required: required3,
  properties: properties3
};

// src/schemas/config-1.0.0.schema.json
var $schema10 = "http://json-schema.org/draft-07/schema#";
var $id10 = "https://github.com/vitessce/vitessce/#dataset";
var title10 = "Vitessce data set";
var type10 = "object";
var definitions10 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialLayers: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          type: "string",
          description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity", "type"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      opacity: {
        type: "number"
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      type: {
        type: "string",
        enum: ["raster"]
      }
    }
  },
  moleculesLayer: {
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity", "type"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      },
      type: {
        type: "string",
        enum: ["molecules"]
      }
    }
  },
  cellsLayer: {
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity", "type"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      },
      type: {
        type: "string",
        enum: ["cells"]
      }
    }
  },
  neighborhoodsLayer: {
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible", "type"],
    properties: {
      visible: {
        type: "boolean"
      },
      type: {
        type: "string",
        enum: ["neighborhoods"]
      }
    }
  },
  spatialLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      oneOf: [
        {
          $ref: "#/definitions/rasterLayer"
        },
        {
          $ref: "#/definitions/cellsLayer"
        },
        {
          $ref: "#/definitions/moleculesLayer"
        },
        {
          $ref: "#/definitions/neighborhoodsLayer"
        }
      ]
    }
  }
};
var additionalProperties4 = false;
var required4 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties4 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialLayers" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.0"],
    description: "The schema version for the view config."
  }
};
var config_1_0_0_schema_default = {
  $schema: $schema10,
  $id: $id10,
  title: title10,
  type: type10,
  definitions: definitions10,
  additionalProperties: additionalProperties4,
  required: required4,
  properties: properties4
};

// src/schemas/config-1.0.1.schema.json
var $schema11 = "http://json-schema.org/draft-07/schema#";
var $id11 = "https://github.com/vitessce/vitessce/#dataset";
var title11 = "Vitessce data set";
var type11 = "object";
var definitions11 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            spatialRotationX: { type: "string" },
            spatialRotationY: { type: "string" },
            spatialRotationZ: { type: "string" },
            spatialRotationOrbit: { type: "string" },
            spatialOrbitAxis: { type: "string" },
            spatialAxisFixed: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialRasterLayers: { type: "string" },
            spatialCellsLayer: { type: "string" },
            spatialMoleculesLayer: { type: "string" },
            spatialNeighborhoodsLayer: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          type: "string",
          description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      opacity: {
        type: "number"
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      resolution: {
        type: "number",
        description: "Resolution of 3D volumetric rendering"
      },
      xSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      renderingMode: {
        type: "string",
        description: "Rendering mode of 3D volumetric rendering"
      },
      ySlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      zSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      type: {
        type: "string"
      },
      use3d: {
        type: "boolean"
      },
      visible: {
        type: "boolean",
        description: "Determines whether this entire layer will be rendered in the spatial component."
      }
    }
  },
  moleculesLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  cellsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  neighborhoodsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible"],
    properties: {
      visible: {
        type: "boolean"
      }
    }
  },
  spatialRasterLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      $ref: "#/definitions/rasterLayer"
    }
  }
};
var additionalProperties5 = false;
var required5 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties5 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationOrbit: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialOrbitAxis: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "string" }
            ]
          }
        }
      },
      spatialAxisFixed: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "Whether or not to have a fixed axis for the camera. Only useful for 3D viewing."
              },
              { type: "boolean" }
            ]
          }
        }
      },
      spatialRasterLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialRasterLayers" }
            ]
          }
        }
      },
      spatialCellsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/cellsLayer" }
            ]
          }
        }
      },
      spatialNeighborhoodsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/neighborhoodsLayer" }
            ]
          }
        }
      },
      spatialMoleculesLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/moleculesLayer" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.1"],
    description: "The schema version for the view config."
  }
};
var config_1_0_1_schema_default = {
  $schema: $schema11,
  $id: $id11,
  title: title11,
  type: type11,
  definitions: definitions11,
  additionalProperties: additionalProperties5,
  required: required5,
  properties: properties5
};

// src/schemas/config-1.0.2.schema.json
var $schema12 = "http://json-schema.org/draft-07/schema#";
var $id12 = "https://github.com/vitessce/vitessce/#dataset";
var title12 = "Vitessce data set";
var type12 = "object";
var definitions12 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            spatialRotationX: { type: "string" },
            spatialRotationY: { type: "string" },
            spatialRotationZ: { type: "string" },
            spatialRotationOrbit: { type: "string" },
            spatialOrbitAxis: { type: "string" },
            spatialAxisFixed: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialRasterLayers: { type: "string" },
            spatialCellsLayer: { type: "string" },
            spatialMoleculesLayer: { type: "string" },
            spatialNeighborhoodsLayer: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          type: "string",
          description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      opacity: {
        type: "number"
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      resolution: {
        type: "number",
        description: "Resolution of 3D volumetric rendering"
      },
      xSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      renderingMode: {
        type: "string",
        description: "Rendering mode of 3D volumetric rendering"
      },
      ySlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      zSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      type: {
        type: "string",
        enum: ["raster", "bitmask"]
      },
      use3d: {
        type: "boolean"
      },
      visible: {
        type: "boolean",
        description: "Determines whether this entire layer will be rendered in the spatial component."
      }
    }
  },
  moleculesLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  cellsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  neighborhoodsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible"],
    properties: {
      visible: {
        type: "boolean"
      }
    }
  },
  spatialRasterLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      $ref: "#/definitions/rasterLayer"
    }
  }
};
var additionalProperties6 = false;
var required6 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties6 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationOrbit: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialOrbitAxis: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "string" }
            ]
          }
        }
      },
      spatialAxisFixed: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "Whether or not to have a fixed axis for the camera. Only useful for 3D viewing."
              },
              { type: "boolean" }
            ]
          }
        }
      },
      spatialRasterLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialRasterLayers" }
            ]
          }
        }
      },
      spatialCellsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/cellsLayer" }
            ]
          }
        }
      },
      spatialNeighborhoodsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/neighborhoodsLayer" }
            ]
          }
        }
      },
      spatialMoleculesLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/moleculesLayer" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.2"],
    description: "The schema version for the view config."
  }
};
var config_1_0_2_schema_default = {
  $schema: $schema12,
  $id: $id12,
  title: title12,
  type: type12,
  definitions: definitions12,
  additionalProperties: additionalProperties6,
  required: required6,
  properties: properties6
};

// src/schemas/config-1.0.3.schema.json
var $schema13 = "http://json-schema.org/draft-07/schema#";
var $id13 = "https://github.com/vitessce/vitessce/#dataset";
var title13 = "Vitessce data set";
var type13 = "object";
var definitions13 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            spatialRotationX: { type: "string" },
            spatialRotationY: { type: "string" },
            spatialRotationZ: { type: "string" },
            spatialRotationOrbit: { type: "string" },
            spatialOrbitAxis: { type: "string" },
            spatialAxisFixed: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialRasterLayers: { type: "string" },
            spatialCellsLayer: { type: "string" },
            spatialMoleculesLayer: { type: "string" },
            spatialNeighborhoodsLayer: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          type: "string",
          description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      opacity: {
        type: "number"
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      resolution: {
        type: "number",
        description: "Resolution of 3D volumetric rendering"
      },
      xSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      renderingMode: {
        type: "string",
        description: "Rendering mode of 3D volumetric rendering"
      },
      ySlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      zSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      type: {
        type: "string",
        enum: ["raster", "bitmask"]
      },
      use3d: {
        type: "boolean"
      },
      visible: {
        type: "boolean",
        description: "Determines whether this entire layer will be rendered in the spatial component."
      }
    }
  },
  moleculesLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  cellsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  neighborhoodsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible"],
    properties: {
      visible: {
        type: "boolean"
      }
    }
  },
  spatialRasterLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      $ref: "#/definitions/rasterLayer"
    }
  }
};
var additionalProperties7 = false;
var required7 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties7 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationOrbit: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialOrbitAxis: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "string" }
            ]
          }
        }
      },
      spatialAxisFixed: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "Whether or not to have a fixed axis for the camera. Only useful for 3D viewing."
              },
              { type: "boolean" }
            ]
          }
        }
      },
      spatialRasterLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialRasterLayers" }
            ]
          }
        }
      },
      spatialCellsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/cellsLayer" }
            ]
          }
        }
      },
      spatialNeighborhoodsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/neighborhoodsLayer" }
            ]
          }
        }
      },
      spatialMoleculesLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/moleculesLayer" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.3"],
    description: "The schema version for the view config."
  }
};
var config_1_0_3_schema_default = {
  $schema: $schema13,
  $id: $id13,
  title: title13,
  type: type13,
  definitions: definitions13,
  additionalProperties: additionalProperties7,
  required: required7,
  properties: properties7
};

// src/schemas/config-1.0.4.schema.json
var $schema14 = "http://json-schema.org/draft-07/schema#";
var $id14 = "https://github.com/vitessce/vitessce/#dataset";
var title14 = "Vitessce data set";
var type14 = "object";
var definitions14 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            embeddingCellOpacity: { type: "string" },
            embeddingCellRadiusMode: { type: "string" },
            embeddingCellOpacityMode: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            spatialRotationX: { type: "string" },
            spatialRotationY: { type: "string" },
            spatialRotationZ: { type: "string" },
            spatialRotationOrbit: { type: "string" },
            spatialOrbitAxis: { type: "string" },
            spatialAxisFixed: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialRasterLayers: { type: "string" },
            spatialCellsLayer: { type: "string" },
            spatialMoleculesLayer: { type: "string" },
            spatialNeighborhoodsLayer: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          type: "string",
          description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      opacity: {
        type: "number"
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      resolution: {
        type: "number",
        description: "Resolution of 3D volumetric rendering"
      },
      xSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      renderingMode: {
        type: "string",
        description: "Rendering mode of 3D volumetric rendering"
      },
      ySlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      zSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      type: {
        type: "string",
        enum: ["raster", "bitmask"]
      },
      use3d: {
        type: "boolean"
      },
      visible: {
        type: "boolean",
        description: "Determines whether this entire layer will be rendered in the spatial component."
      }
    }
  },
  moleculesLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  cellsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  neighborhoodsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible"],
    properties: {
      visible: {
        type: "boolean"
      }
    }
  },
  spatialRasterLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      $ref: "#/definitions/rasterLayer"
    }
  }
};
var additionalProperties8 = false;
var required8 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties8 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": {
            type: "number",
            description: "The cell radius value, used when embeddingCellRadiusMode is absolute or relative."
          }
        }
      },
      embeddingCellOpacity: {
        type: "object",
        patternProperties: {
          ".": {
            type: "number",
            description: "The cell opacity value, used when embeddingCellOpacityMode is static."
          }
        }
      },
      embeddingCellRadiusMode: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["manual", "auto"],
            description: "Should data points representing cells be assigned a static (manual) or dynamic (auto, based on zoom level and data extent) radius?"
          }
        }
      },
      embeddingCellOpacityMode: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["manual", "auto"],
            description: "Should data points representing cells be assigned a static (manual) or dynamic (auto, based on zoom level and data extent) opacity?"
          }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationOrbit: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialOrbitAxis: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "string" }
            ]
          }
        }
      },
      spatialAxisFixed: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "Whether or not to have a fixed axis for the camera. Only useful for 3D viewing."
              },
              { type: "boolean" }
            ]
          }
        }
      },
      spatialRasterLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialRasterLayers" }
            ]
          }
        }
      },
      spatialCellsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/cellsLayer" }
            ]
          }
        }
      },
      spatialNeighborhoodsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/neighborhoodsLayer" }
            ]
          }
        }
      },
      spatialMoleculesLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/moleculesLayer" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["geneSelection", "cellSetSelection"],
            description: "How should data points representing cells be colored?"
          }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.4"],
    description: "The schema version for the view config."
  }
};
var config_1_0_4_schema_default = {
  $schema: $schema14,
  $id: $id14,
  title: title14,
  type: type14,
  definitions: definitions14,
  additionalProperties: additionalProperties8,
  required: required8,
  properties: properties8
};

// src/schemas/config-1.0.5.schema.json
var $schema15 = "http://json-schema.org/draft-07/schema#";
var $id15 = "https://github.com/vitessce/vitessce/#dataset";
var title15 = "Vitessce data set";
var type15 = "object";
var definitions15 = {
  components: {
    description: "The layout array defines the views, or components, rendered in the grid.",
    type: "array",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["component", "x", "y"],
      properties: {
        component: {
          type: "string",
          description: "Specify a component using a name defined in the component registry."
        },
        props: {
          type: "object",
          description: "Extra prop values for the component."
        },
        x: { type: "integer" },
        y: { type: "integer" },
        w: { type: "integer" },
        h: { type: "integer" },
        coordinationScopes: {
          type: "object",
          description: "Component-level coordination scope mappings define which coordination object values a particular component can read and write, for each coordination type.",
          additionalProperties: false,
          required: [],
          properties: {
            dataset: { type: "string" },
            embeddingType: { type: "string" },
            embeddingZoom: { type: "string" },
            embeddingRotation: { type: "string" },
            embeddingTargetX: { type: "string" },
            embeddingTargetY: { type: "string" },
            embeddingTargetZ: { type: "string" },
            embeddingCellSetPolygonsVisible: { type: "string" },
            embeddingCellSetLabelsVisible: { type: "string" },
            embeddingCellSetLabelSize: { type: "string" },
            embeddingCellRadius: { type: "string" },
            embeddingCellOpacity: { type: "string" },
            embeddingCellRadiusMode: { type: "string" },
            embeddingCellOpacityMode: { type: "string" },
            spatialZoom: { type: "string" },
            spatialRotation: { type: "string" },
            spatialTargetX: { type: "string" },
            spatialTargetY: { type: "string" },
            spatialTargetZ: { type: "string" },
            spatialRotationX: { type: "string" },
            spatialRotationY: { type: "string" },
            spatialRotationZ: { type: "string" },
            spatialRotationOrbit: { type: "string" },
            spatialOrbitAxis: { type: "string" },
            spatialAxisFixed: { type: "string" },
            heatmapZoomX: { type: "string" },
            heatmapZoomY: { type: "string" },
            heatmapTargetX: { type: "string" },
            heatmapTargetY: { type: "string" },
            cellFilter: { type: "string" },
            cellHighlight: { type: "string" },
            cellSetSelection: { type: "string" },
            cellSetHighlight: { type: "string" },
            cellSetColor: { type: "string" },
            geneFilter: { type: "string" },
            geneHighlight: { type: "string" },
            geneSelection: { type: "string" },
            geneExpressionTransform: { type: "string" },
            geneExpressionColormap: { type: "string" },
            geneExpressionColormapRange: { type: "string" },
            cellColorEncoding: { type: "string" },
            spatialRasterLayers: { type: "string" },
            spatialCellsLayer: { type: "string" },
            spatialMoleculesLayer: { type: "string" },
            spatialNeighborhoodsLayer: { type: "string" },
            genomicZoomX: { type: "string" },
            genomicZoomY: { type: "string" },
            genomicTargetX: { type: "string" },
            genomicTargetY: { type: "string" },
            additionalCellSets: { type: "string" },
            moleculeHighlight: { type: "string" }
          }
        }
      }
    }
  },
  annDataCellSets: {
    type: "array",
    description: "Array of cell set configuration, following closely the conventions of the tabular schema",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["groupName", "setName"],
      properties: {
        groupName: {
          type: "string",
          description: "The display name for the set, like 'Cell Type' or 'Louvain.'"
        },
        setName: {
          oneOf: [
            {
              type: "string",
              description: "The location in the AnnData store for the set, like 'obs/louvain' or 'obs/celltype.'"
            },
            {
              type: "array",
              items: { type: "string" },
              description: "An array of locations in the AnnData store for a hierarchy of set names, from coarse to fine levels."
            }
          ]
        }
      }
    }
  },
  annDataCells: {
    type: "object",
    description: "The properties of this object are the configuration for how to layout scatterplots and spatial information",
    minProperties: 1,
    additionalProperties: false,
    required: [],
    properties: {
      xy: {
        type: "string",
        description: "The location in the AnnData store of cell centroids, like 'obsm/X_centroids.'"
      },
      poly: {
        type: "string",
        description: "The location in the AnnData store of cell polygon outlines, like 'obsm/X_polygons.'"
      },
      factors: {
        type: "array",
        description: "List of locations in the AnnData store of cell sets, like 'obs/louvain'",
        items: {
          type: "string"
        }
      },
      mappings: {
        patternProperties: {
          ".": {
            type: "object",
            description: "An object containing key-values for mappings like { UMAP: { key: 'obsm/X_umap', dims: [0, 1] } }.",
            additionalProperties: false,
            required: ["key"],
            properties: {
              key: {
                type: "string",
                description: "Where to look in the AnnData store for this mapping, like 'obsm/X_umap.'"
              },
              dims: {
                type: "array",
                description: "Which indices of the obsm object to take for a scatterplot, allowing for, for example, different PCs from obsm/X_pca",
                minItems: 2,
                maxItems: 2,
                items: { type: "number" }
              }
            }
          }
        }
      }
    }
  },
  annDataExpressionMatrix: {
    type: "object",
    description: "The properties of this object are the configuration for how to fetch the cell x genes matrix",
    additionalProperties: false,
    required: ["matrix"],
    properties: {
      matrix: {
        type: "string",
        description: "The location in the AnnData store of the cell x gene matrix, like 'obsm/hvg_subset.' or 'X'"
      },
      geneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the genes if using a subset of the data, like 'var.highly_variable.' if the matrix comes from 'obsm/hvg_subset.'"
      },
      matrixGeneFilter: {
        type: "string",
        description: "The location in the AnnData store of a filter for the matrix data (used in heatmap and histogram), like 'var.highly_variable.''"
      }
    }
  },
  requestInit: {
    type: "object",
    description: "The properties of this object correspond to the parameters of the JavaScript fetch() function.",
    additionalProperties: false,
    required: [],
    properties: {
      method: {
        type: "string"
      },
      headers: {
        type: "object"
      },
      body: {
        type: "string"
      },
      mode: {
        type: "string"
      },
      credentials: {
        type: "string"
      },
      cache: {
        type: "string"
      },
      redirect: {
        type: "string"
      },
      referrer: {
        type: "string"
      },
      integrity: {
        type: "string"
      }
    }
  },
  rasterLayer: {
    description: "The properties of this object are the rendering settings for the raster layer.",
    additionalProperties: false,
    required: ["channels", "colormap", "index", "opacity"],
    properties: {
      channels: {
        type: "array",
        items: {
          type: "object",
          additionalProperties: false,
          required: ["selection"],
          properties: {
            color: {
              type: "array",
              items: { type: "number" },
              description: "The color to use when rendering this channel under the null colormap."
            },
            selection: {
              type: "object",
              description: "Determines the channel selection, e.g. some Z and time slice."
            },
            slider: {
              type: "array",
              items: { type: "number" },
              description: "Determines the range for color mapping."
            },
            visible: {
              type: "boolean",
              description: "Determines whether this channel of the layer will be rendered in the spatial component."
            }
          }
        }
      },
      colormap: {
        oneOf: [
          {
            type: "string",
            description: "The name of the colormap to use for this layer."
          },
          {
            type: "null",
            description: "Use the solid color definitions."
          }
        ]
      },
      transparentColor: {
        oneOf: [
          {
            type: "array",
            minItems: 3,
            maxItems: 3,
            items: {
              type: "number",
              description: "One of R G or B (0 - 255)."
            },
            description: "Determines the color to be set to opacity 0"
          },
          {
            type: "null",
            description: "No selection."
          }
        ]
      },
      index: {
        type: "number",
        description: "The index of the layer among the array of layers available in the image file."
      },
      opacity: {
        type: "number"
      },
      modelMatrix: {
        oneOf: [
          {
            type: "array",
            minItems: 16,
            maxItems: 16,
            description: "transformation matrix for this layer"
          },
          {
            type: "null",
            description: "Use no transformation."
          }
        ]
      },
      domainType: {
        type: "string",
        enum: ["Full", "Min/Max"],
        description: "Determines the extent of the channel slider input element in the layer controller."
      },
      resolution: {
        type: "number",
        description: "Resolution of 3D volumetric rendering"
      },
      xSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      renderingMode: {
        type: "string",
        description: "Rendering mode of 3D volumetric rendering"
      },
      ySlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      zSlice: {
        oneOf: [
          {
            type: "array",
            minItems: 2,
            maxItems: 2,
            description: "Slice bounds"
          },
          {
            type: "null",
            description: "No slicing"
          }
        ]
      },
      type: {
        type: "string",
        enum: ["raster", "bitmask"]
      },
      use3d: {
        type: "boolean"
      },
      visible: {
        type: "boolean",
        description: "Determines whether this entire layer will be rendered in the spatial component."
      }
    }
  },
  moleculesLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the molecules layer.",
    additionalProperties: false,
    required: ["visible", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  cellsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the cells layer.",
    additionalProperties: false,
    required: ["visible", "stroked", "radius", "opacity"],
    properties: {
      visible: {
        type: "boolean"
      },
      stroked: {
        type: "boolean"
      },
      radius: {
        type: "number"
      },
      opacity: {
        type: "number"
      }
    }
  },
  neighborhoodsLayer: {
    type: "object",
    description: "The properties of this object are the rendering settings for the neighborhoods layer.",
    additionalProperties: false,
    required: ["visible"],
    properties: {
      visible: {
        type: "boolean"
      }
    }
  },
  spatialRasterLayers: {
    type: "array",
    description: "Array of Spatial Layers",
    items: {
      $ref: "#/definitions/rasterLayer"
    }
  }
};
var additionalProperties9 = false;
var required9 = ["version", "name", "datasets", "layout", "initStrategy"];
var properties9 = {
  name: { type: "string" },
  public: { type: "boolean" },
  description: { type: "string" },
  datasets: {
    type: "array",
    description: "The datasets array defines groups of files, where the files within each dataset reference the same entities (cells, genes, cell sets, etc).",
    items: {
      type: "object",
      additionalProperties: false,
      required: ["uid", "files"],
      properties: {
        uid: { type: "string" },
        name: { type: "string" },
        description: { type: "string" },
        files: {
          type: "array",
          items: {
            type: "object",
            additionalProperties: false,
            required: ["type", "fileType"],
            properties: {
              name: { type: "string" },
              type: { type: "string" },
              fileType: { type: "string" },
              url: { type: "string" },
              options: { oneOf: [{ $ref: "#/definitions/annDataCellSets" }, { $ref: "https://github.com/vitessce/vitessce/#raster" }, { $ref: "#/definitions/annDataCells" }, { $ref: "#/definitions/annDataExpressionMatrix" }] },
              requestInit: { $ref: "#/definitions/requestInit" }
            }
          }
        }
      }
    }
  },
  coordinationSpace: {
    type: "object",
    description: "The coordination space stores the values for each scope of each coordination object.",
    additionalProperties: false,
    required: [],
    properties: {
      dataset: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      embeddingTargetZ: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingType: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      embeddingCellSetPolygonsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelsVisible: {
        type: "object",
        patternProperties: {
          ".": { type: "boolean" }
        }
      },
      embeddingCellSetLabelSize: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      embeddingCellRadius: {
        type: "object",
        patternProperties: {
          ".": {
            type: "number",
            description: "The cell radius value, used when embeddingCellRadiusMode is absolute or relative."
          }
        }
      },
      embeddingCellOpacity: {
        type: "object",
        patternProperties: {
          ".": {
            type: "number",
            description: "The cell opacity value, used when embeddingCellOpacityMode is static."
          }
        }
      },
      embeddingCellRadiusMode: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["manual", "auto"],
            description: "Should data points representing cells be assigned a static (manual) or dynamic (auto, based on zoom level and data extent) radius?"
          }
        }
      },
      embeddingCellOpacityMode: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["manual", "auto"],
            description: "Should data points representing cells be assigned a static (manual) or dynamic (auto, based on zoom level and data extent) opacity?"
          }
        }
      },
      spatialZoom: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotation: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      spatialTargetX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialTargetZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationX: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationY: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationZ: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialRotationOrbit: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "number" }
            ]
          }
        }
      },
      spatialOrbitAxis: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, value will be automatically set. Only useful for 3D viewing."
              },
              { type: "string" }
            ]
          }
        }
      },
      spatialAxisFixed: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "Whether or not to have a fixed axis for the camera. Only useful for 3D viewing."
              },
              { type: "boolean" }
            ]
          }
        }
      },
      spatialRasterLayers: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/spatialRasterLayers" }
            ]
          }
        }
      },
      spatialCellsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/cellsLayer" }
            ]
          }
        }
      },
      spatialNeighborhoodsLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/neighborhoodsLayer" }
            ]
          }
        }
      },
      spatialMoleculesLayer: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto layer initialization is enabled, layers will be automatically initialized."
              },
              { $ref: "#/definitions/moleculesLayer" }
            ]
          }
        }
      },
      heatmapZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      heatmapTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      cellFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cells will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      cellHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided and auto cell set initialization is enabled, cell set selections will be automatically initialized."
              },
              { type: "array" }
            ]
          }
        }
      },
      cellSetHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell sets will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      cellSetColor: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, cell set colors will be automatically initialized."
              },
              {
                type: "array",
                items: {
                  type: "object",
                  additionalProperties: false,
                  required: ["path", "color"],
                  properties: {
                    path: {
                      type: "array",
                      items: { type: "string" }
                    },
                    color: {
                      type: "array",
                      items: { type: "number" }
                    }
                  }
                }
              }
            ]
          }
        }
      },
      cellColorEncoding: {
        type: "object",
        patternProperties: {
          ".": {
            type: "string",
            enum: ["geneSelection", "cellSetSelection"],
            description: "How should data points representing cells be colored?"
          }
        }
      },
      geneFilter: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be filtered out initially."
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no genes will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      },
      geneSelection: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "array", items: { type: "string" } }
            ]
          }
        }
      },
      geneExpressionTransform: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null"
              },
              { type: "string", pattern: "log1p" }
            ]
          }
        }
      },
      geneExpressionColormap: {
        type: "object",
        patternProperties: {
          ".": { type: "string" }
        }
      },
      geneExpressionColormapRange: {
        type: "object",
        patternProperties: {
          ".": { type: "array", items: { type: "number" } }
        }
      },
      genomicZoomX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicZoomY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetX: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      genomicTargetY: {
        type: "object",
        patternProperties: {
          ".": { type: "number" }
        }
      },
      additionalCellSets: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no cell will be highlighted initially."
              },
              {
                $ref: "https://github.com/vitessce/vitessce/#cell-sets"
              }
            ]
          }
        }
      },
      moleculeHighlight: {
        type: "object",
        patternProperties: {
          ".": {
            oneOf: [
              {
                type: "null",
                description: "If null is provided, no molecule will be highlighted initially."
              },
              { type: "string" }
            ]
          }
        }
      }
    }
  },
  layout: { $ref: "#/definitions/components" },
  initStrategy: {
    type: "string",
    enum: ["none", "auto"],
    description: "The initialization strategy determines how missing coordination objects and coordination scope mappings are initially filled in."
  },
  version: {
    type: "string",
    enum: ["1.0.5"],
    description: "The schema version for the view config."
  }
};
var config_1_0_5_schema_default = {
  $schema: $schema15,
  $id: $id15,
  title: title15,
  type: type15,
  definitions: definitions15,
  additionalProperties: additionalProperties9,
  required: required9,
  properties: properties9
};

// src/app/view-config-upgraders.js
import uuidv44 from "uuid/v4";
import cloneDeep from "lodash/cloneDeep";
function upgradeReplaceViewProp(prefix, view, coordinationSpace) {
  const prevZScopes = Object.keys(coordinationSpace[`${prefix}Zoom`]);
  const prevTXScopes = Object.keys(coordinationSpace[`${prefix}TargetX`]);
  const prevTYScopes = Object.keys(coordinationSpace[`${prefix}TargetY`]);
  const nextZScope = getNextScope(prevZScopes);
  const nextTXScope = getNextScope(prevTXScopes);
  const nextTYScope = getNextScope(prevTYScopes);
  const { zoom, target: [targetX, targetY] } = view;
  coordinationSpace[`${prefix}Zoom`][nextZScope] = zoom;
  coordinationSpace[`${prefix}TargetX`][nextTXScope] = targetX;
  coordinationSpace[`${prefix}TargetY`][nextTYScope] = targetY;
  return {
    [`${prefix}Zoom`]: nextZScope,
    [`${prefix}TargetX`]: nextTXScope,
    [`${prefix}TargetY`]: nextTYScope
  };
}
function upgradeFrom0_1_0(config, datasetUid = null) {
  const coordinationSpace = {
    embeddingType: {},
    embeddingZoom: {},
    embeddingTargetX: {},
    embeddingTargetY: {},
    spatialZoom: {},
    spatialTargetX: {},
    spatialTargetY: {}
  };
  const layout = [];
  config.staticLayout.forEach((componentDef) => {
    var _a2;
    let newComponentDef = __spreadProps(__spreadValues({}, componentDef), {
      coordinationScopes: {}
    });
    if (componentDef.component === "scatterplot") {
      if (componentDef.props.mapping) {
        coordinationSpace.embeddingType[componentDef.props.mapping] = componentDef.props.mapping;
        newComponentDef = __spreadProps(__spreadValues({}, newComponentDef), {
          coordinationScopes: __spreadProps(__spreadValues({}, newComponentDef.coordinationScopes), {
            embeddingType: componentDef.props.mapping
          })
        });
      }
      if (componentDef.props.view) {
        const newScopeValues = upgradeReplaceViewProp("embedding", componentDef.props.view, coordinationSpace);
        newComponentDef = __spreadProps(__spreadValues({}, newComponentDef), {
          coordinationScopes: __spreadValues(__spreadValues({}, newComponentDef.coordinationScopes), newScopeValues)
        });
      }
    }
    if (componentDef.component === "spatial") {
      if ((_a2 = componentDef == null ? void 0 : componentDef.props) == null ? void 0 : _a2.view) {
        const newScopeValues = upgradeReplaceViewProp("spatial", componentDef.props.view, coordinationSpace);
        newComponentDef = __spreadProps(__spreadValues({}, newComponentDef), {
          coordinationScopes: __spreadValues(__spreadValues({}, newComponentDef.coordinationScopes), newScopeValues)
        });
      }
    }
    layout.push(newComponentDef);
  });
  const newDatasetUid = datasetUid || uuidv44();
  return {
    version: "1.0.1",
    name: config.name,
    description: config.description,
    public: config.public,
    datasets: [
      {
        uid: newDatasetUid,
        name: newDatasetUid,
        files: config.layers.map((layer) => ({
          type: layer.type.toLowerCase(),
          fileType: layer.fileType,
          url: layer.url
        }))
      }
    ],
    initStrategy: "auto",
    coordinationSpace,
    layout
  };
}
function upgradeFrom1_0_0(config) {
  const coordinationSpace = __spreadValues({}, config.coordinationSpace);
  function replaceLayerType(layerType) {
    const isRaster = layerType === "raster";
    coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? "s" : ""}`] = {};
    Object.entries(coordinationSpace.spatialLayers).forEach(([scope, layers]) => {
      if (Array.isArray(layers) && layers.find((layer) => layer.type === layerType)) {
        const typedLayers = layers.filter((layer) => layer.type === layerType).map((layer) => {
          const newLayer = __spreadValues({}, layer);
          delete newLayer.type;
          return newLayer;
        });
        coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? "s" : ""}`][scope] = isRaster ? typedLayers : typedLayers[0];
      } else {
        coordinationSpace[`spatial${capitalize(layerType)}Layer${isRaster ? "s" : ""}`][scope] = null;
      }
    });
  }
  if (coordinationSpace.spatialLayers) {
    replaceLayerType("raster");
    replaceLayerType("cells");
    replaceLayerType("molecules");
    replaceLayerType("neighborhoods");
    delete coordinationSpace.spatialLayers;
  }
  const layout = config.layout.map((component) => {
    const newComponent = __spreadValues({}, component);
    function replaceCoordinationScope(layerType) {
      const isRaster = layerType === "raster";
      if (COMPONENT_COORDINATION_TYPES[newComponent.component].includes(`spatial${capitalize(layerType)}Layer${isRaster ? "s" : ""}`)) {
        newComponent.coordinationScopes[`spatial${capitalize(layerType)}Layer${isRaster ? "s" : ""}`] = newComponent.coordinationScopes.spatialLayers;
      }
    }
    if (newComponent.coordinationScopes && newComponent.coordinationScopes.spatialLayers) {
      replaceCoordinationScope("raster");
      replaceCoordinationScope("cells");
      replaceCoordinationScope("molecules");
      replaceCoordinationScope("neighborhoods");
      delete newComponent.coordinationScopes.spatialLayers;
    }
    return newComponent;
  });
  return __spreadProps(__spreadValues({}, config), {
    coordinationSpace,
    layout,
    version: "1.0.1"
  });
}
function upgradeFrom1_0_1(config) {
  var _a2;
  const layout = config.layout.map((component) => {
    const newComponent = __spreadValues({}, component);
    if (newComponent.component === "layerController") {
      newComponent.props = __spreadProps(__spreadValues({}, newComponent.props), {
        globalDisable3d: true
      });
    }
    return newComponent;
  });
  const newConfig = cloneDeep(config);
  Object.keys(((_a2 = newConfig == null ? void 0 : newConfig.coordinationSpace) == null ? void 0 : _a2.spatialRasterLayers) || {}).forEach((key) => {
    if (newConfig.coordinationSpace.spatialRasterLayers[key]) {
      newConfig.coordinationSpace.spatialRasterLayers[key].forEach((layer, index) => {
        newConfig.coordinationSpace.spatialRasterLayers[key][index].type = ["bitmask", "raster"].includes(layer.type) ? layer.type : "raster";
      });
    }
  });
  return __spreadProps(__spreadValues({}, newConfig), {
    layout,
    version: "1.0.2"
  });
}
function upgradeFrom1_0_2(config) {
  const layout = config.layout.map((component) => {
    const newComponent = __spreadValues({}, component);
    if (newComponent.component === "layerController") {
      newComponent.props = __spreadProps(__spreadValues({}, newComponent.props), {
        disableChannelsIfRgbDetected: true
      });
    }
    return newComponent;
  });
  const newConfig = cloneDeep(config);
  return __spreadProps(__spreadValues({}, newConfig), {
    layout,
    version: "1.0.3"
  });
}
function upgradeFrom1_0_3(config) {
  const newConfig = cloneDeep(config);
  return __spreadProps(__spreadValues({}, newConfig), {
    version: "1.0.4"
  });
}
function upgradeFrom1_0_4(config) {
  const newConfig = cloneDeep(config);
  return __spreadProps(__spreadValues({}, newConfig), {
    version: "1.0.5"
  });
}

// src/app/view-config-versions.js
var LATEST_VERSION = "1.0.5";
var SCHEMA_HANDLERS = {
  "0.1.0": [new Ajv3().compile(config_0_1_0_schema_default), upgradeFrom0_1_0],
  "1.0.0": [new Ajv3().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_0_schema_default), upgradeFrom1_0_0],
  "1.0.1": [new Ajv3().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_1_schema_default), upgradeFrom1_0_1],
  "1.0.2": [new Ajv3().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_2_schema_default), upgradeFrom1_0_2],
  "1.0.3": [new Ajv3().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_3_schema_default), upgradeFrom1_0_3],
  "1.0.4": [new Ajv3().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_4_schema_default), upgradeFrom1_0_4],
  "1.0.5": [new Ajv3().addSchema(cell_sets_schema_default).addSchema(raster_schema_default).compile(config_1_0_5_schema_default), null]
};

// src/app/CallbackPublisher.js
function validateViewConfig(viewConfig) {
  try {
    const validate = SCHEMA_HANDLERS[LATEST_VERSION][0];
    const valid = validate(viewConfig);
    if (!valid) {
      const failureReason = JSON.stringify(validate.errors, null, 2);
      throw new Error(`Config validation failed: ${failureReason}`);
    }
  } catch (e) {
    console.error(e);
  }
}
function CallbackPublisher(props) {
  const {
    onWarn,
    onConfigChange,
    onLoaderChange,
    validateOnConfigChange
  } = props;
  const warning = useWarning();
  const loaders = useLoaders();
  const viewConfigStoreApi = useViewConfigStoreApi();
  useEffect10(() => viewConfigStoreApi.subscribe((viewConfig) => {
    if (validateOnConfigChange && viewConfig) {
      validateViewConfig(viewConfig);
    }
    if (onConfigChange && viewConfig) {
      onConfigChange(viewConfig);
    }
  }, (state) => state.viewConfig), [onConfigChange, validateOnConfigChange, viewConfigStoreApi]);
  useEffect10(() => {
    if (onWarn && warning) {
      onWarn(warning);
    }
  }, [warning, onWarn]);
  useEffect10(() => {
    if (onLoaderChange && loaders) {
      onLoaderChange(loaders);
    }
  }, [loaders, onLoaderChange]);
  return null;
}

// src/components/description/DescriptionSubscriber.js
import React34, { useEffect as useEffect11, useMemo as useMemo8 } from "react";

// src/components/description/Description.js
import React33 from "react";
function Description(props) {
  const { description: description2, metadata } = props;
  return /* @__PURE__ */ React33.createElement("div", {
    className: "description"
  }, /* @__PURE__ */ React33.createElement("p", null, description2), metadata && Array.from(metadata.entries()).map(([layerIndex, { name: layerName, metadata: metadataRecord }]) => metadataRecord && Object.entries(metadataRecord).length > 0 ? /* @__PURE__ */ React33.createElement("details", {
    key: layerIndex
  }, /* @__PURE__ */ React33.createElement("summary", null, layerName), /* @__PURE__ */ React33.createElement("div", {
    className: "metadata-container"
  }, /* @__PURE__ */ React33.createElement("table", null, /* @__PURE__ */ React33.createElement("tbody", null, Object.entries(metadataRecord).map(([key, value]) => /* @__PURE__ */ React33.createElement("tr", {
    key
  }, /* @__PURE__ */ React33.createElement("th", {
    title: key
  }, key), /* @__PURE__ */ React33.createElement("td", {
    title: value
  }, value))))))) : null));
}

// src/components/description/DescriptionSubscriber.js
var DESCRIPTION_DATA_TYPES = ["raster"];
function DescriptionSubscriber(props) {
  const {
    coordinationScopes,
    description: descriptionOverride,
    removeGridComponent,
    theme,
    title: title16 = "Data Set"
  } = props;
  const loaders = useLoaders();
  const [{
    dataset,
    spatialRasterLayers: rasterLayers
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.description, coordinationScopes);
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(DESCRIPTION_DATA_TYPES);
  useEffect11(() => {
    resetReadyItems();
  }, [loaders, dataset]);
  const [description2] = useDescription(loaders, dataset);
  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(loaders, dataset, setItemIsReady, () => {
  }, false);
  const metadata = useMemo8(() => {
    const result = new Map();
    if (rasterLayers && rasterLayers.length > 0 && raster && imageLayerMeta && imageLayerLoaders) {
      rasterLayers.forEach((layer) => {
        if (imageLayerMeta[layer.index]) {
          const { format } = imageLayerLoaders[layer.index].metadata;
          result.set(`${layer.index}`, {
            name: raster.meta[layer.index].name,
            metadata: format && format()
          });
        }
      });
    }
    return result;
  }, [raster, rasterLayers, imageLayerMeta, imageLayerLoaders]);
  return /* @__PURE__ */ React34.createElement(TitleInfo, {
    title: title16,
    removeGridComponent,
    isScroll: true,
    theme,
    isReady
  }, /* @__PURE__ */ React34.createElement(Description, {
    description: descriptionOverride || description2,
    metadata
  }));
}

// src/components/status/StatusSubscriber.js
import React36 from "react";

// src/components/status/Status.js
import React35 from "react";
function Status(props) {
  const warnClass = "alert alert-warning my-0 details";
  const { info, warn: warn2 } = props;
  const messages = [];
  if (info) {
    messages.push(/* @__PURE__ */ React35.createElement("p", {
      className: "details",
      key: "info"
    }, info));
  }
  if (warn2) {
    messages.push(/* @__PURE__ */ React35.createElement("p", {
      className: warnClass,
      key: "warn"
    }, warn2));
  }
  return messages;
}

// src/components/status/StatusSubscriber.js
function StatusSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme,
    title: title16 = "Status"
  } = props;
  const [{
    cellHighlight,
    geneHighlight,
    moleculeHighlight
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.status, coordinationScopes);
  const warn2 = useWarning();
  const infos = [
    ...cellHighlight ? [`Hovered cell ${cellHighlight}`] : [],
    ...geneHighlight ? [`Hovered gene ${geneHighlight}`] : [],
    ...moleculeHighlight ? [`Hovered gene ${moleculeHighlight}`] : []
  ];
  const info = infos.join("; ");
  return /* @__PURE__ */ React36.createElement(TitleInfo, {
    title: title16,
    theme,
    removeGridComponent,
    isScroll: true,
    isReady: true
  }, /* @__PURE__ */ React36.createElement(Status, {
    warn: warn2,
    info
  }));
}

// src/components/genes/GenesSubscriber.js
import React39, { useEffect as useEffect14 } from "react";

// src/components/genes/Genes.js
import React38, { useEffect as useEffect13, useState as useState11 } from "react";

// src/components/selectable-table/SelectableTable.js
import React37, { useEffect as useEffect12, useCallback as useCallback10, useState as useState10 } from "react";
import { Table as Table2, AutoSizer } from "react-virtualized";
import uuidv45 from "uuid/v4";
import union from "lodash/union";
import difference from "lodash/difference";
import isEqual8 from "lodash/isEqual";
function SelectableTable(props) {
  const {
    hasColorEncoding,
    columns,
    data,
    onChange,
    idKey = "id",
    valueKey = "value",
    allowMultiple = false,
    allowUncheck = false,
    showTableHead = true,
    showTableInputs = false,
    testHeight = void 0,
    testWidth = void 0
  } = props;
  const [selectedRows, setSelectedRows] = useState10(null);
  const onSelectRow = useCallback10((value, checked) => {
    if (checked || allowUncheck) {
      if (!allowMultiple) {
        setSelectedRows(checked ? [value] : []);
      } else {
        setSelectedRows(checked ? union(selectedRows || [], [value]) : difference(selectedRows || [], [value]));
      }
    }
  }, [allowMultiple, allowUncheck, selectedRows]);
  const handleInputChange = useCallback10((event) => {
    const { target } = event;
    const { checked } = target;
    const { value } = target;
    onSelectRow(value, checked);
  }, [onSelectRow]);
  const getDataFromIds = useCallback10((ids) => ids.map((id) => ({
    [idKey]: id,
    data: data.find((item) => item[idKey] === id)
  })), [data, idKey]);
  const isSelected = useCallback10((id) => Array.isArray(selectedRows) && selectedRows.includes(id), [selectedRows]);
  useEffect12(() => {
    const initialSelectedRows = data.map((d) => {
      if (d[valueKey]) {
        return d[idKey];
      }
      return null;
    }).filter(Boolean);
    if (!isEqual8(initialSelectedRows, selectedRows)) {
      if (initialSelectedRows.length > 0) {
        setSelectedRows(initialSelectedRows);
      } else {
        setSelectedRows(null);
      }
    }
  }, [data, idKey, valueKey]);
  useEffect12(() => {
    if (!onChange || !selectedRows) {
      return;
    }
    const selectedRowData = getDataFromIds(selectedRows);
    if (allowMultiple) {
      onChange(selectedRowData);
    } else if (selectedRows.length === 1) {
      onChange(selectedRowData[0]);
    } else if (selectedRows.length === 0) {
      onChange(null);
    }
  }, [selectedRows]);
  const inputUuid = uuidv45();
  const hiddenInputsClass = showTableInputs ? "" : "hidden-input-column";
  const rowRenderer = ({ index, style }) => /* @__PURE__ */ React37.createElement("div", {
    key: data[index][idKey],
    className: `table-item table-row ${isSelected(data[index][idKey]) ? "row-checked " : ""}`,
    style,
    role: "button",
    onClick: () => onSelectRow(data[index][idKey], !isSelected(data[index][idKey]) || !hasColorEncoding)
  }, /* @__PURE__ */ React37.createElement("div", {
    className: `input-container ${hiddenInputsClass} table-cell`
  }, /* @__PURE__ */ React37.createElement("label", {
    htmlFor: `${inputUuid}_${data[index][idKey]}`
  }, /* @__PURE__ */ React37.createElement("input", {
    id: `${inputUuid}_${data[index][idKey]}`,
    type: "checkbox",
    className: allowMultiple ? "checkbox" : "radio",
    name: inputUuid,
    value: data[index][idKey],
    onChange: handleInputChange,
    checked: isSelected(data[index][idKey])
  }))), columns.map((column) => /* @__PURE__ */ React37.createElement("div", {
    className: "table-cell",
    key: column
  }, data[index][column])));
  const headerRowRenderer = ({ style }) => /* @__PURE__ */ React37.createElement("div", {
    className: `${hiddenInputsClass} table-row`,
    style
  }, columns.map((column) => /* @__PURE__ */ React37.createElement("div", {
    key: column
  }, column)));
  return /* @__PURE__ */ React37.createElement("div", {
    className: "selectable-table"
  }, /* @__PURE__ */ React37.createElement(AutoSizer, null, ({ width, height }) => /* @__PURE__ */ React37.createElement(Table2, {
    height: testHeight || height,
    gridStyle: { outline: "none" },
    rowCount: data.length,
    rowHeight: 24,
    headerHeight: showTableHead ? 24 : void 0,
    rowRenderer,
    width: testWidth || width,
    headerRowRenderer: showTableHead ? headerRowRenderer : void 0,
    rowGetter: ({ index }) => data[index]
  })));
}

// src/components/genes/Genes.js
function Genes(props) {
  const {
    hasColorEncoding,
    geneList = [],
    geneSelection = [],
    geneFilter = null,
    setGeneSelection
  } = props;
  const [searchTerm, setSearchTerm] = useState11("");
  const [searchResults, setSearchResults] = useState11(geneList);
  useEffect13(() => {
    const results = geneList.filter((gene) => gene.toLowerCase().includes(searchTerm.toLowerCase()));
    setSearchResults(results);
  }, [searchTerm, geneList]);
  function onChange(selection) {
    if (setGeneSelection && selection && selection.name) {
      setGeneSelection([selection.name]);
    }
  }
  const data = searchResults.filter((gene) => geneFilter ? geneFilter.includes(gene) : true).sort((a, b) => a.localeCompare(b)).map((gene) => ({ name: gene, value: geneSelection ? geneSelection.includes(gene) : false }));
  const handleChange = (event) => {
    setSearchTerm(event.target.value);
  };
  return /* @__PURE__ */ React38.createElement(React38.Fragment, null, /* @__PURE__ */ React38.createElement("input", {
    className: "search-bar",
    type: "text",
    placeholder: "Search",
    value: searchTerm,
    onChange: handleChange
  }), /* @__PURE__ */ React38.createElement(SelectableTable, {
    columns: ["name"],
    data,
    hasColorEncoding,
    idKey: "name",
    valueKey: "value",
    onChange,
    allowUncheck: false,
    showTableHead: false
  }));
}

// src/components/genes/GenesSubscriber.js
var GENES_DATA_TYPES = ["expression-matrix"];
function GenesSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    variablesLabelOverride: variablesLabel = "gene",
    variablesPluralLabelOverride: variablesPluralLabel = `${variablesLabel}s`,
    theme,
    title: title16 = "Expression Levels"
  } = props;
  const loaders = useLoaders();
  const [{
    dataset,
    geneSelection,
    geneFilter,
    cellColorEncoding
  }, {
    setGeneSelection,
    setGeneFilter,
    setGeneHighlight,
    setCellColorEncoding
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.genes, coordinationScopes);
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(GENES_DATA_TYPES);
  useEffect14(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [attrs] = useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, true);
  const geneList = attrs ? attrs.cols : [];
  const numGenes = geneList.length;
  function setGeneSelectionAndColorEncoding(newSelection) {
    setGeneSelection(newSelection);
    setCellColorEncoding("geneSelection");
  }
  return /* @__PURE__ */ React39.createElement(TitleInfo, {
    title: title16,
    info: `${numGenes} ${pluralize(variablesLabel, variablesPluralLabel, numGenes)}`,
    theme,
    isScroll: true,
    removeGridComponent,
    isReady,
    urls
  }, /* @__PURE__ */ React39.createElement(Genes, {
    hasColorEncoding: cellColorEncoding === "geneSelection",
    geneList,
    geneSelection,
    geneFilter,
    setGeneSelection: setGeneSelectionAndColorEncoding,
    setGeneFilter,
    setGeneHighlight
  }));
}

// src/components/sets/CellSetsManagerSubscriber.js
import React51, {
  useEffect as useEffect16,
  useState as useState15,
  useMemo as useMemo10
} from "react";
import isEqual11 from "lodash/isEqual";

// package.json
var name = "vitessce";
var version = "1.1.17";
var description = "Vitessce app and React component library";
var author = "C McCallum";
var homepage = "http://vitessce.io/";
var license = "MIT";
var repository = "https://github.com/vitessce/vitessce/";
var keywords = [
  "react-component"
];
var files = [
  "dist",
  "src"
];
var main = "dist/umd/production/index.min.js";
var module = "dist/esm/index.js";
var peerDependencies = {
  react: "^16.8.6",
  "react-dom": "^16.8.6"
};
var dependencies = {
  "@hms-dbmi/viv": "^0.11.0",
  "@loaders.gl/3d-tiles": "^3.0.0",
  "@loaders.gl/core": "^3.0.0",
  "@loaders.gl/images": "^3.0.0",
  "@loaders.gl/loader-utils": "^3.0.0",
  "@luma.gl/core": "~8.5.7",
  "@material-ui/core": "^4.8.3",
  "@material-ui/icons": "^4.9.1",
  "@turf/area": "^6.5.0",
  "@turf/boolean-contains": "^6.0.1",
  "@turf/boolean-overlap": "^6.0.1",
  "@turf/boolean-point-in-polygon": "^6.0.1",
  "@turf/boolean-within": "^6.0.1",
  "@turf/centroid": "^6.0.2",
  "@turf/helpers": "^6.1.4",
  ajv: "^6.10.0",
  bowser: "^2.11.0",
  classnames: "^2.2.6",
  clsx: "^1.1.1",
  concaveman: "^1.2.0",
  "d3-array": "^2.4.0",
  "d3-dsv": "^1.1.1",
  "d3-force": "^2.1.1",
  "d3-quadtree": "^1.0.7",
  "d3-scale-chromatic": "^1.3.3",
  "deck.gl": "~8.5.8",
  "dynamic-import-polyfill": "^0.1.1",
  "fast-deep-equal": "^3.1.3",
  glslify: "^7.0.0",
  higlass: "1.11.4",
  "higlass-register": "^0.3.0",
  "higlass-zarr-datafetchers": "^0.2.1",
  internmap: "^2.0.3",
  json2csv: "^4.5.2",
  lodash: "^4.17.15",
  "lz-string": "^1.4.4",
  "math.gl": "^3.1.3",
  mathjs: "^9.2.0",
  "nebula.gl": "^0.23.8",
  "prop-types": "^15.7.2",
  "rc-tooltip": "^4.0.3",
  "rc-tree": "2.1.0",
  "react-color": "^2.18.0",
  "react-grid-layout": "^1.1.1",
  "react-vega": "^7.3.0",
  "react-virtualized": "^9.22.2",
  "short-number": "^1.0.6",
  store: "^2.0.12",
  tinycolor2: "^1.4.1",
  tinyqueue: "^2.0.3",
  uuid: "^3.3.2",
  vega: "^5.13.0",
  "vega-lite": "^4.13.0",
  "vega-tooltip": "^0.23.0",
  "whatwg-fetch": "^3.0.0",
  "window-pixi": "5.3.3",
  zarr: "^0.4.0",
  zustand: "^3.5.10"
};
var devDependencies = {
  "@babel/core": "7.9.0",
  "@babel/plugin-proposal-class-properties": "^7.14.5",
  "@svgr/webpack": "5.3.1",
  "@typescript-eslint/eslint-plugin": "^2.10.0",
  "@typescript-eslint/parser": "^2.10.0",
  "babel-eslint": "10.0.3",
  "babel-loader": "8.1.0",
  "babel-plugin-glsl": "^1.0.0",
  "babel-plugin-named-asset-import": "^0.3.6",
  "babel-preset-react-app": "^9.1.2",
  camelcase: "^5.3.1",
  "case-sensitive-paths-webpack-plugin": "2.3.0",
  concurrently: "^5.3.0",
  "css-loader": "3.4.2",
  cypress: "^3.6.1",
  "cypress-fail-on-console-error": "^2.0.6",
  dotenv: "8.2.0",
  "dotenv-expand": "5.1.0",
  enzyme: "^3.9.0",
  "enzyme-adapter-react-16": "^1.11.2",
  esbuild: "^0.12.28",
  "esbuild-plugin-babel": "^0.2.3",
  "esbuild-plugin-sass": "^0.6.0",
  eslint: "^6.6.0",
  "eslint-config-airbnb": "^17.1.0",
  "eslint-config-react-app": "^5.2.0",
  "eslint-loader": "3.0.3",
  "eslint-plugin-cypress": "^2.2.1",
  "eslint-plugin-flowtype": "4.6.0",
  "eslint-plugin-import": "2.20.0",
  "eslint-plugin-jsx-a11y": "6.2.3",
  "eslint-plugin-react": "7.18.0",
  "eslint-plugin-react-hooks": "^1.6.1",
  "eslint-plugin-vitessce-rules": "file:eslint",
  expect: "^24.5.0",
  "file-loader": "4.3.0",
  "fs-extra": "^8.1.0",
  "glsl-colormap": "^1.0.1",
  "html-webpack-plugin": "4.0.0-beta.11",
  "http-server": "^0.12.3",
  "identity-obj-proxy": "3.0.0",
  "js-yaml": "^3.13.1",
  karma: "4.4.1",
  "karma-chrome-launcher": "3.1.0",
  "karma-mocha": "1.3.0",
  "karma-mocha-reporter": "2.2.5",
  "karma-sourcemap-loader": "0.3.7",
  "karma-webpack": "4.0.2",
  "mini-css-extract-plugin": "0.9.0",
  mocha: "7.1.0",
  "node-sass": "^6.0.0",
  "object.fromentries": "^2.0.2",
  "optimize-css-assets-webpack-plugin": "5.0.3",
  "pnp-webpack-plugin": "1.6.0",
  "postcss-flexbugs-fixes": "4.1.0",
  "postcss-loader": "3.0.0",
  "postcss-normalize": "8.0.1",
  "postcss-preset-env": "6.7.0",
  "postcss-safe-parser": "4.0.1",
  react: "^16.8.6",
  "react-app-polyfill": "^1.0.6",
  "react-dev-utils": "^10.2.0",
  "react-dom": "^16.8.6",
  resolve: "1.15.0",
  "resolve-url-loader": "3.1.1",
  "sass-loader": "^10.0.1",
  semver: "6.3.0",
  "style-loader": "0.23.1",
  "terser-webpack-plugin": "2.3.4",
  "url-loader": "2.3.0",
  "wait-on": "^3.2.0",
  webpack: "4.41.5",
  "webpack-dev-server": "3.10.2",
  "webpack-node-externals": "^2.5.2",
  "workbox-webpack-plugin": "4.3.1",
  "worker-loader": "^2.0.0"
};
var resolutions = {
  "@turf/difference": "6.0.1"
};
var scripts = {
  "build-demo:prod": "node scripts/build-demo.js production",
  "build-lib:prod": "NODE_ENV=production node scripts/build-esm.mjs && node scripts/build-lib.js production",
  "build-demo:dev": "node scripts/build-demo.js development",
  "build-lib:dev": "NODE_ENV=development node scripts/build-esm.mjs && node scripts/build-lib.js development",
  "build:prod": "npm run build-demo:prod && npm run build-lib:prod",
  "build:dev": "npm run build-demo:dev && npm run build-lib:dev",
  prepublishOnly: "npm run build-lib:prod",
  clean: "rm -r dist-demo dist",
  start: "node scripts/start-demo.js",
  "start:fixtures": 'http-server src/loaders/fixtures/ --cors="*" -s',
  "start:fixtures-concurrently": 'concurrently --kill-others "npm run start:fixtures"',
  test: 'npm run start:fixtures-concurrently -- --success first "karma start scripts/karma.config.js --single-run"',
  "test:watch": 'npm run start:fixtures-concurrently -- "karma start scripts/karma.config.js --auto-watch"',
  "cypress:open": 'npm run start:fixtures-concurrently -- "cypress open"',
  "cypress:run": 'npm run start:fixtures-concurrently -- --success first --kill-others "cypress run"',
  "lint-fix": "eslint -c .eslintrc.yml --ext .js --fix src/"
};
var browserslist = {
  production: [
    ">0.2%",
    "not dead",
    "not op_mini all"
  ],
  development: [
    "last 1 chrome version",
    "last 1 firefox version",
    "last 1 safari version"
  ]
};
var babel = {
  presets: [
    "react-app"
  ],
  plugins: [
    "glsl"
  ]
};
var package_default = {
  name,
  version,
  description,
  author,
  homepage,
  license,
  repository,
  keywords,
  files,
  main,
  module,
  peerDependencies,
  dependencies,
  devDependencies,
  resolutions,
  scripts,
  browserslist,
  babel
};

// src/components/sets/SetsManager.js
import React50, { useState as useState14, useMemo as useMemo9 } from "react";
import isEqual10 from "lodash/isEqual";

// src/components/sets/Tree.js
import React40 from "react";
import RcTree from "rc-tree";
import classNames from "classnames";
var Tree = React40.forwardRef((props, ref) => {
  const {
    prefixCls,
    className,
    showIcon,
    blockNode,
    children,
    checkable
  } = props;
  return /* @__PURE__ */ React40.createElement(RcTree, __spreadProps(__spreadValues({
    itemHeight: 32,
    ref
  }, props), {
    className: classNames(className, {
      [`${prefixCls}-icon-hide`]: !showIcon,
      [`${prefixCls}-block-node`]: blockNode
    }),
    checkable: checkable ? /* @__PURE__ */ React40.createElement("span", {
      className: `${prefixCls}-checkbox-inner`
    }) : checkable
  }), children);
});
Tree.defaultProps = {
  virtual: false,
  checkable: false,
  showIcon: false,
  blockNode: true,
  prefixCls: "rc-tree"
};
var Tree_default = Tree;

// src/components/sets/TreeNode.js
import React45, { useState as useState13 } from "react";
import clsx from "clsx";
import { TreeNode as RcTreeNode } from "rc-tree";
import { getDataAndAria } from "rc-tree/es/util";
import classNames2 from "classnames";
import range8 from "lodash/range";
import isEqual9 from "lodash/isEqual";

// src/components/sets/PopoverMenu.js
import React43, { useState as useState12, useEffect as useEffect15 } from "react";
import { TwitterPicker } from "react-color";

// src/components/sets/Popover.js
import React42 from "react";

// src/components/sets/HelpTooltip.js
import React41, { useRef as useRef7 } from "react";
import RcTooltip from "rc-tooltip";
function HelpTooltip(props) {
  const { title: title16, content, overlayClassName } = props;
  const spanRef = useRef7();
  const getTooltipContainer = useVitessceContainer(spanRef);
  const overlay = title16 || content;
  return /* @__PURE__ */ React41.createElement(React41.Fragment, null, /* @__PURE__ */ React41.createElement("span", {
    ref: spanRef
  }), /* @__PURE__ */ React41.createElement(RcTooltip, __spreadValues({
    getTooltipContainer,
    overlayClassName,
    overlay
  }, props)));
}
HelpTooltip.defaultProps = {
  overlayClassName: "help-tooltip",
  placement: "top",
  trigger: "hover",
  mouseEnterDelay: 0.2,
  mouseLeaveDelay: 0
};

// src/components/sets/Popover.js
function Popover(props) {
  return /* @__PURE__ */ React42.createElement(HelpTooltip, __spreadValues({}, props));
}
Popover.defaultProps = {
  overlayClassName: "popover",
  placement: "top",
  trigger: "click",
  mouseEnterDelay: 0,
  mouseLeaveDelay: 0
};

// src/components/sets/PopoverMenu.js
function PopoverMenuListButton(props) {
  const {
    title: title16,
    subtitle,
    onClick,
    handler,
    handlerKey,
    confirm,
    visible
  } = props;
  const [isConfirming, setIsConfirming] = useState12(false);
  useEffect15(() => {
    setIsConfirming(false);
  }, [visible]);
  function handleOrRequireConfirm() {
    if (!confirm || isConfirming) {
      onClick();
      handler();
    } else {
      setIsConfirming(true);
    }
  }
  const titleWithConfirm = `${isConfirming ? "Confirm " : ""}${title16}`;
  return /* @__PURE__ */ React43.createElement("button", {
    title: titleWithConfirm,
    type: "button",
    onClick: handleOrRequireConfirm,
    onKeyPress: (e) => callbackOnKeyPress(e, handlerKey, handleOrRequireConfirm)
  }, titleWithConfirm, subtitle && /* @__PURE__ */ React43.createElement(React43.Fragment, null, /* @__PURE__ */ React43.createElement("br", null), /* @__PURE__ */ React43.createElement("span", {
    className: "small"
  }, subtitle)));
}
function PopoverMenuList(props) {
  const {
    menuConfig,
    onClick,
    color = null,
    palette = null,
    setColor = null,
    visible
  } = props;
  function handleColorChange({ rgb }) {
    if (rgb && setColor) {
      setColor([rgb.r, rgb.g, rgb.b]);
    }
  }
  const defaultPalette = palette ? palette.map(colorArrayToString) : PALETTE.concat([[255, 255, 255], [128, 128, 128], [0, 0, 0]]).map(colorArrayToString);
  return /* @__PURE__ */ React43.createElement("div", null, color && setColor && defaultPalette && /* @__PURE__ */ React43.createElement(TwitterPicker, {
    className: "popover-menu-color",
    disableAlpha: true,
    width: 108,
    triangle: "hide",
    colors: defaultPalette,
    color: colorArrayToString(color),
    onChangeComplete: handleColorChange
  }), /* @__PURE__ */ React43.createElement("ul", {
    className: "popover-menu-list"
  }, menuConfig.map((item) => /* @__PURE__ */ React43.createElement("li", {
    key: item.title + item.subtitle
  }, /* @__PURE__ */ React43.createElement(PopoverMenuListButton, __spreadProps(__spreadValues({}, item), {
    onClick,
    visible
  }))))));
}
function PopoverMenu(props) {
  const {
    menuConfig,
    placement,
    children,
    color = null,
    setColor = null,
    palette = null
  } = props;
  const [visible, setVisible] = useState12(false);
  return /* @__PURE__ */ React43.createElement(Popover, {
    content: /* @__PURE__ */ React43.createElement(PopoverMenuList, {
      menuConfig,
      onClick: () => setVisible(false),
      color,
      setColor,
      palette,
      visible
    }),
    placement,
    visible,
    onVisibleChange: setVisible
  }, children);
}

// src/assets/menu.svg
import {
  createElement as createElement4
} from "react";
function SvgMenu(props) {
  return /* @__PURE__ */ createElement4("svg", __spreadValues({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24"
  }, props), /* @__PURE__ */ createElement4("path", {
    d: "M12 18c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3zm0-9c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3zm0-9c1.657 0 3 1.343 3 3s-1.343 3-3 3-3-1.343-3-3 1.343-3 3-3z"
  }));
}
var ReactComponent4 = SvgMenu;

// src/components/sets/TreeNode.js
function makeNodeViewMenuConfig(props) {
  const {
    path,
    level,
    height,
    onCheckNode,
    onNodeRemove,
    onNodeSetIsEditing,
    onExportLevelZeroNodeJSON,
    onExportLevelZeroNodeTabular,
    onExportSetJSON,
    checkable,
    editable,
    exportable,
    checked
  } = props;
  return [
    ...editable ? [
      {
        title: "Rename",
        handler: () => {
          onNodeSetIsEditing(path, true);
        },
        handlerKey: "r"
      },
      {
        title: "Delete",
        confirm: true,
        handler: () => {
          onNodeRemove(path);
        },
        handlerKey: "d"
      }
    ] : [],
    ...level === 0 && exportable ? [
      {
        title: "Export hierarchy",
        subtitle: "(to JSON file)",
        handler: () => {
          onExportLevelZeroNodeJSON(path);
        },
        handlerKey: "j"
      },
      ...height <= 1 ? [
        {
          title: "Export hierarchy",
          subtitle: "(to CSV file)",
          handler: () => {
            onExportLevelZeroNodeTabular(path);
          },
          handlerKey: "t"
        }
      ] : []
    ] : [],
    ...level > 0 ? [
      ...checkable ? [
        {
          title: checked ? "Uncheck" : "Check",
          handler: () => {
            onCheckNode(path, !checked);
          },
          handlerKey: "s"
        }
      ] : [],
      ...exportable ? [
        {
          title: "Export set",
          subtitle: "(to JSON file)",
          handler: () => {
            onExportSetJSON(path);
          },
          handlerKey: "e"
        }
      ] : []
    ] : []
  ];
}
function NamedSetNodeStatic(props) {
  const {
    title: title16,
    path,
    nodeKey,
    level,
    height,
    color,
    checkbox,
    isChecking,
    isLeaf,
    onNodeSetColor,
    onNodeView,
    expanded,
    onCheckLevel,
    checkedLevelPath,
    checkedLevelIndex,
    disableTooltip,
    size,
    datatype,
    editable,
    theme
  } = props;
  const shouldCheckNextLevel = level === 0 && !expanded;
  const nextLevelToCheck = checkedLevelIndex && isEqual9(path, checkedLevelPath) && checkedLevelIndex < height ? checkedLevelIndex + 1 : 1;
  const numberFormatter = new Intl.NumberFormat("en-US");
  const niceSize = numberFormatter.format(size);
  let tooltipText;
  if (shouldCheckNextLevel) {
    tooltipText = getLevelTooltipText(nextLevelToCheck);
  } else if (isLeaf || !expanded) {
    tooltipText = `Color individual set (${niceSize} ${datatype}${size === 1 ? "" : "s"})`;
  } else {
    tooltipText = "Color by expanded descendants";
  }
  const onClick = level === 0 && !expanded ? () => onCheckLevel(nodeKey, nextLevelToCheck) : () => onNodeView(path);
  const tooltipProps = disableTooltip ? { visible: false } : {};
  const popoverMenuConfig = makeNodeViewMenuConfig(props);
  return /* @__PURE__ */ React45.createElement("span", null, /* @__PURE__ */ React45.createElement(HelpTooltip, __spreadValues({
    title: tooltipText
  }, tooltipProps), /* @__PURE__ */ React45.createElement("button", {
    type: "button",
    onClick,
    onKeyPress: (e) => callbackOnKeyPress(e, "v", () => onNodeView(path)),
    className: "title-button"
  }, title16)), popoverMenuConfig.length > 0 ? /* @__PURE__ */ React45.createElement(PopoverMenu, {
    menuConfig: makeNodeViewMenuConfig(props),
    color: level > 0 && editable ? color || getDefaultColor(theme) : null,
    setColor: (c) => onNodeSetColor(path, c)
  }, /* @__PURE__ */ React45.createElement(ReactComponent4, {
    className: "node-menu-icon"
  })) : null, level > 0 && isChecking ? checkbox : null, level > 0 && /* @__PURE__ */ React45.createElement("span", {
    className: "node-size-label"
  }, niceSize));
}
function NamedSetNodeEditing(props) {
  const {
    title: title16,
    path,
    onNodeSetName,
    onNodeCheckNewName
  } = props;
  const [currentTitle, setCurrentTitle] = useState13(title16);
  const hasConflicts = onNodeCheckNewName(path, currentTitle);
  function trySetName() {
    if (!hasConflicts) {
      onNodeSetName(path, currentTitle, true);
    }
  }
  return /* @__PURE__ */ React45.createElement("span", {
    className: "title-button-with-input"
  }, /* @__PURE__ */ React45.createElement("input", {
    autoFocus: true,
    className: "title-input",
    type: "text",
    value: currentTitle,
    onChange: (e) => {
      setCurrentTitle(e.target.value);
    },
    onKeyPress: (e) => callbackOnKeyPress(e, "Enter", trySetName),
    onFocus: (e) => e.target.select()
  }), !hasConflicts && /* @__PURE__ */ React45.createElement("button", {
    type: "button",
    className: "title-save-button",
    onClick: trySetName
  }, "Save"));
}
function NamedSetNode(props) {
  const {
    isEditing,
    isCurrentSet
  } = props;
  return isEditing || isCurrentSet ? /* @__PURE__ */ React45.createElement(NamedSetNodeEditing, __spreadValues({}, props)) : /* @__PURE__ */ React45.createElement(NamedSetNodeStatic, __spreadValues({}, props));
}
function LevelsButtons(props) {
  const {
    nodeKey,
    path,
    height,
    onCheckLevel,
    checkedLevelPath,
    checkedLevelIndex,
    hasColorEncoding
  } = props;
  function onCheck(event) {
    if (event.target.checked) {
      const newLevel = parseInt(event.target.value, 10);
      onCheckLevel(nodeKey, newLevel);
    }
  }
  return /* @__PURE__ */ React45.createElement("div", {
    className: "level-buttons-container"
  }, range8(1, height + 1).map((i) => {
    const isChecked = isEqual9(path, checkedLevelPath) && i === checkedLevelIndex;
    return /* @__PURE__ */ React45.createElement("div", {
      className: "level-buttons",
      key: i
    }, /* @__PURE__ */ React45.createElement(HelpTooltip, {
      title: getLevelTooltipText(i)
    }, /* @__PURE__ */ React45.createElement("input", {
      className: clsx("level-radio-button", { checked: isChecked && !hasColorEncoding }),
      type: "checkbox",
      value: i,
      checked: isChecked && hasColorEncoding,
      onChange: onCheck
    })));
  }));
}
function SwitcherIcon(props) {
  const {
    isLeaf,
    isOpen,
    color
  } = props;
  const hexColor = color ? colorArrayToString(color) : void 0;
  if (isLeaf) {
    return /* @__PURE__ */ React45.createElement("i", {
      className: "anticon anticon-circle rc-tree-switcher-icon"
    }, /* @__PURE__ */ React45.createElement("svg", {
      viewBox: "0 0 1024 1024",
      focusable: "false",
      "data-icon": "caret-down",
      width: "1em",
      height: "1em",
      "aria-hidden": "true"
    }, /* @__PURE__ */ React45.createElement("rect", {
      fill: hexColor,
      x: 600 / 2,
      y: 600 / 2,
      width: 1024 - 600,
      height: 1024 - 600
    })));
  }
  return /* @__PURE__ */ React45.createElement("i", {
    className: "anticon anticon-caret-down rc-tree-switcher-icon"
  }, /* @__PURE__ */ React45.createElement("svg", {
    viewBox: "0 0 1024 1024",
    focusable: "false",
    "data-icon": "caret-down",
    width: "1em",
    height: "1em",
    "aria-hidden": "true"
  }, /* @__PURE__ */ React45.createElement("path", {
    fill: isOpen ? "#444" : hexColor,
    d: "M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z"
  })));
}
var TreeNode = class extends RcTreeNode {
  constructor() {
    super(...arguments);
    __publicField(this, "renderSelector", () => {
      const {
        title: title16,
        isCurrentSet,
        isSelected,
        isEditing,
        onDragStart: onDragStartProp
      } = this.props;
      const {
        rcTree: {
          prefixCls: prefixClass,
          draggable
        }
      } = this.context;
      const onDragStart = (e) => {
        onDragStartProp();
        this.onDragStart(e);
      };
      const wrapClass = `${prefixClass}-node-content-wrapper`;
      const isDraggable = !isCurrentSet && !isEditing && draggable;
      return /* @__PURE__ */ React45.createElement("span", {
        ref: this.setSelectHandle,
        title: title16,
        className: classNames2(wrapClass, `${wrapClass}-${this.getNodeState() || "normal"}`, isSelected && `${prefixClass}-node-selected`, isDraggable && "draggable"),
        draggable: isDraggable,
        "aria-grabbed": isDraggable,
        onDragStart: isDraggable ? onDragStart : void 0
      }, /* @__PURE__ */ React45.createElement(NamedSetNode, __spreadProps(__spreadValues({}, this.props), {
        prefixClass,
        checkbox: this.renderCheckbox()
      })), this.renderLevels());
    });
    __publicField(this, "renderLevels", () => {
      const { level, expanded } = this.props;
      if (level !== 0 || expanded) {
        return null;
      }
      return /* @__PURE__ */ React45.createElement(LevelsButtons, __spreadValues({}, this.props));
    });
    __publicField(this, "renderSwitcher", () => {
      const { expanded, isLeaf, color } = this.props;
      const {
        rcTree: {
          prefixCls: prefixClass,
          onNodeExpand
        }
      } = this.context;
      const onNodeExpandWrapper = (e) => {
        if (!isLeaf) {
          onNodeExpand(e, this);
        }
      };
      const switcherClass = classNames2(`${prefixClass}-switcher`, { [`${prefixClass}-switcher_${expanded ? "open" : "close"}`]: !isLeaf });
      return /* @__PURE__ */ React45.createElement("span", {
        className: switcherClass,
        onClick: onNodeExpandWrapper,
        onKeyPress: (e) => callbackOnKeyPress(e, "d", onNodeExpandWrapper),
        role: "button",
        tabIndex: "0"
      }, /* @__PURE__ */ React45.createElement(SwitcherIcon, {
        isLeaf,
        isOpen: expanded,
        color
      }));
    });
  }
  render() {
    const _a2 = this.props, {
      style,
      loading,
      level,
      dragOver,
      dragOverGapTop,
      dragOverGapBottom,
      isLeaf,
      expanded,
      selected,
      checked,
      halfChecked,
      onDragEnd: onDragEndProp,
      expandable
    } = _a2, otherProps = __objRest(_a2, [
      "style",
      "loading",
      "level",
      "dragOver",
      "dragOverGapTop",
      "dragOverGapBottom",
      "isLeaf",
      "expanded",
      "selected",
      "checked",
      "halfChecked",
      "onDragEnd",
      "expandable"
    ]);
    const {
      rcTree: {
        prefixCls: prefixClass,
        filterTreeNode,
        draggable
      }
    } = this.context;
    const disabled = this.isDisabled();
    const dataAndAriaAttributeProps = getDataAndAria(otherProps);
    const onDragEnd = (e) => {
      onDragEndProp();
      this.onDragEnd(e);
    };
    return /* @__PURE__ */ React45.createElement("li", __spreadValues({
      className: classNames2("rc-tree-treenode", `level-${level}-treenode`, {
        [`${prefixClass}-treenode-disabled`]: disabled,
        [`${prefixClass}-treenode-switcher-${expanded ? "open" : "close"}`]: !isLeaf,
        [`${prefixClass}-treenode-checkbox-checked`]: checked,
        [`${prefixClass}-treenode-checkbox-indeterminate`]: halfChecked,
        [`${prefixClass}-treenode-selected`]: selected,
        [`${prefixClass}-treenode-loading`]: loading,
        "drag-over": !disabled && dragOver,
        "drag-over-gap-top": !disabled && dragOverGapTop,
        "drag-over-gap-bottom": !disabled && dragOverGapBottom,
        "filter-node": filterTreeNode && filterTreeNode(this)
      }),
      style,
      role: "treeitem",
      onDragEnter: draggable ? this.onDragEnter : void 0,
      onDragOver: draggable ? this.onDragOver : void 0,
      onDragLeave: draggable ? this.onDragLeave : void 0,
      onDrop: draggable ? this.onDrop.bind(this) : void 0,
      onDragEnd: draggable ? onDragEnd : void 0
    }, dataAndAriaAttributeProps), expandable ? this.renderSwitcher() : null, this.renderSelector(), this.renderChildren());
  }
};

// src/components/sets/SetsManagerButtons.js
import React49, { useCallback as useCallback11 } from "react";

// src/assets/sets/union.svg
import {
  createElement as createElement5
} from "react";
function SvgUnion(props) {
  return /* @__PURE__ */ createElement5("svg", __spreadValues({
    viewBox: "0 0 16.433999 10.234",
    height: 12,
    width: 18
  }, props), /* @__PURE__ */ createElement5("g", {
    transform: "translate(0.117,-2.883)"
  }, /* @__PURE__ */ createElement5("path", {
    d: "m 11.467471,11.811278 c 0.198237,-0.322177 0.508,-1.011333 0.653661,-1.454255 0.659343,-2.0049141 0.44323,-4.2620847 -0.577734,-6.0340822 l -0.168844,-0.2930481 0.105744,0.017887 c 0.759902,0.1285441 1.368762,0.3699553 1.856675,0.7361658 1.988296,1.4923476 2.192477,4.3353549 0.434717,6.0529895 -0.641216,0.626581 -1.299647,0.94683 -2.294136,1.115833 l -0.108488,0.01844 z M 4.3162122,11.919169 C 1.9278944,11.487872 0.46692382,9.0323123 1.234873,6.7401372 1.5621727,5.763213 2.2610593,4.9489746 3.1840041,4.4693005 3.5978035,4.2542401 3.9427842,4.145371 4.5197023,4.0477802 L 4.6254464,4.0298927 4.4571836,4.3223069 C 3.4332707,6.1017061 3.2180432,8.3476022 3.878868,10.357023 c 0.1458466,0.443487 0.4554716,1.132155 0.6542959,1.455285 0.054471,0.08853 0.087814,0.159599 0.074096,0.157937 -0.013718,-0.0017 -0.1446898,-0.02465 -0.2910477,-0.05108 z M 5.0000001,3 C 2.2,3 0,5.2 0,8 c 0,2.8 2.2,5 5.0000001,5 0.6,0 1.1,-0.1 1.6,-0.3 C 5.3000001,11.6 4.5,9.7999998 4.5,8 4.5,6.2 5.3000001,4.5 6.6000001,3.3 c -0.5,-0.2 -1,-0.3 -1.6,-0.3 z M 4.65,4.02 C 3.92,5.17 3.51,6.54 3.51,8 c 0,1.4599998 0.42,2.83 1.14,3.98 C 2.61,11.8 1.01,10.08 1.01,8 1.01,5.92 2.61,4.2 4.65,4.02 Z M 8,4 C 6.8,4.9 6,6.4 6,8 6,9.6 6.8,11.1 8,12 9.2,11.1 10,9.7 10,8 10,6.3 9.2,4.9 8,4 Z m 3,-1 c 2.8,0 5,2.2 5,5 0,2.8 -2.2,5 -5,5 C 10.4,13 9.9,12.9 9.4,12.7 10.7,11.6 11.5,9.8 11.5,8 11.5,6.2 10.7,4.5 9.4,3.3 9.9,3.1 10.4,3 11,3 Z m 0.35,1.02 c 0.73,1.15 1.14,2.52 1.14,3.98 0,1.46 -0.42,2.83 -1.14,3.98 2.04,-0.18 3.64,-1.9 3.64,-3.98 0,-2.08 -1.6,-3.8 -3.64,-3.98 z",
    style: {
      strokeWidth: 0.234,
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeOpacity: 1
    }
  })));
}
var ReactComponent5 = SvgUnion;

// src/assets/sets/intersection.svg
import {
  createElement as createElement6
} from "react";
function SvgIntersection(props) {
  return /* @__PURE__ */ createElement6("svg", __spreadValues({
    width: 18,
    height: 12,
    viewBox: "0 0 16 10"
  }, props), /* @__PURE__ */ createElement6("g", {
    transform: "translate(0,-3)"
  }, /* @__PURE__ */ createElement6("path", {
    d: "M 5.0000001,3 C 2.2,3 0,5.2 0,8 c 0,2.8 2.2,5 5.0000001,5 0.6,0 1.1,-0.1 1.6,-0.3 C 5.3000001,11.6 4.5,9.7999998 4.5,8 4.5,6.2 5.3000001,4.5 6.6000001,3.3 c -0.5,-0.2 -1,-0.3 -1.6,-0.3 z M 4.65,4.02 C 3.92,5.17 3.51,6.54 3.51,8 c 0,1.4599998 0.42,2.83 1.14,3.98 C 2.61,11.8 1.01,10.08 1.01,8 1.01,5.92 2.61,4.2 4.65,4.02 Z M 8,4 C 6.8,4.9 6,6.4 6,8 6,9.6 6.8,11.1 8,12 9.2,11.1 10,9.7 10,8 10,6.3 9.2,4.9 8,4 Z m 3,-1 c 2.8,0 5,2.2 5,5 0,2.8 -2.2,5 -5,5 C 10.4,13 9.9,12.9 9.4,12.7 10.7,11.6 11.5,9.8 11.5,8 11.5,6.2 10.7,4.5 9.4,3.3 9.9,3.1 10.4,3 11,3 Z m 0.35,1.02 c 0.73,1.15 1.14,2.52 1.14,3.98 0,1.46 -0.42,2.83 -1.14,3.98 2.04,-0.18 3.64,-1.9 3.64,-3.98 0,-2.08 -1.6,-3.8 -3.64,-3.98 z",
    style: {
      strokeWidth: 0.234,
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeOpacity: 1
    }
  })));
}
var ReactComponent6 = SvgIntersection;

// src/assets/sets/complement.svg
import {
  createElement as createElement7
} from "react";
function SvgComplement(props) {
  return /* @__PURE__ */ createElement7("svg", __spreadValues({
    id: "svg14",
    viewBox: "0 0 25.3804963846 16",
    height: 16,
    width: 25.3804963846
  }, props), /* @__PURE__ */ createElement7("defs", null, /* @__PURE__ */ createElement7("mask", {
    id: "union-mask",
    x: 0,
    y: 0,
    width: 25.3804963846,
    height: 16
  }, /* @__PURE__ */ createElement7("rect", {
    x: "5%",
    width: "90%",
    height: "100%",
    fill: "white"
  }), /* @__PURE__ */ createElement7("g", {
    transform: "translate(4.69,0)"
  }, /* @__PURE__ */ createElement7("path", {
    d: "m 11.467471,11.811278 c 0.198237,-0.322177 0.508,-1.011333 0.653661,-1.454255 0.659343,-2.0049141 0.44323,-4.2620847 -0.577734,-6.0340822 l -0.168844,-0.2930481 0.105744,0.017887 c 0.759902,0.1285441 1.368762,0.3699553 1.856675,0.7361658 1.988296,1.4923476 2.192477,4.3353549 0.434717,6.0529895 -0.641216,0.626581 -1.299647,0.94683 -2.294136,1.115833 l -0.108488,0.01844 z M 4.3162122,11.919169 C 1.9278944,11.487872 0.46692382,9.0323123 1.234873,6.7401372 1.5621727,5.763213 2.2610593,4.9489746 3.1840041,4.4693005 3.5978035,4.2542401 3.9427842,4.145371 4.5197023,4.0477802 L 4.6254464,4.0298927 4.4571836,4.3223069 C 3.4332707,6.1017061 3.2180432,8.3476022 3.878868,10.357023 c 0.1458466,0.443487 0.4554716,1.132155 0.6542959,1.455285 0.054471,0.08853 0.087814,0.159599 0.074096,0.157937 -0.013718,-0.0017 -0.1446898,-0.02465 -0.2910477,-0.05108 z M 5.0000001,3 C 2.2,3 0,5.2 0,8 c 0,2.8 2.2,5 5.0000001,5 0.6,0 1.1,-0.1 1.6,-0.3 C 5.3000001,11.6 4.5,9.7999998 4.5,8 4.5,6.2 5.3000001,4.5 6.6000001,3.3 c -0.5,-0.2 -1,-0.3 -1.6,-0.3 z M 4.65,4.02 C 3.92,5.17 3.51,6.54 3.51,8 c 0,1.4599998 0.42,2.83 1.14,3.98 C 2.61,11.8 1.01,10.08 1.01,8 1.01,5.92 2.61,4.2 4.65,4.02 Z M 8,4 C 6.8,4.9 6,6.4 6,8 6,9.6 6.8,11.1 8,12 9.2,11.1 10,9.7 10,8 10,6.3 9.2,4.9 8,4 Z m 3,-1 c 2.8,0 5,2.2 5,5 0,2.8 -2.2,5 -5,5 C 10.4,13 9.9,12.9 9.4,12.7 10.7,11.6 11.5,9.8 11.5,8 11.5,6.2 10.7,4.5 9.4,3.3 9.9,3.1 10.4,3 11,3 Z m 0.35,1.02 c 0.73,1.15 1.14,2.52 1.14,3.98 0,1.46 -0.42,2.83 -1.14,3.98 2.04,-0.18 3.64,-1.9 3.64,-3.98 0,-2.08 -1.6,-3.8 -3.64,-3.98 z",
    style: {
      strokeWidth: 0.234,
      strokeMiterlimit: 4,
      strokeDasharray: "none",
      strokeOpacity: 1
    },
    fill: "black"
  })))), /* @__PURE__ */ createElement7("g", null, /* @__PURE__ */ createElement7("rect", {
    x: 0,
    y: 0,
    width: 25.3804963846,
    height: 16,
    mask: "url(#union-mask)"
  })));
}
var ReactComponent7 = SvgComplement;

// src/components/sets/SetsManagerButtons.js
function PlusButton(props) {
  const {
    datatype,
    onError,
    onImportTree,
    onCreateLevelZeroNode,
    importable,
    editable
  } = props;
  const onImport = useCallback11((importHandler, mimeType) => () => {
    const uploadInputNode = document.createElement("input");
    uploadInputNode.setAttribute("type", "file");
    uploadInputNode.setAttribute("accept", mimeType);
    document.body.appendChild(uploadInputNode);
    uploadInputNode.click();
    uploadInputNode.addEventListener("change", (event) => {
      if (!(window.File && window.FileReader && window.FileList && window.Blob)) {
        onError("Local file reading APIs are not fully supported in this browser.");
        return;
      }
      const { files: files2 } = event.target;
      if (!files2 || files2.length !== 1) {
        onError("Incorrect number of files selected.");
        return;
      }
      const reader = new FileReader();
      reader.addEventListener("load", () => {
        const { result } = reader;
        try {
          const treeToImport = importHandler(result, datatype);
          onError(false);
          onImportTree(treeToImport);
        } catch (e) {
          onError(e.message);
        }
      }, false);
      reader.readAsText(files2[0]);
    });
    uploadInputNode.remove();
  }, [datatype, onError, onImportTree]);
  const menuConfig = [
    ...editable ? [
      {
        title: "Create hierarchy",
        handler: onCreateLevelZeroNode,
        handlerKey: "n"
      }
    ] : [],
    ...importable ? [
      {
        title: "Import hierarchy",
        subtitle: "(from CSV file)",
        handler: onImport(handleImportTabular, MIME_TYPE_TABULAR),
        handlerKey: "c"
      },
      {
        title: "Import hierarchy",
        subtitle: "(from JSON file)",
        handler: onImport(handleImportJSON, MIME_TYPE_JSON),
        handlerKey: "j"
      }
    ] : []
  ];
  return menuConfig.length > 0 ? /* @__PURE__ */ React49.createElement(PopoverMenu, {
    menuConfig
  }, /* @__PURE__ */ React49.createElement("button", {
    className: "plus-button",
    type: "submit"
  }, "+")) : null;
}
function SetOperationButtons(props) {
  const {
    onUnion,
    onIntersection,
    onComplement,
    operatable,
    hasCheckedSetsToUnion,
    hasCheckedSetsToIntersect,
    hasCheckedSetsToComplement
  } = props;
  return /* @__PURE__ */ React49.createElement(React49.Fragment, null, operatable && /* @__PURE__ */ React49.createElement(React49.Fragment, null, /* @__PURE__ */ React49.createElement("button", {
    onClick: onUnion,
    title: "New set from union of checked sets",
    type: "submit",
    disabled: !hasCheckedSetsToUnion
  }, /* @__PURE__ */ React49.createElement(ReactComponent5, null)), /* @__PURE__ */ React49.createElement("button", {
    onClick: onIntersection,
    title: "New set from intersection of checked sets",
    type: "submit",
    disabled: !hasCheckedSetsToIntersect
  }, /* @__PURE__ */ React49.createElement(ReactComponent6, null)), /* @__PURE__ */ React49.createElement("button", {
    onClick: onComplement,
    title: "New set from complement of checked sets",
    type: "submit",
    disabled: !hasCheckedSetsToComplement
  }, /* @__PURE__ */ React49.createElement(ReactComponent7, null))));
}

// src/components/sets/SetsManager.js
function processNode(node, prevPath, setColor, theme) {
  var _a2;
  const nodePath = [...prevPath, node.name];
  return __spreadProps(__spreadValues(__spreadValues({}, node), node.children ? {
    children: node.children.map((c) => processNode(c, nodePath, setColor))
  } : {}), {
    color: ((_a2 = setColor == null ? void 0 : setColor.find((d) => isEqual10(d.path, nodePath))) == null ? void 0 : _a2.color) || getDefaultColor(theme)
  });
}
function processSets(sets, setColor, theme) {
  return __spreadProps(__spreadValues({}, sets), {
    tree: sets ? sets.tree.map((lzn) => processNode(lzn, [], setColor, theme)) : []
  });
}
function getAllKeys(node, path = []) {
  if (!node) {
    return null;
  }
  const newPath = [...path, node.name];
  if (node.children) {
    return [pathToKey(newPath), ...node.children.flatMap((v) => getAllKeys(v, newPath))];
  }
  return pathToKey(newPath);
}
function SetsManager(props) {
  const {
    theme,
    sets,
    additionalSets,
    setColor,
    levelSelection: checkedLevel,
    setSelection,
    setExpansion,
    hasColorEncoding,
    datatype,
    draggable = true,
    checkable = true,
    editable = true,
    expandable = true,
    operatable = true,
    exportable = true,
    importable = true,
    onError,
    onCheckNode,
    onExpandNode,
    onDropNode,
    onCheckLevel,
    onNodeSetColor,
    onNodeSetName,
    onNodeCheckNewName,
    onNodeRemove,
    onNodeView,
    onImportTree,
    onCreateLevelZeroNode,
    onExportLevelZeroNodeJSON,
    onExportLevelZeroNodeTabular,
    onExportSetJSON,
    onUnion,
    onIntersection,
    onComplement,
    hasCheckedSetsToUnion,
    hasCheckedSetsToIntersect,
    hasCheckedSetsToComplement
  } = props;
  const isChecking = true;
  const autoExpandParent = true;
  const [isDragging, setIsDragging] = useState14(false);
  const [isEditingNodeName, setIsEditingNodeName] = useState14(null);
  const processedSets = useMemo9(() => processSets(sets, setColor, theme), [sets, setColor, theme]);
  const processedAdditionalSets = useMemo9(() => processSets(additionalSets, setColor, theme), [additionalSets, setColor, theme]);
  const additionalSetKeys = processedAdditionalSets ? processedAdditionalSets.tree.flatMap((v) => getAllKeys(v, [])) : [];
  const allSetSelectionKeys = (setSelection || []).map(pathToKey);
  const allSetExpansionKeys = (setExpansion || []).map(pathToKey);
  const setSelectionKeys = allSetSelectionKeys.filter((k) => !additionalSetKeys.includes(k));
  const setExpansionKeys = allSetExpansionKeys.filter((k) => !additionalSetKeys.includes(k));
  const additionalSetSelectionKeys = allSetSelectionKeys.filter((k) => additionalSetKeys.includes(k));
  const additionalSetExpansionKeys = allSetExpansionKeys.filter((k) => additionalSetKeys.includes(k));
  function renderTreeNodes(nodes, readOnly, currPath) {
    if (!nodes) {
      return null;
    }
    return nodes.map((node) => {
      const newPath = [...currPath, node.name];
      return /* @__PURE__ */ React50.createElement(TreeNode, __spreadProps(__spreadValues({
        theme,
        key: pathToKey(newPath)
      }, nodeToRenderProps(node, newPath, setColor)), {
        isEditing: isEqual10(isEditingNodeName, newPath),
        datatype,
        draggable: draggable && !readOnly,
        editable: editable && !readOnly,
        checkable,
        expandable,
        exportable,
        hasColorEncoding,
        isChecking,
        checkedLevelPath: checkedLevel ? checkedLevel.levelZeroPath : null,
        checkedLevelIndex: checkedLevel ? checkedLevel.levelIndex : null,
        onCheckNode,
        onCheckLevel,
        onNodeView,
        onNodeSetColor,
        onNodeSetName: (targetPath, name2) => {
          onNodeSetName(targetPath, name2);
          setIsEditingNodeName(null);
        },
        onNodeCheckNewName,
        onNodeSetIsEditing: setIsEditingNodeName,
        onNodeRemove,
        onExportLevelZeroNodeJSON,
        onExportLevelZeroNodeTabular,
        onExportSetJSON,
        disableTooltip: isDragging,
        onDragStart: () => setIsDragging(true),
        onDragEnd: () => setIsDragging(false)
      }), renderTreeNodes(node.children, readOnly, newPath, theme));
    });
  }
  return /* @__PURE__ */ React50.createElement("div", {
    className: "sets-manager"
  }, /* @__PURE__ */ React50.createElement("div", {
    className: "sets-manager-tree"
  }, /* @__PURE__ */ React50.createElement(Tree_default, {
    draggable: false,
    checkable,
    checkedKeys: setSelectionKeys,
    expandedKeys: setExpansionKeys,
    autoExpandParent,
    onCheck: (checkedKeys, info) => onCheckNode(info.node.props.nodeKey, info.checked),
    onExpand: (expandedKeys, info) => onExpandNode(expandedKeys, info.node.props.nodeKey, info.expanded)
  }, renderTreeNodes(processedSets.tree, true, [], theme)), /* @__PURE__ */ React50.createElement(Tree_default, {
    draggable: true,
    checkable,
    checkedKeys: additionalSetSelectionKeys,
    expandedKeys: additionalSetExpansionKeys,
    autoExpandParent,
    onCheck: (checkedKeys, info) => onCheckNode(info.node.props.nodeKey, info.checked),
    onExpand: (expandedKeys, info) => onExpandNode(expandedKeys, info.node.props.nodeKey, info.expanded),
    onDrop: (info) => {
      const { eventKey: dropKey } = info.node.props;
      const { eventKey: dragKey } = info.dragNode.props;
      const { dropToGap, dropPosition } = info;
      onDropNode(dropKey, dragKey, dropPosition, dropToGap);
    }
  }, renderTreeNodes(processedAdditionalSets.tree, false, [], theme)), /* @__PURE__ */ React50.createElement(PlusButton, {
    datatype,
    onError,
    onImportTree,
    onCreateLevelZeroNode,
    importable,
    editable
  })), isChecking ? /* @__PURE__ */ React50.createElement("div", {
    className: "set-operation-buttons"
  }, /* @__PURE__ */ React50.createElement(SetOperationButtons, {
    onUnion,
    onIntersection,
    onComplement,
    operatable,
    hasCheckedSetsToUnion,
    hasCheckedSetsToIntersect,
    hasCheckedSetsToComplement
  })) : null);
}

// src/components/sets/CellSetsManagerSubscriber.js
var CELL_SETS_DATA_TYPES = ["cells", "cell-sets"];
function CellSetsManagerSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme,
    title: title16 = "Cell Sets"
  } = props;
  const loaders = useLoaders();
  const setWarning = useSetWarning();
  const [{
    dataset,
    cellSetSelection,
    cellSetColor,
    additionalCellSets,
    cellColorEncoding
  }, {
    setCellSetSelection,
    setCellColorEncoding,
    setCellSetColor,
    setAdditionalCellSets
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSets, coordinationScopes);
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(CELL_SETS_DATA_TYPES);
  const [cellSetExpansion, setCellSetExpansion] = useState15([]);
  useEffect16(() => {
    resetUrls();
    resetReadyItems();
    setCellSetExpansion([]);
  }, [loaders, dataset]);
  const [cells] = useCellsData(loaders, dataset, setItemIsReady, addUrl, true);
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, true, { setCellSetSelection, setCellSetColor }, { cellSetSelection, cellSetColor });
  useEffect16(() => {
    if (additionalCellSets) {
      let upgradedCellSets;
      try {
        upgradedCellSets = tryUpgradeTreeToLatestSchema(additionalCellSets, SETS_DATATYPE_CELL);
      } catch (e) {
        setWarning(e.message);
        return;
      }
      setAdditionalCellSets(upgradedCellSets);
    }
  }, [additionalCellSets, setAdditionalCellSets, setWarning]);
  const allCellIds = useMemo10(() => cells ? Object.keys(cells) : [], [cells]);
  function setCellSetColorEncoding() {
    setCellColorEncoding("cellSetSelection");
  }
  const mergedCellSets = useMemo10(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const checkedLevel = useMemo10(() => {
    if (cellSetSelection && cellSetSelection.length > 0 && mergedCellSets && mergedCellSets.tree.length > 0) {
      return treeToExpectedCheckedLevel(mergedCellSets, cellSetSelection);
    }
    return null;
  }, [cellSetSelection, mergedCellSets]);
  function onCheckLevel(levelZeroName, levelIndex) {
    const lzn = mergedCellSets.tree.find((n) => n.name === levelZeroName);
    if (lzn) {
      const newCellSetSelection = nodeToLevelDescendantNamePaths(lzn, levelIndex, [], true);
      setCellSetSelection(newCellSetSelection);
      setCellSetColorEncoding();
    }
  }
  function onCheckNode(targetKey, checked) {
    const targetPath = Array.isArray(targetKey) ? targetKey : targetKey.split(PATH_SEP);
    if (!targetKey) {
      return;
    }
    if (checked) {
      setCellSetSelection([...cellSetSelection, targetPath]);
    } else {
      setCellSetSelection(cellSetSelection.filter((d) => !isEqual11(d, targetPath)));
    }
    setCellSetColorEncoding();
  }
  function onExpandNode(expandedKeys, targetKey, expanded) {
    if (expanded) {
      setCellSetExpansion((prev) => [...prev, targetKey.split(PATH_SEP)]);
    } else {
      setCellSetExpansion((prev) => prev.filter((d) => !isEqual11(d, targetKey.split(PATH_SEP))));
    }
  }
  function onDropNode(dropKey, dragKey, dropPosition, dropToGap) {
    const dropPath = dropKey.split(PATH_SEP);
    const dropNode = treeFindNodeByNamePath(additionalCellSets, dropPath);
    if (!dropNode.children && !dropToGap) {
      return;
    }
    const dropNodeLevel = dropPath.length - 1;
    const dropNodeIsLevelZero = dropNodeLevel === 0;
    const dragPath = dragKey.split(PATH_SEP);
    const dragNode = treeFindNodeByNamePath(additionalCellSets, dragPath);
    if (dropNodeIsLevelZero && dropToGap && !dragNode.children) {
      return;
    }
    let dropParentNode;
    let dropParentPath;
    let dropNodeCurrIndex;
    if (!dropNodeIsLevelZero) {
      dropParentPath = dropPath.slice(0, -1);
      dropParentNode = treeFindNodeByNamePath(additionalCellSets, dropParentPath);
      dropNodeCurrIndex = dropParentNode.children.findIndex((c) => c.name === dropNode.name);
    } else {
      dropNodeCurrIndex = additionalCellSets.tree.findIndex((lzn) => lzn.name === dropNode.name);
    }
    let hasSiblingNameConflict;
    const dragNodeName = dragNode.name;
    if (!dropNodeIsLevelZero && dropToGap) {
      hasSiblingNameConflict = dropParentNode.children.find((c) => c !== dragNode && c.name === dragNodeName);
    } else if (!dropToGap) {
      hasSiblingNameConflict = dropNode.children.find((c) => c !== dragNode && c.name === dragNodeName);
    } else {
      hasSiblingNameConflict = additionalCellSets.tree.find((lzn) => lzn !== dragNode && lzn.name === dragNodeName);
    }
    if (hasSiblingNameConflict) {
      return;
    }
    const nextAdditionalCellSets = __spreadProps(__spreadValues({}, additionalCellSets), {
      tree: additionalCellSets.tree.map((lzn) => filterNode(lzn, [], dragPath)).filter(Boolean)
    });
    if (!dropNodeIsLevelZero) {
      dropNodeCurrIndex = dropParentNode.children.findIndex((c) => c.name === dropNode.name);
    } else {
      dropNodeCurrIndex = nextAdditionalCellSets.tree.findIndex((lzn) => lzn.name === dropNode.name);
    }
    let newDragPath = [];
    if (!dropToGap || !dropNodeIsLevelZero) {
      let addChildFunction;
      let checkPathFunction;
      const newPath = [];
      if (!dropToGap) {
        addChildFunction = (n) => nodeAppendChild(n, dragNode);
        checkPathFunction = (path) => isEqual11(path, dropPath);
      } else if (!dropNodeIsLevelZero) {
        checkPathFunction = (path) => isEqual11(path, dropParentPath);
        if (dropPosition === -1) {
          addChildFunction = (n) => nodePrependChild(n, dragNode);
        } else {
          const insertIndex = dropNodeCurrIndex + (dropPosition > dropNodeCurrIndex ? 1 : 0);
          addChildFunction = (n) => nodeInsertChild(n, dragNode, insertIndex);
        }
      }
      nextAdditionalCellSets.tree = nextAdditionalCellSets.tree.map((node) => nodeTransform(node, (n, path) => checkPathFunction(path), (n) => {
        const newNode = addChildFunction(n);
        return newNode;
      }, newPath));
      setAdditionalCellSets(nextAdditionalCellSets);
      newDragPath = [...newPath[0], dragNode.name];
      setCellSetSelection([newDragPath]);
    } else if (dropPosition === -1) {
      nextAdditionalCellSets.tree.unshift(dragNode);
      setAdditionalCellSets(nextAdditionalCellSets);
      newDragPath = [dragNode.name];
      setCellSetSelection([newDragPath]);
    } else {
      const insertIndex = dropNodeCurrIndex + (dropPosition > dropNodeCurrIndex ? 1 : 0);
      const newLevelZero = Array.from(nextAdditionalCellSets.tree);
      newLevelZero.splice(insertIndex, 0, dragNode);
      nextAdditionalCellSets.tree = newLevelZero;
      setAdditionalCellSets(nextAdditionalCellSets);
      newDragPath = [dragNode.name];
      setCellSetSelection([newDragPath]);
    }
    const oldColors = cellSetColor.filter((i) => isEqualOrPrefix(dragPath, i.path));
    const newColors = oldColors.map((i) => __spreadProps(__spreadValues({}, i), {
      path: !isEqual11(i.path, dragPath) ? newDragPath.concat(i.path.slice(dragPath.length)) : newDragPath
    }));
    const newCellSetColor = cellSetColor.filter((i) => !isEqualOrPrefix(dragPath, i.path));
    newCellSetColor.push(...newColors);
    setCellSetColor(newCellSetColor);
  }
  function onNodeSetColor(targetPath, color) {
    const prevNodeColor = cellSetColor == null ? void 0 : cellSetColor.find((d) => isEqual11(d.path, targetPath));
    if (!prevNodeColor) {
      setCellSetColor([
        ...cellSetColor || [],
        {
          path: targetPath,
          color
        }
      ]);
    } else {
      setCellSetColor([
        ...cellSetColor.filter((d) => !isEqual11(d.path, targetPath)),
        {
          path: targetPath,
          color
        }
      ]);
    }
  }
  function onNodeSetName(targetPath, name2) {
    const nextNamePath = [...targetPath];
    nextNamePath.pop();
    nextNamePath.push(name2);
    function renameNode(node, prevPath) {
      if (isEqual11([...prevPath, node.name], targetPath)) {
        return __spreadProps(__spreadValues({}, node), {
          name: name2
        });
      }
      if (!node.children) {
        return node;
      }
      return __spreadProps(__spreadValues({}, node), {
        children: node.children.map((c) => renameNode(c, [...prevPath, node.name]))
      });
    }
    const nextAdditionalCellSets = __spreadProps(__spreadValues({}, additionalCellSets), {
      tree: additionalCellSets.tree.map((lzn) => renameNode(lzn, []))
    });
    const nextCellSetColor = cellSetColor.map((d) => ({
      path: tryRenamePath(targetPath, d.path, nextNamePath),
      color: d.color
    }));
    const nextCellSetSelection = cellSetSelection.map((d) => tryRenamePath(targetPath, d, nextNamePath));
    const nextCellSetExpansion = cellSetExpansion.map((d) => tryRenamePath(targetPath, d, nextNamePath));
    setAdditionalCellSets(nextAdditionalCellSets);
    setCellSetColor(nextCellSetColor);
    setCellSetSelection(nextCellSetSelection);
    setCellSetExpansion(nextCellSetExpansion);
  }
  function onNodeCheckNewName(targetPath, name2) {
    const nextNamePath = [...targetPath];
    nextNamePath.pop();
    nextNamePath.push(name2);
    const hasConflicts = !isEqual11(targetPath, nextNamePath) && treeFindNodeByNamePath(additionalCellSets, nextNamePath);
    return hasConflicts;
  }
  function onNodeRemove(targetPath) {
    const nextAdditionalCellSets = __spreadProps(__spreadValues({}, additionalCellSets), {
      tree: additionalCellSets.tree.map((lzn) => filterNode(lzn, [], targetPath)).filter(Boolean)
    });
    const nextCellSetColor = cellSetColor.filter((d) => !isEqualOrPrefix(targetPath, d.path));
    const nextCellSetSelection = cellSetSelection.filter((d) => !isEqualOrPrefix(targetPath, d));
    const nextCellSetExpansion = cellSetExpansion.filter((d) => !isEqualOrPrefix(targetPath, d));
    setAdditionalCellSets(nextAdditionalCellSets);
    setCellSetColor(nextCellSetColor);
    setCellSetSelection(nextCellSetSelection);
    setCellSetExpansion(nextCellSetExpansion);
  }
  function onNodeView(targetPath) {
    const setsToView = [];
    function viewNode(node, nodePath) {
      if (cellSetExpansion.find((expandedPath) => isEqual11(nodePath, expandedPath))) {
        if (node.children) {
          node.children.forEach((c) => {
            viewNode(c, [...nodePath, c.name]);
          });
        } else {
          setsToView.push(nodePath);
        }
      } else {
        setsToView.push(nodePath);
      }
    }
    const targetNode = treeFindNodeByNamePath(mergedCellSets, targetPath);
    viewNode(targetNode, targetPath);
    setCellSetSelection(setsToView);
    setCellSetColorEncoding();
  }
  function onCreateLevelZeroNode() {
    const nextName = getNextNumberedNodeName(additionalCellSets == null ? void 0 : additionalCellSets.tree, "My hierarchy ");
    setAdditionalCellSets(__spreadProps(__spreadValues({}, additionalCellSets || treeInitialize(SETS_DATATYPE_CELL)), {
      tree: [
        ...additionalCellSets ? additionalCellSets.tree : [],
        {
          name: nextName,
          children: []
        }
      ]
    }));
  }
  function onUnion() {
    const newSet = treeToUnion(mergedCellSets, cellSetSelection);
    setCellSelection(newSet, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding, "Union ");
  }
  function onIntersection() {
    const newSet = treeToIntersection(mergedCellSets, cellSetSelection);
    setCellSelection(newSet, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding, "Intersection ");
  }
  function onComplement() {
    const newSet = treeToComplement(mergedCellSets, cellSetSelection, allCellIds);
    setCellSelection(newSet, additionalCellSets, cellSetColor, setCellSetSelection, setAdditionalCellSets, setCellSetColor, setCellColorEncoding, "Complement ");
  }
  function onImportTree(treeToImport) {
    const hasConflict = treesConflict(mergedCellSets, treeToImport);
    if (!hasConflict) {
      setAdditionalCellSets(__spreadProps(__spreadValues({}, additionalCellSets || treeInitialize(SETS_DATATYPE_CELL)), {
        tree: [
          ...additionalCellSets ? additionalCellSets.tree : [],
          ...treeToImport.tree
        ]
      }));
      const importAutoSetColors = initializeCellSetColor(treeToImport, cellSetColor);
      setCellSetColor([
        ...cellSetColor,
        ...importAutoSetColors
      ]);
    }
  }
  function onExportLevelZeroNodeJSON(nodePath) {
    const {
      treeToExport,
      nodeName
    } = treeExportLevelZeroNode(mergedCellSets, nodePath, SETS_DATATYPE_CELL, cellSetColor, theme);
    downloadForUser(handleExportJSON(treeToExport), `${nodeName}_${package_default.name}-${SETS_DATATYPE_CELL}-hierarchy.${FILE_EXTENSION_JSON}`);
  }
  function onExportLevelZeroNodeTabular(nodePath) {
    const {
      treeToExport,
      nodeName
    } = treeExportLevelZeroNode(mergedCellSets, nodePath, SETS_DATATYPE_CELL, cellSetColor, theme);
    downloadForUser(handleExportTabular(treeToExport), `${nodeName}_${package_default.name}-${SETS_DATATYPE_CELL}-hierarchy.${FILE_EXTENSION_TABULAR}`);
  }
  function onExportSetJSON(nodePath) {
    const { setToExport, nodeName } = treeExportSet(mergedCellSets, nodePath);
    downloadForUser(handleExportJSON(setToExport), `${nodeName}_${package_default.name}-${SETS_DATATYPE_CELL}-set.${FILE_EXTENSION_JSON}`, FILE_EXTENSION_JSON);
  }
  return /* @__PURE__ */ React51.createElement(TitleInfo, {
    title: title16,
    isScroll: true,
    removeGridComponent,
    urls,
    theme,
    isReady
  }, /* @__PURE__ */ React51.createElement(SetsManager, {
    setColor: cellSetColor,
    sets: cellSets,
    additionalSets: additionalCellSets,
    levelSelection: checkedLevel,
    setSelection: cellSetSelection,
    setExpansion: cellSetExpansion,
    hasColorEncoding: cellColorEncoding === "cellSetSelection",
    draggable: true,
    datatype: SETS_DATATYPE_CELL,
    onError: setWarning,
    onCheckNode,
    onExpandNode,
    onDropNode,
    onCheckLevel,
    onNodeSetColor,
    onNodeSetName,
    onNodeCheckNewName,
    onNodeRemove,
    onNodeView,
    onImportTree,
    onCreateLevelZeroNode,
    onExportLevelZeroNodeJSON,
    onExportLevelZeroNodeTabular,
    onExportSetJSON,
    onUnion,
    onIntersection,
    onComplement,
    hasCheckedSetsToUnion: (cellSetSelection == null ? void 0 : cellSetSelection.length) > 1,
    hasCheckedSetsToIntersect: (cellSetSelection == null ? void 0 : cellSetSelection.length) > 1,
    hasCheckedSetsToComplement: (cellSetSelection == null ? void 0 : cellSetSelection.length) > 0,
    theme
  }));
}

// src/components/layer-controller/LayerControllerSubscriber.js
import React62, {
  useEffect as useEffect19,
  useCallback as useCallback13,
  useRef as useRef9,
  forwardRef as forwardRef4
} from "react";
import Grid8 from "@material-ui/core/Grid";

// src/components/layer-controller/RasterChannelController.js
import React55, { useCallback as useCallback12, useState as useState17, useEffect as useEffect17 } from "react";
import Grid2 from "@material-ui/core/Grid";
import Slider5 from "@material-ui/core/Slider";
import debounce5 from "lodash/debounce";
import isEqual12 from "lodash/isEqual";

// src/components/layer-controller/ChannelOptions.js
import React53, { useState as useState16 } from "react";
import { makeStyles as makeStyles7 } from "@material-ui/core/styles";
import MoreVertIcon from "@material-ui/icons/MoreVert";
import MenuItem2 from "@material-ui/core/MenuItem";

// src/components/layer-controller/ColorPalette.js
import React52 from "react";
import IconButton4 from "@material-ui/core/IconButton";
import LensIcon from "@material-ui/icons/Lens";
import { makeStyles as makeStyles6 } from "@material-ui/core/styles";
var useStyles3 = makeStyles6((theme) => ({
  container: {
    width: "70px",
    height: "40px",
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    flexWrap: "wrap"
  },
  button: {
    padding: "3px",
    width: "16px"
  },
  icon: {
    width: "17px",
    height: "17px",
    stroke: theme.palette.action.selected,
    "stroke-width": "1px"
  }
}));
var ColorPalette = ({ handleChange }) => {
  const classes = useStyles3();
  return /* @__PURE__ */ React52.createElement("div", {
    className: classes.container,
    "aria-label": "color-swatch"
  }, VIEWER_PALETTE.map((color) => /* @__PURE__ */ React52.createElement(IconButton4, {
    className: classes.button,
    key: color,
    onClick: () => handleChange(color)
  }, /* @__PURE__ */ React52.createElement(LensIcon, {
    fontSize: "small",
    style: { color: `rgb(${color})` },
    className: classes.icon
  }))));
};
var ColorPalette_default = ColorPalette;

// src/components/layer-controller/ChannelOptions.js
var useStyles4 = makeStyles7(() => ({
  menuButton: {
    backgroundColor: "transparent"
  },
  colors: {
    "&:hover": {
      backgroundColor: "transparent"
    },
    paddingLeft: "2px",
    paddingRight: "2px"
  }
}));
function ChannelOptions({ handlePropertyChange, handleChannelRemove, handleIQRUpdate }) {
  const [open, setOpen] = useState16(false);
  const classes = useStyles4();
  const handleColorSelect = (color) => {
    handlePropertyChange("color", color);
  };
  const handleRemove = () => {
    setOpen(false);
    handleChannelRemove();
  };
  return /* @__PURE__ */ React53.createElement(PopperMenu, {
    open,
    setOpen,
    buttonIcon: /* @__PURE__ */ React53.createElement(MoreVertIcon, {
      fontSize: "small"
    }),
    buttonClassName: classes.menuButton
  }, /* @__PURE__ */ React53.createElement(MenuItem2, {
    dense: true,
    disableGutters: true,
    onClick: handleRemove
  }, /* @__PURE__ */ React53.createElement(MuiSpan, null, "Remove")), /* @__PURE__ */ React53.createElement(MenuItem2, {
    dense: true,
    disableGutters: true,
    onClick: handleIQRUpdate
  }, /* @__PURE__ */ React53.createElement(MuiSpan, null, "Use IQR")), /* @__PURE__ */ React53.createElement(MenuItem2, {
    dense: true,
    disableGutters: true,
    className: classes.colors
  }, /* @__PURE__ */ React53.createElement(ColorPalette_default, {
    handleChange: handleColorSelect
  })));
}
var ChannelOptions_default = ChannelOptions;

// src/components/layer-controller/constants.js
function getDomains() {
  const domains = {};
  const needMin = ["Int8", "Int16", "Int32"];
  Object.keys(DTYPE_VALUES).forEach((dtype) => {
    const { max: max2 } = DTYPE_VALUES[dtype];
    const min = needMin.includes(dtype) ? -(max2 + 1) : 0;
    domains[dtype] = [min, max2];
  });
  return domains;
}
var DOMAINS = getDomains();

// src/components/layer-controller/shared-channel-controls.js
import React54 from "react";
import Checkbox3 from "@material-ui/core/Checkbox";
import Select2 from "@material-ui/core/Select";

// src/components/layer-controller/styles.js
import { makeStyles as makeStyles8, withStyles } from "@material-ui/core/styles";
import ExpansionPanelSummary from "@material-ui/core/ExpansionPanelSummary";
import ExpansionPanelDetails from "@material-ui/core/ExpansionPanelDetails";
import InputLabel from "@material-ui/core/InputLabel";
import Slider4 from "@material-ui/core/Slider";
import Grid from "@material-ui/core/Grid";
var useSelectStyles = makeStyles8(() => ({
  selectRoot: {
    padding: 0,
    height: "auto",
    margin: "4px 0"
  }
}));
var useOptionStyles = withStyles((theme) => ({
  paper: {
    backgroundColor: theme.palette.background.paper
  },
  span: {
    width: "70px",
    textAlign: "center",
    paddingLeft: "2px",
    paddingRight: "2px"
  },
  colors: {
    "&:hover": {
      backgroundColor: "transparent"
    },
    paddingLeft: "2px",
    paddingRight: "2px"
  },
  popper: {
    zIndex: 4
  }
}));
var sharedControllerStyles = {
  width: "100%",
  flexDirection: "column"
};
var useControllerSectionStyles = makeStyles8(() => ({
  root: __spreadProps(__spreadValues({}, sharedControllerStyles), {
    padding: "0px 8px"
  })
}));
var StyledExpansionPanelDetails = withStyles(() => ({
  root: __spreadProps(__spreadValues({}, sharedControllerStyles), {
    padding: "8px 8px 24px 8px"
  })
}))(ExpansionPanelDetails);
var StyledExpansionPanelSummary = withStyles((theme) => ({
  root: {
    padding: "0px 8px"
  },
  content: {
    margin: "4px 0px",
    minWidth: "0px"
  },
  expanded: {
    marginBottom: theme.spacing(-3),
    top: theme.spacing(-1)
  },
  expandIcon: {
    "&$expanded": {
      top: theme.spacing(-1.3)
    }
  }
}))(ExpansionPanelSummary);
var StyledInputLabel = withStyles(() => ({
  root: {
    fontSize: "14px"
  }
}))(InputLabel);
var OverflowEllipsisGrid = withStyles(() => ({
  item: {
    width: "100%",
    overflow: "hidden",
    whiteSpace: "nowrap",
    textOverflow: "ellipsis"
  }
}))(Grid);
var StyledSelectionSlider = withStyles(() => ({
  root: {
    marginTop: "7px"
  },
  markActive: {
    backgroundColor: "rgba(128, 128, 128, 0.7)"
  }
}))(Slider4);

// src/components/layer-controller/shared-channel-controls.js
function ChannelSelectionDropdown({
  handleChange,
  disabled,
  channelOptions,
  selectionIndex
}) {
  const classes = useSelectStyles();
  return /* @__PURE__ */ React54.createElement(Select2, {
    classes: { root: classes.selectRoot },
    native: true,
    value: selectionIndex,
    onChange: (e) => handleChange(Number(e.target.value))
  }, channelOptions.map((opt, i) => /* @__PURE__ */ React54.createElement("option", {
    disabled,
    key: opt,
    value: i
  }, opt)));
}
function ChannelVisibilityCheckbox({
  color,
  checked,
  toggle,
  disabled
}) {
  return /* @__PURE__ */ React54.createElement(Checkbox3, {
    onChange: toggle,
    checked,
    disabled,
    style: { color, "&$checked": { color } }
  });
}

// src/components/layer-controller/RasterChannelController.js
var toRgbUIString = (on, arr, theme) => {
  const color = on || theme === "light" && arr.every((i) => i === 255) ? [220, 220, 220] : arr;
  return `rgb(${color})`;
};
function abbreviateNumber2(value) {
  const maxLength = 5;
  let maxNaiveDigits = maxLength;
  if (!Number.isInteger(value)) {
    --maxNaiveDigits;
  }
  if (value < 1) {
    --maxNaiveDigits;
  }
  const naive = Intl.NumberFormat("en-US", {
    maximumSignificantDigits: maxNaiveDigits,
    useGrouping: false
  }).format(value);
  if (naive.length <= maxLength)
    return naive;
  return value.toExponential(0);
}
function ChannelSlider({
  color,
  slider = [0, 0],
  handleChange,
  domain = [0, 0],
  dtype,
  disabled
}) {
  const [min, max2] = domain;
  const handleChangeDebounced = useCallback12(debounce5(handleChange, 3, { trailing: true }), [handleChange]);
  const step = max2 - min < 500 && dtype === "Float32" ? (max2 - min) / 500 : 1;
  return /* @__PURE__ */ React55.createElement(Slider5, {
    value: slider,
    valueLabelFormat: abbreviateNumber2,
    onChange: (e, v) => handleChangeDebounced(v),
    valueLabelDisplay: "auto",
    getAriaLabel: () => `${color}-${slider}`,
    min,
    max: max2,
    step,
    orientation: "horizontal",
    style: { color, marginTop: "7px" },
    disabled
  });
}
function RasterChannelController({
  visibility = false,
  slider,
  color,
  channels: channels2,
  channelId,
  domainType: newDomainType,
  dimName,
  theme,
  loader,
  colormapOn,
  channelOptions,
  handlePropertyChange,
  handleChannelRemove,
  handleIQRUpdate,
  selectionIndex,
  isLoading,
  use3d: newUse3d
}) {
  const { dtype } = getSourceFromLoader(loader);
  const [domain, setDomain] = useState17(null);
  const [domainType, setDomainType] = useState17(null);
  const [use3d, setUse3d] = useState17(null);
  const [selection, setSelection] = useState17([
    __spreadValues({}, channels2[channelId].selection)
  ]);
  const rgbColor = toRgbUIString(colormapOn, color, theme);
  useEffect17(() => {
    let mounted = true;
    if (dtype && loader && channels2) {
      const selections = [__spreadValues({}, channels2[channelId].selection)];
      let domains;
      const hasDomainChanged = newDomainType !== domainType;
      const has3dChanged = use3d !== newUse3d;
      const hasSelectionChanged = !isEqual12(selections, selection);
      if (hasDomainChanged || hasSelectionChanged || has3dChanged) {
        if (newDomainType === "Full") {
          domains = [DOMAINS[dtype]];
          const [newDomain] = domains;
          if (mounted) {
            setDomain(newDomain);
            setDomainType(newDomainType);
            if (hasSelectionChanged) {
              setSelection(selections);
            }
            if (has3dChanged) {
              setUse3d(newUse3d);
            }
          }
        } else {
          getMultiSelectionStats({
            loader: loader.data,
            selections,
            use3d: newUse3d
          }).then((stats) => {
            domains = stats.domains;
            const [newDomain] = domains;
            if (mounted) {
              setDomain(newDomain);
              setDomainType(newDomainType);
              if (hasSelectionChanged) {
                setSelection(selections);
              }
              if (has3dChanged) {
                setUse3d(newUse3d);
              }
            }
          });
        }
      }
    }
    return () => {
      mounted = false;
    };
  }, [
    domainType,
    channels2,
    channelId,
    loader,
    dtype,
    newDomainType,
    selection,
    newUse3d,
    use3d
  ]);
  const createSelection = (index) => ({ [dimName]: index });
  return /* @__PURE__ */ React55.createElement(Grid2, {
    container: true,
    direction: "column",
    m: 1,
    justify: "center"
  }, /* @__PURE__ */ React55.createElement(Grid2, {
    container: true,
    direction: "row",
    justify: "space-between"
  }, /* @__PURE__ */ React55.createElement(Grid2, {
    item: true,
    xs: 10
  }, /* @__PURE__ */ React55.createElement(ChannelSelectionDropdown, {
    handleChange: (v) => handlePropertyChange("selection", createSelection(v)),
    selectionIndex,
    channelOptions,
    disabled: isLoading
  })), /* @__PURE__ */ React55.createElement(Grid2, {
    item: true,
    xs: 1,
    style: { marginTop: "4px" }
  }, /* @__PURE__ */ React55.createElement(ChannelOptions_default, {
    handlePropertyChange,
    handleChannelRemove,
    handleIQRUpdate,
    disabled: isLoading
  }))), /* @__PURE__ */ React55.createElement(Grid2, {
    container: true,
    direction: "row",
    justify: "space-between"
  }, /* @__PURE__ */ React55.createElement(Grid2, {
    item: true,
    xs: 2
  }, /* @__PURE__ */ React55.createElement(ChannelVisibilityCheckbox, {
    color: rgbColor,
    checked: visibility,
    toggle: () => handlePropertyChange("visible", !visibility),
    disabled: isLoading
  })), /* @__PURE__ */ React55.createElement(Grid2, {
    item: true,
    xs: 9
  }, /* @__PURE__ */ React55.createElement(ChannelSlider, {
    color: rgbColor,
    slider,
    domain: domain || DOMAINS[dtype],
    dtype,
    handleChange: (v) => handlePropertyChange("slider", v),
    disabled: isLoading
  }))));
}
var RasterChannelController_default = RasterChannelController;

// src/components/layer-controller/BitmaskChannelController.js
import React56 from "react";
import RemoveCircleIcon from "@material-ui/icons/RemoveCircle";
import IconButton5 from "@material-ui/core/IconButton";
import Grid3 from "@material-ui/core/Grid";
function BitmaskChannelController({
  visibility = false,
  dimName,
  channelOptions,
  handlePropertyChange,
  handleChannelRemove,
  selectionIndex,
  disableOptions = false
}) {
  const createSelection = (index) => ({ [dimName]: index });
  return /* @__PURE__ */ React56.createElement(Grid3, {
    container: true,
    direction: "row",
    justify: "space-between"
  }, /* @__PURE__ */ React56.createElement(Grid3, {
    item: true,
    xs: 2
  }, /* @__PURE__ */ React56.createElement(ChannelVisibilityCheckbox, {
    color: [220, 220, 220],
    checked: visibility,
    toggle: () => handlePropertyChange("visible", !visibility)
  })), /* @__PURE__ */ React56.createElement(Grid3, {
    item: true,
    xs: 9
  }, /* @__PURE__ */ React56.createElement(ChannelSelectionDropdown, {
    handleChange: (v) => handlePropertyChange("selection", createSelection(v)),
    selectionIndex,
    disableOptions,
    channelOptions
  })), /* @__PURE__ */ React56.createElement(Grid3, {
    item: true,
    xs: 1
  }, /* @__PURE__ */ React56.createElement(IconButton5, {
    onClick: handleChannelRemove,
    style: { padding: "6px 6px 6px 0px" }
  }, /* @__PURE__ */ React56.createElement(RemoveCircleIcon, null))));
}
var BitmaskChannelController_default = BitmaskChannelController;

// src/components/layer-controller/VectorLayerController.js
import React57 from "react";
import Grid4 from "@material-ui/core/Grid";
import Checkbox4 from "@material-ui/core/Checkbox";
import Paper3 from "@material-ui/core/Paper";
import Typography from "@material-ui/core/Typography";
import Slider6 from "@material-ui/core/Slider";
function VectorLayerController(props) {
  const {
    label,
    layer,
    layerType,
    handleLayerChange
  } = props;
  const slider = layer.opacity;
  const isOn = layer.visible;
  function handleSliderChange(v) {
    if (layerType === "cells") {
      const stroked = v < 0.7;
      handleLayerChange(__spreadProps(__spreadValues({}, layer), { opacity: v, stroked }));
    } else {
      handleLayerChange(__spreadProps(__spreadValues({}, layer), { opacity: v }));
    }
  }
  function handleCheckBoxChange(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { visible: v }));
  }
  const classes = useControllerSectionStyles();
  return /* @__PURE__ */ React57.createElement(Grid4, {
    item: true,
    style: { marginTop: "10px" }
  }, /* @__PURE__ */ React57.createElement(Paper3, {
    className: classes.root
  }, /* @__PURE__ */ React57.createElement(Typography, {
    style: {
      padding: "15px 8px 0px 8px",
      marginBottom: "-5px"
    }
  }, label), /* @__PURE__ */ React57.createElement(Grid4, {
    container: true,
    direction: "row",
    justify: "space-between"
  }, /* @__PURE__ */ React57.createElement(Grid4, {
    item: true,
    xs: 2
  }, /* @__PURE__ */ React57.createElement(Checkbox4, {
    color: "primary",
    checked: isOn,
    onChange: (e, v) => handleCheckBoxChange(v)
  })), /* @__PURE__ */ React57.createElement(Grid4, {
    item: true,
    xs: 9,
    style: { paddingRight: "8px" }
  }, /* @__PURE__ */ React57.createElement(Slider6, {
    value: slider,
    min: 0,
    max: 1,
    step: 1e-3,
    onChange: (e, v) => handleSliderChange(v),
    style: { marginTop: "7px" },
    orientation: "horizontal"
  })))));
}

// src/components/layer-controller/LayerController.js
import React60, { useState as useState18, useRef as useRef8, useEffect as useEffect18 } from "react";
import Grid7 from "@material-ui/core/Grid";
import Button2 from "@material-ui/core/Button";
import AddIcon from "@material-ui/icons/Add";
import Slider9 from "@material-ui/core/Slider";
import Tabs from "@material-ui/core/Tabs";
import Tab from "@material-ui/core/Tab";
import ExpansionPanel from "@material-ui/core/ExpansionPanel";
import ExpandMoreIcon from "@material-ui/icons/ExpandMore";
import VisibilityIcon from "@material-ui/icons/Visibility";
import VisibilityOffIcon from "@material-ui/icons/VisibilityOff";

// src/components/layer-controller/LayerOptions.js
import React58 from "react";
import range9 from "lodash/range";
import { Matrix4 as Matrix45 } from "math.gl";
import Grid5 from "@material-ui/core/Grid";
import Slider7 from "@material-ui/core/Slider";
import InputLabel2 from "@material-ui/core/InputLabel";
import Select3 from "@material-ui/core/Select";
import Checkbox5 from "@material-ui/core/Checkbox";
var DOMAIN_OPTIONS = ["Full", "Min/Max"];
function VolumeDropdown({
  loader: loaderWithMeta,
  handleMultiPropertyChange,
  resolution: currResolution,
  disable3d,
  setRasterLayerCallback,
  setAreAllChannelsLoading,
  setViewState,
  spatialHeight,
  spatialWidth,
  channels: channels2,
  use3d,
  modelMatrix
}) {
  const classes = useSelectStyles();
  const selections = channels2.map((i) => i.selection);
  const { data: loader } = loaderWithMeta;
  const handleChange = (val) => __async(this, null, function* () {
    const shouldUse3D = typeof val === "number";
    setAreAllChannelsLoading(true);
    setRasterLayerCallback(() => {
      setAreAllChannelsLoading(false);
      setRasterLayerCallback(null);
    });
    if (shouldUse3D) {
      const [xSlice, ySlice, zSlice] = getBoundingCube(loader);
      const propertiesChanged = {
        resolution: val,
        xSlice,
        ySlice,
        zSlice,
        use3d: shouldUse3D
      };
      if (!use3d) {
        const { sliders } = yield getMultiSelectionStats({
          loader,
          selections,
          use3d: shouldUse3D
        });
        propertiesChanged.channels = [...channels2];
        propertiesChanged.channels.forEach((ch, i) => {
          ch.slider = sliders[i];
        });
      }
      handleMultiPropertyChange(propertiesChanged);
      const defaultViewState = getDefaultInitialViewState(loader, { height: spatialHeight, width: spatialWidth }, 1.5, true, new Matrix45(modelMatrix));
      setViewState(__spreadProps(__spreadValues({}, defaultViewState), {
        rotationX: 0,
        rotationOrbit: 0
      }));
    } else {
      const { sliders } = yield getMultiSelectionStats({
        loader,
        selections,
        use3d: shouldUse3D
      });
      const newChannels = [...channels2];
      newChannels.forEach((ch, i) => {
        ch.slider = sliders[i];
      });
      handleMultiPropertyChange({
        resolution: val,
        use3d: shouldUse3D,
        spatialAxisFixed: false,
        channels: newChannels
      });
      const defaultViewState = getDefaultInitialViewState(loader, { height: spatialHeight, width: spatialWidth }, 0.5, false, new Matrix45(modelMatrix));
      setViewState(__spreadProps(__spreadValues({}, defaultViewState), {
        rotationX: null,
        rotationOrbit: null,
        orbitAxis: null
      }));
    }
  });
  const { labels, shape } = Array.isArray(loader) ? loader[0] : loader;
  const hasZStack = shape[labels.indexOf("z")] > 1;
  return /* @__PURE__ */ React58.createElement(React58.Fragment, null, /* @__PURE__ */ React58.createElement(Select3, {
    native: true,
    value: currResolution,
    onChange: (e) => handleChange(e.target.value === "2D" ? e.target.value : Number(e.target.value)),
    classes: { root: classes.selectRoot }
  }, /* @__PURE__ */ React58.createElement("option", {
    key: "2D",
    value: "2D"
  }, "2D Visualization"), Array.from({ length: loader.length }).fill(0).map((_, resolution) => {
    if (loader) {
      if (canLoadResolution(loader, resolution)) {
        const {
          height,
          width,
          depthDownsampled,
          totalBytes
        } = getStatsForResolution(loader, resolution);
        return /* @__PURE__ */ React58.createElement("option", {
          key: `(${height}, ${width}, ${depthDownsampled})`,
          value: resolution,
          disabled: disable3d || !hasZStack
        }, `3D: ${resolution}x Downsampled, ~${formatBytes(totalBytes)} per channel, (${height}, ${width}, ${depthDownsampled})`);
      }
    }
    return null;
  })));
}
function ColormapSelect({ value, inputId, handleChange }) {
  const classes = useSelectStyles();
  return /* @__PURE__ */ React58.createElement(Select3, {
    native: true,
    onChange: (e) => handleChange(e.target.value === "" ? null : e.target.value),
    value,
    inputProps: { name: "colormap", id: inputId },
    style: { width: "100%" },
    classes: { root: classes.selectRoot }
  }, /* @__PURE__ */ React58.createElement("option", {
    "aria-label": "None",
    value: ""
  }, "None"), COLORMAP_OPTIONS.map((name2) => /* @__PURE__ */ React58.createElement("option", {
    key: name2,
    value: name2
  }, name2)));
}
function TransparentColorCheckbox({ value, handleChange }) {
  return /* @__PURE__ */ React58.createElement(Checkbox5, {
    style: { float: "left", padding: 0 },
    color: "default",
    onChange: () => {
      if (value) {
        handleChange(null);
      } else {
        handleChange([0, 0, 0]);
      }
    },
    checked: Boolean(value)
  });
}
function OpacitySlider({ value, handleChange }) {
  return /* @__PURE__ */ React58.createElement(Slider7, {
    value,
    onChange: (e, v) => handleChange(v),
    valueLabelDisplay: "auto",
    getAriaLabel: () => "opacity slider",
    min: 0,
    max: 1,
    step: 0.01,
    orientation: "horizontal",
    style: { marginTop: "7px" }
  });
}
function SliderDomainSelector({ value, inputId, handleChange }) {
  const classes = useSelectStyles();
  return /* @__PURE__ */ React58.createElement(Select3, {
    native: true,
    onChange: (e) => handleChange(e.target.value),
    value,
    inputProps: { name: "domain-selector", id: inputId },
    style: { width: "100%" },
    classes: { root: classes.selectRoot }
  }, DOMAIN_OPTIONS.map((name2) => /* @__PURE__ */ React58.createElement("option", {
    key: name2,
    value: name2
  }, name2)));
}
function GlobalSelectionSlider({
  field,
  value,
  handleChange,
  possibleValues
}) {
  return /* @__PURE__ */ React58.createElement(StyledSelectionSlider, {
    value,
    onChange: (event, newValue) => {
      handleChange({ selection: { [field]: newValue }, event });
    },
    onChangeCommitted: (event, newValue) => {
      handleChange({ selection: { [field]: newValue }, event });
    },
    valueLabelDisplay: "auto",
    getAriaLabel: () => `${field} slider`,
    marks: possibleValues.map((val) => ({ value: val })),
    min: Number(possibleValues[0]),
    max: Number(possibleValues.slice(-1)),
    orientation: "horizontal",
    step: null
  });
}
function LayerOption({ name: name2, inputId, children }) {
  return /* @__PURE__ */ React58.createElement(Grid5, {
    container: true,
    direction: "row",
    alignItems: "center",
    justify: "center"
  }, /* @__PURE__ */ React58.createElement(Grid5, {
    item: true,
    xs: 6
  }, /* @__PURE__ */ React58.createElement(InputLabel2, {
    htmlFor: inputId
  }, name2, ":")), /* @__PURE__ */ React58.createElement(Grid5, {
    item: true,
    xs: 6
  }, children));
}
function LayerOptions({
  colormap,
  opacity,
  handleColormapChange,
  handleOpacityChange,
  handleTransparentColorChange,
  globalControlLabels,
  globalLabelValues,
  handleGlobalChannelsSelectionChange,
  handleSliderChange,
  handleDomainChange,
  transparentColor,
  channels: channels2,
  domainType,
  disableChannelsIfRgbDetected,
  shouldShowTransparentColor,
  shouldShowDomain,
  shouldShowColormap,
  use3d,
  loader,
  handleMultiPropertyChange,
  resolution,
  disable3d,
  setRasterLayerCallback,
  setAreAllChannelsLoading,
  setViewState,
  spatialHeight,
  spatialWidth,
  modelMatrix
}) {
  const { labels, shape } = Array.isArray(loader.data) ? loader.data[0] : loader.data;
  const hasDimensionsAndChannels = labels.length > 0 && channels2.length > 0;
  const hasZStack = shape[labels.indexOf("z")] > 1;
  const hasViewableResolutions = Boolean(Array.from({
    length: loader.data.length
  }).filter((_, res) => canLoadResolution(loader.data, res)).length);
  return /* @__PURE__ */ React58.createElement(Grid5, {
    container: true,
    direction: "column",
    style: { width: "100%" }
  }, hasZStack && !disable3d && hasViewableResolutions && /* @__PURE__ */ React58.createElement(VolumeDropdown, {
    loader,
    handleSliderChange,
    handleDomainChange,
    channels: channels2,
    handleMultiPropertyChange,
    resolution,
    disable3d,
    setRasterLayerCallback,
    setAreAllChannelsLoading,
    setViewState,
    spatialHeight,
    spatialWidth,
    use3d,
    modelMatrix
  }), hasDimensionsAndChannels && !use3d && globalControlLabels.map((field) => shape[labels.indexOf(field)] > 1 && /* @__PURE__ */ React58.createElement(LayerOption, {
    name: field,
    inputId: `${field}-slider`,
    key: field
  }, /* @__PURE__ */ React58.createElement(GlobalSelectionSlider, {
    field,
    value: globalLabelValues[field],
    handleChange: handleGlobalChannelsSelectionChange,
    possibleValues: range9(shape[labels.indexOf(field)])
  }))), !disableChannelsIfRgbDetected ? /* @__PURE__ */ React58.createElement(React58.Fragment, null, shouldShowColormap && /* @__PURE__ */ React58.createElement(Grid5, {
    item: true
  }, /* @__PURE__ */ React58.createElement(LayerOption, {
    name: "Colormap",
    inputId: "colormap-select"
  }, /* @__PURE__ */ React58.createElement(ColormapSelect, {
    value: colormap || "",
    inputId: "colormap-select",
    handleChange: handleColormapChange
  }))), shouldShowDomain && /* @__PURE__ */ React58.createElement(Grid5, {
    item: true
  }, /* @__PURE__ */ React58.createElement(LayerOption, {
    name: "Domain",
    inputId: "domain-selector"
  }, /* @__PURE__ */ React58.createElement(SliderDomainSelector, {
    value: domainType || DEFAULT_RASTER_DOMAIN_TYPE,
    handleChange: (value) => {
      handleDomainChange(value);
    }
  })))) : null, !use3d && /* @__PURE__ */ React58.createElement(Grid5, {
    item: true
  }, /* @__PURE__ */ React58.createElement(LayerOption, {
    name: "Opacity",
    inputId: "opacity-slider"
  }, /* @__PURE__ */ React58.createElement(OpacitySlider, {
    value: opacity,
    handleChange: handleOpacityChange
  }))), shouldShowTransparentColor && !use3d && /* @__PURE__ */ React58.createElement(Grid5, {
    item: true
  }, /* @__PURE__ */ React58.createElement(LayerOption, {
    name: "Zero Transparent",
    inputId: "transparent-color-selector"
  }, /* @__PURE__ */ React58.createElement(TransparentColorCheckbox, {
    value: transparentColor,
    handleChange: handleTransparentColorChange
  }))));
}
var LayerOptions_default = LayerOptions;

// src/components/layer-controller/VolumeOptions.js
import React59 from "react";
import { Matrix4 as Matrix46 } from "math.gl";
import Grid6 from "@material-ui/core/Grid";
import Typography2 from "@material-ui/core/Typography";
import Button from "@material-ui/core/Button";
import { makeStyles as makeStyles9, createStyles as createStyles2 } from "@material-ui/core/styles";
import FormControl from "@material-ui/core/FormControl";
import Select4 from "@material-ui/core/Select";
import InputLabel3 from "@material-ui/core/InputLabel";
import Slider8 from "@material-ui/core/Slider";
var useSlicerStyles = makeStyles9((theme) => createStyles2({
  enabled: {},
  disabled: {
    color: theme.palette.text.disabled,
    "& .MuiSlider-thumb": {
      color: "rgb(100, 100, 100, 1.0)"
    },
    "&  .MuiSlider-track": {
      color: "rgb(100, 100, 100, 1.0)"
    }
  }
}));
var Slicer = ({
  xSlice,
  ySlice,
  zSlice,
  handleSlicerSetting,
  loader,
  use3d
}) => {
  const [xSliceInit, ySliceInit, zSliceInit] = getBoundingCube(loader.data);
  const sliceValuesAndSetSliceFunctions = [
    [
      xSlice,
      (xSliceNew) => handleSlicerSetting("x", xSliceNew),
      "x",
      xSliceInit
    ],
    [
      ySlice,
      (ySliceNew) => handleSlicerSetting("y", ySliceNew),
      "y",
      ySliceInit
    ],
    [
      zSlice,
      (zSliceNew) => handleSlicerSetting("z", zSliceNew),
      "z",
      zSliceInit
    ]
  ];
  const classes = useSlicerStyles();
  const Slicers = sliceValuesAndSetSliceFunctions.map(([val, setVal, label, [min, max2]]) => /* @__PURE__ */ React59.createElement(Grid6, {
    container: true,
    direction: "row",
    justify: "flex-start",
    alignItems: "center",
    key: label
  }, /* @__PURE__ */ React59.createElement(Grid6, {
    item: true,
    xs: 1
  }, /* @__PURE__ */ React59.createElement(Typography2, {
    className: !use3d ? classes.disabled : classes.enabled,
    style: { marginBottom: 0 }
  }, label, ":")), /* @__PURE__ */ React59.createElement(Grid6, {
    item: true,
    xs: 11
  }, /* @__PURE__ */ React59.createElement(Slider8, {
    disabled: !use3d,
    className: !use3d ? classes.disabled : classes.enabled,
    value: val,
    onChange: (e, v) => setVal(v),
    valueLabelDisplay: "auto",
    valueLabelFormat: (v) => abbreviateNumber(v),
    getAriaLabel: () => `${label} slider`,
    min,
    max: max2,
    step: 5e-3,
    orientation: "horizontal"
  }))));
  return /* @__PURE__ */ React59.createElement(React59.Fragment, null, /* @__PURE__ */ React59.createElement(Typography2, {
    className: !use3d ? classes.disabled : classes.enabled,
    style: { marginTop: 16, marginBottom: 0 }
  }, "Clipping Planes:", " "), " ", Slicers);
};
var renderingOptions = Object.values(RENDERING_MODES);
function RenderingModeSelect({
  handleRenderingModeChange,
  renderingMode,
  use3d
}) {
  const classes = useSelectStyles();
  const options = !use3d ? [...renderingOptions, ""] : renderingOptions;
  return /* @__PURE__ */ React59.createElement(FormControl, {
    fullWidth: true
  }, /* @__PURE__ */ React59.createElement(InputLabel3, {
    htmlFor: "rendering-mode-select"
  }, "Rendering Mode"), /* @__PURE__ */ React59.createElement(Select4, {
    native: true,
    onChange: (e) => handleRenderingModeChange(e.target.value),
    value: use3d ? renderingMode : "",
    inputProps: {
      name: "rendering-mode",
      id: "rendering-mode-select"
    },
    disabled: !use3d,
    classes: { root: classes.selectRoot }
  }, options.map((name2) => /* @__PURE__ */ React59.createElement("option", {
    key: name2,
    value: name2
  }, name2))));
}
var ReCenterButton = ({
  setViewState,
  use3d,
  spatialHeight,
  spatialWidth,
  loader,
  modelMatrix
}) => /* @__PURE__ */ React59.createElement(Grid6, {
  item: true,
  xs: "auto",
  key: "recenter"
}, /* @__PURE__ */ React59.createElement(Button, {
  onClick: () => {
    const defaultViewState = getDefaultInitialViewState(loader.data, { height: spatialHeight, width: spatialWidth }, 1.5, use3d, new Matrix46(modelMatrix));
    setViewState(__spreadProps(__spreadValues({}, defaultViewState), {
      rotationX: 0,
      rotationOrbit: 0
    }));
  },
  disabled: !use3d,
  style: {
    padding: 0,
    marginBottom: 6
  }
}, "Re-Center"));
var VolumeOptions = ({
  handleSlicerSetting,
  handleRenderingModeChange,
  renderingMode,
  xSlice,
  ySlice,
  zSlice,
  use3d,
  loader,
  setViewState,
  spatialHeight,
  spatialWidth,
  modelMatrix
}) => /* @__PURE__ */ React59.createElement(React59.Fragment, null, /* @__PURE__ */ React59.createElement(RenderingModeSelect, {
  handleRenderingModeChange,
  renderingMode,
  use3d
}), /* @__PURE__ */ React59.createElement(Slicer, {
  xSlice,
  ySlice,
  zSlice,
  handleSlicerSetting,
  use3d,
  loader
}), /* @__PURE__ */ React59.createElement(ReCenterButton, {
  setViewState,
  use3d,
  spatialHeight,
  spatialWidth,
  loader,
  modelMatrix
}));
var VolumeOptions_default = VolumeOptions;

// src/components/layer-controller/LayerController.js
function TabPanel(props) {
  const _a2 = props, {
    children,
    value,
    index
  } = _a2, other = __objRest(_a2, [
    "children",
    "value",
    "index"
  ]);
  return /* @__PURE__ */ React60.createElement("div", __spreadValues({
    role: "tabpanel",
    hidden: value !== index,
    id: `simple-tabpanel-${index}`,
    "aria-labelledby": `simple-tab-${index}`
  }, other), value === index && children);
}
function getDomainsAndSliders(loader, selections, domainType, use3d) {
  return __async(this, null, function* () {
    let domains;
    const stats = yield getMultiSelectionStats({
      loader: loader.data,
      selections,
      use3d
    });
    const { sliders } = stats;
    if (domainType === "Min/Max") {
      domains = stats.domains;
    }
    if (domainType === "Full") {
      const source = getSourceFromLoader(loader);
      domains = selections.map(() => DOMAINS[source.dtype]);
    }
    return { domains, sliders };
  });
}
var buttonStyles = {
  borderStyle: "dashed",
  marginTop: "10px",
  fontWeight: 400
};
function LayerController(props) {
  var _a2;
  const {
    layer,
    name: name2,
    loader,
    theme,
    handleLayerRemove,
    handleLayerChange,
    shouldShowTransparentColor,
    shouldShowDomain,
    shouldShowColormap,
    ChannelController,
    setViewState,
    disable3d,
    setRasterLayerCallback,
    setAreLayerChannelsLoading,
    areLayerChannelsLoading,
    disabled,
    spatialHeight,
    spatialWidth,
    disableChannelsIfRgbDetected,
    shouldShowRemoveLayerButton
  } = props;
  const {
    colormap,
    opacity,
    channels: channels2,
    transparentColor,
    renderingMode,
    xSlice,
    ySlice,
    zSlice,
    resolution,
    use3d,
    modelMatrix
  } = layer;
  const channelRef = useRef8(channels2);
  useEffect18(() => {
    channelRef.current = channels2;
    return void 0;
  }, [channels2]);
  const firstSelection = ((_a2 = channels2[0]) == null ? void 0 : _a2.selection) || {};
  const { data, channels: channelOptions } = loader;
  const [tab, setTab] = useState18(0);
  const handleTabChange = (event, newTab) => {
    setTab(newTab);
  };
  const { labels, shape } = Array.isArray(data) ? data[data.length - 1] : data;
  const [domainType, setDomainType] = useState18(layer.domainType);
  const [isExpanded, setIsExpanded] = useState18(true);
  const [globalLabelValues, setGlobalLabelValues] = useState18(GLOBAL_LABELS.filter((field) => typeof firstSelection[field] === "number").reduce((o, key) => __spreadProps(__spreadValues({}, o), { [key]: firstSelection[key] }), {}));
  function setVisible(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { visible: v }));
  }
  function setColormap(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { colormap: v }));
  }
  function setOpacity(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { opacity: v }));
  }
  function setChannels(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { channels: v }));
  }
  function setTransparentColor(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { transparentColor: v }));
  }
  function setRenderingMode(v) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { renderingMode: v }));
  }
  function handleMultiPropertyChange(obj) {
    handleLayerChange(__spreadValues(__spreadValues({}, layer), obj));
  }
  function handleSlicerSetting(slice3, val) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { [`${slice3}Slice`]: val }));
  }
  function setChannelsAndDomainType(newChannels, newDomainType) {
    handleLayerChange(__spreadProps(__spreadValues({}, layer), {
      channels: newChannels,
      domainType: newDomainType
    }));
  }
  function setChannel(v, i) {
    const newChannels = [...channelRef.current];
    newChannels[i] = v;
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { channels: newChannels }));
  }
  function addChannel(v) {
    const newChannels = [...channelRef.current, v];
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { channels: newChannels }));
  }
  function removeChannel(i) {
    const newChannels = [...channelRef.current];
    newChannels.splice(i, 1);
    handleLayerChange(__spreadProps(__spreadValues({}, layer), { channels: newChannels }));
  }
  const setAreAllChannelsLoading = (val) => {
    const newAreLayerChannelsLoading = channelRef.current.map(() => val);
    setAreLayerChannelsLoading(newAreLayerChannelsLoading);
  };
  const handleChannelAdd = () => __async(this, null, function* () {
    const selection = {};
    labels.forEach((label) => {
      selection[label] = GLOBAL_LABELS.includes(label) ? globalLabelValues[label] || 0 : 0;
    });
    const { domains, sliders } = yield getDomainsAndSliders(loader, [selection], domainType, use3d);
    const domain = domains[0];
    const slider = domain;
    const color = [255, 255, 255];
    const visible2 = true;
    const newChannelId = channels2.length;
    const newAreLayerChannelsLoading = [...areLayerChannelsLoading];
    newAreLayerChannelsLoading[newChannelId] = true;
    setAreLayerChannelsLoading(newAreLayerChannelsLoading);
    const channel = {
      selection,
      slider,
      visible: visible2,
      color
    };
    setRasterLayerCallback(() => {
      setChannel(__spreadProps(__spreadValues({}, channel), { slider: sliders[0] }), newChannelId);
      const areLayerChannelsLoadingCallback = [...newAreLayerChannelsLoading];
      areLayerChannelsLoadingCallback[newChannelId] = false;
      setAreLayerChannelsLoading(areLayerChannelsLoadingCallback);
      setRasterLayerCallback(null);
    });
    addChannel(channel);
  });
  const handleDomainChange = (value) => __async(this, null, function* () {
    setDomainType(value);
    const selections = channels2.map((channel) => channel.selection);
    let sliders = channels2.map((channel) => channel.slider);
    const { domains } = yield getDomainsAndSliders(loader, selections, value, use3d);
    sliders = sliders.map((slider, i) => {
      const [left, right] = slider;
      return [Math.max(left, domains[i][0]), Math.min(right, domains[i][1])];
    });
    const newChannels = channels2.map((c, i) => __spreadProps(__spreadValues({}, c), { slider: sliders[i] }));
    setChannelsAndDomainType(newChannels, value);
  });
  const handleGlobalChannelsSelectionChange = (_0) => __async(this, [_0], function* ({ selection, event }) {
    const selections = channels2.map((channel) => __spreadValues(__spreadValues({}, channel.selection), selection));
    const canUpdateChannels = event.type === "mouseup" || event.type === "keydown";
    if (canUpdateChannels) {
      setAreAllChannelsLoading(true);
      getDomainsAndSliders(loader, selections, domainType, use3d).then(({ sliders }) => {
        const newChannelsWithSelection = channels2.map((c) => __spreadProps(__spreadValues({}, c), {
          selection: __spreadValues(__spreadValues({}, c.selection), selection)
        }));
        setRasterLayerCallback(() => {
          setRasterLayerCallback(null);
          setAreAllChannelsLoading(false);
          const newChannelsWithSliders = [...newChannelsWithSelection].map((c, i) => __spreadProps(__spreadValues({}, c), {
            slider: sliders[i]
          }));
          setChannels(newChannelsWithSliders);
        });
        setChannels(newChannelsWithSelection);
      });
    }
    setGlobalLabelValues((prev) => __spreadValues(__spreadValues({}, prev), selection));
  });
  let channelControllers = [];
  if (labels.length > 0) {
    const channelLabel = labels.find((c) => c === "channel" || c === "c") || labels[0];
    channelControllers = channels2.map((c, channelId) => {
      const setIsLoading = (val) => {
        const newAreLayerChannelsLoading = [...areLayerChannelsLoading];
        newAreLayerChannelsLoading[channelId] = val;
        setAreLayerChannelsLoading(newAreLayerChannelsLoading);
      };
      const handleChannelPropertyChange = (property, value) => {
        const update = { [property]: value };
        if (property === "selection") {
          setIsLoading(true);
          update.selection = __spreadValues(__spreadValues({}, globalLabelValues), update.selection);
          setChannel(__spreadValues(__spreadValues({}, c), update), channelId);
          setRasterLayerCallback(() => __async(this, null, function* () {
            const selections = [
              __spreadValues(__spreadValues({}, channels2[channelId][property]), value)
            ];
            const { sliders } = yield getDomainsAndSliders(loader, selections, domainType, use3d);
            [update.slider] = sliders;
            setChannel(__spreadValues(__spreadValues({}, c), update), channelId);
            setRasterLayerCallback(null);
            setIsLoading(false);
          }));
        } else {
          setChannel(__spreadValues(__spreadValues({}, c), update), channelId);
        }
      };
      const handleChannelRemove = () => {
        removeChannel(channelId);
      };
      const handleIQRUpdate = () => __async(this, null, function* () {
        const { data: loaderData } = loader;
        const source = Array.isArray(loaderData) ? loaderData[loaderData.length - 1] : loaderData;
        const raster = yield source.getRaster({
          selection: channels2[channelId].selection
        });
        const stats = getChannelStats(raster.data);
        const { q1, q3 } = stats;
        setChannel(__spreadProps(__spreadValues({}, c), { slider: [q1, q3] }), channelId);
      });
      return /* @__PURE__ */ React60.createElement(ChannelController, {
        key: `channel-controller-${channelId}`,
        dimName: channelLabel,
        visibility: c.visible,
        selectionIndex: c.selection[channelLabel],
        slider: c.slider,
        color: c.color,
        channels: channels2,
        channelId,
        domainType,
        loader,
        globalLabelValues,
        theme,
        channelOptions,
        colormapOn: Boolean(colormap),
        handlePropertyChange: handleChannelPropertyChange,
        handleChannelRemove,
        handleIQRUpdate,
        setRasterLayerCallback,
        isLoading: areLayerChannelsLoading[channelId],
        use3d
      });
    });
  }
  const controllerSectionClasses = useControllerSectionStyles();
  const { visible } = layer;
  const visibleSetting = typeof visible === "boolean" ? visible : true;
  const Visibility = visibleSetting ? VisibilityIcon : VisibilityOffIcon;
  const hasViewableResolutions = Boolean(Array.from({
    length: loader.data.length
  }).filter((_, res) => canLoadResolution(loader.data, res)).length);
  const useVolumeTabs = !disable3d && shape[labels.indexOf("z")] > 1 && hasViewableResolutions;
  const FullController = /* @__PURE__ */ React60.createElement(React60.Fragment, null, /* @__PURE__ */ React60.createElement(LayerOptions_default, {
    channels: channels2,
    opacity,
    colormap,
    transparentColor,
    domainType,
    globalControlLabels: labels.filter((label) => GLOBAL_LABELS.includes(label)),
    globalLabelValues,
    handleOpacityChange: setOpacity,
    handleColormapChange: setColormap,
    handleGlobalChannelsSelectionChange,
    handleTransparentColorChange: setTransparentColor,
    disableChannelsIfRgbDetected: isRgb(loader) && disableChannelsIfRgbDetected,
    handleDomainChange,
    shouldShowTransparentColor,
    shouldShowDomain,
    shouldShowColormap,
    use3d,
    loader,
    handleMultiPropertyChange,
    resolution,
    disable3d,
    setRasterLayerCallback,
    setAreAllChannelsLoading,
    setViewState,
    spatialHeight,
    spatialWidth,
    modelMatrix
  }), isRgb(loader) && disableChannelsIfRgbDetected ? null : channelControllers, isRgb(loader) && disableChannelsIfRgbDetected ? null : /* @__PURE__ */ React60.createElement(Button2, {
    disabled: channels2.length === MAX_CHANNELS,
    onClick: handleChannelAdd,
    fullWidth: true,
    variant: "outlined",
    style: buttonStyles,
    startIcon: /* @__PURE__ */ React60.createElement(AddIcon, null),
    size: "small"
  }, "Add Channel"));
  return /* @__PURE__ */ React60.createElement(ExpansionPanel, {
    className: controllerSectionClasses.root,
    onChange: (e, expanded) => {
      var _a3, _b2, _c;
      return !disabled && setIsExpanded(expanded && ((_c = (_b2 = (_a3 = e == null ? void 0 : e.target) == null ? void 0 : _a3.attributes) == null ? void 0 : _b2.role) == null ? void 0 : _c.value) === "presentation");
    },
    TransitionProps: { enter: false },
    expanded: !disabled && isExpanded
  }, /* @__PURE__ */ React60.createElement(StyledExpansionPanelSummary, {
    expandIcon: /* @__PURE__ */ React60.createElement(ExpandMoreIcon, null),
    "aria-controls": `layer-${name2}-controls`
  }, /* @__PURE__ */ React60.createElement(Grid7, {
    container: true,
    direction: "column",
    m: 1,
    justify: "center"
  }, /* @__PURE__ */ React60.createElement(OverflowEllipsisGrid, {
    item: true
  }, /* @__PURE__ */ React60.createElement(Button2, {
    onClick: (e) => {
      if (!disabled) {
        e.stopPropagation();
        const nextVisible = typeof visible === "boolean" ? !visible : false;
        setVisible(nextVisible);
      }
    },
    style: {
      marginRight: 8,
      marginBottom: 2,
      padding: 0,
      minWidth: 0
    }
  }, /* @__PURE__ */ React60.createElement(Visibility, null)), name2), !disabled && !isExpanded && !use3d && /* @__PURE__ */ React60.createElement(Grid7, {
    container: true,
    direction: "row",
    alignItems: "center",
    justify: "center"
  }, /* @__PURE__ */ React60.createElement(Grid7, {
    item: true,
    xs: 6
  }, /* @__PURE__ */ React60.createElement(StyledInputLabel, {
    htmlFor: `layer-${name2}-opacity-closed`
  }, "Opacity:")), /* @__PURE__ */ React60.createElement(Grid7, {
    item: true,
    xs: 6
  }, /* @__PURE__ */ React60.createElement(Slider9, {
    id: `layer-${name2}-opacity-closed`,
    value: opacity,
    onChange: (e, v) => setOpacity(v),
    valueLabelDisplay: "auto",
    getAriaLabel: () => "opacity slider",
    min: 0,
    max: 1,
    step: 0.01,
    orientation: "horizontal"
  }))))), /* @__PURE__ */ React60.createElement(StyledExpansionPanelDetails, null, useVolumeTabs ? /* @__PURE__ */ React60.createElement(React60.Fragment, null, /* @__PURE__ */ React60.createElement(Tabs, {
    value: tab,
    onChange: handleTabChange,
    "aria-label": "simple tabs example",
    style: { height: "24px", minHeight: "24px" }
  }, /* @__PURE__ */ React60.createElement(Tab, {
    label: "Channels",
    style: {
      fontSize: ".75rem",
      bottom: 12,
      width: "50%",
      minWidth: "50%"
    },
    disableRipple: true
  }), /* @__PURE__ */ React60.createElement(Tab, {
    label: "Volume",
    style: {
      fontSize: ".75rem",
      bottom: 12,
      width: "50%",
      minWidth: "50%"
    }
  })), /* @__PURE__ */ React60.createElement(TabPanel, {
    value: tab,
    index: 0
  }, FullController), /* @__PURE__ */ React60.createElement(TabPanel, {
    value: tab,
    index: 1,
    style: { marginTop: 4 }
  }, /* @__PURE__ */ React60.createElement(VolumeOptions_default, {
    loader,
    handleSlicerSetting,
    handleRenderingModeChange: setRenderingMode,
    renderingMode,
    xSlice,
    ySlice,
    zSlice,
    use3d,
    setViewState,
    spatialHeight,
    spatialWidth,
    modelMatrix
  }))) : FullController, shouldShowRemoveLayerButton ? /* @__PURE__ */ React60.createElement(Button2, {
    onClick: handleLayerRemove,
    fullWidth: true,
    variant: "outlined",
    style: buttonStyles,
    size: "small"
  }, "Remove Image Layer") : null));
}

// src/components/layer-controller/ImageAddButton.js
import React61, { useState as useState19 } from "react";
import { makeStyles as makeStyles10 } from "@material-ui/core/styles";
import AddIcon2 from "@material-ui/icons/Add";
import MenuItem3 from "@material-ui/core/MenuItem";
var useStyles5 = makeStyles10(() => ({
  addButton: {
    marginTop: "10px",
    marginBottom: "10px",
    fontWeight: 400
  }
}));
function ImageAddIcon() {
  return /* @__PURE__ */ React61.createElement(React61.Fragment, null, /* @__PURE__ */ React61.createElement(AddIcon2, null), "Add Image Layer");
}
function ImageAddButton({ imageOptions, handleImageAdd }) {
  const [open, setOpen] = useState19(false);
  const classes = useStyles5();
  const handleAdd = (imgData) => {
    setOpen((prev) => !prev);
    handleImageAdd(imgData);
  };
  if (!imageOptions)
    return null;
  return /* @__PURE__ */ React61.createElement(PopperMenu, {
    open,
    setOpen,
    buttonIcon: /* @__PURE__ */ React61.createElement(ImageAddIcon, null),
    buttonClassName: classes.addButton
  }, imageOptions.map((imgData, i) => /* @__PURE__ */ React61.createElement(MenuItem3, {
    dense: true,
    key: imgData.name,
    onClick: () => handleAdd(i)
  }, /* @__PURE__ */ React61.createElement("span", null, imgData.name))));
}
var ImageAddButton_default = ImageAddButton;

// src/components/layer-controller/LayerControllerSubscriber.js
var LAYER_CONTROLLER_DATA_TYPES = ["raster"];
var LayerControllerMemoized = React62.memo(forwardRef4((props, ref) => {
  const {
    title: title16,
    removeGridComponent,
    theme,
    isReady,
    moleculesLayer,
    dataset,
    setMoleculesLayer,
    cellsLayer,
    canShowCellVecmask,
    setCellsLayer,
    rasterLayers,
    imageLayerLoaders,
    imageLayerMeta,
    rasterLayersCallbacks,
    setRasterLayersCallbacks,
    areLoadingRasterChannnels,
    setAreLoadingRasterChannnels,
    handleRasterLayerChange,
    handleRasterLayerRemove,
    disable3d,
    globalDisable3d,
    disableChannelsIfRgbDetected,
    layerIs3DIndex,
    setZoom,
    setTargetX,
    setTargetY,
    setTargetZ,
    setRotationX,
    setRotationOrbit,
    componentHeight,
    componentWidth,
    spatialLayout,
    handleImageAdd,
    enableLayerButtonsWithOneLayer
  } = props;
  const shouldShowImageLayerButton = Boolean(enableLayerButtonsWithOneLayer || (imageLayerLoaders == null ? void 0 : imageLayerLoaders.length) > 1);
  return /* @__PURE__ */ React62.createElement(TitleInfo, {
    title: title16,
    isScroll: true,
    removeGridComponent,
    theme,
    isReady
  }, /* @__PURE__ */ React62.createElement("div", {
    className: "layer-controller-container",
    ref
  }, moleculesLayer && /* @__PURE__ */ React62.createElement(VectorLayerController, {
    key: `${dataset}-molecules`,
    label: "Molecules",
    layerType: "molecules",
    layer: moleculesLayer,
    handleLayerChange: setMoleculesLayer
  }), cellsLayer && canShowCellVecmask && /* @__PURE__ */ React62.createElement(VectorLayerController, {
    key: `${dataset}-cells`,
    label: "Cell Segmentations",
    layerType: "cells",
    layer: cellsLayer,
    handleLayerChange: setCellsLayer
  }), rasterLayers && rasterLayers.map((layer, i) => {
    var _a2;
    const { index } = layer;
    const loader = imageLayerLoaders[index];
    const layerMeta = imageLayerMeta[index];
    const isRaster = !((_a2 = layerMeta == null ? void 0 : layerMeta.metadata) == null ? void 0 : _a2.isBitmask);
    const ChannelController = isRaster ? RasterChannelController_default : BitmaskChannelController_default;
    const setRasterLayerCallback = (cb) => {
      const newRasterLayersCallbacks = [
        ...rasterLayersCallbacks || []
      ];
      newRasterLayersCallbacks[i] = cb;
      setRasterLayersCallbacks(newRasterLayersCallbacks);
    };
    const areLayerChannelsLoading = (areLoadingRasterChannnels || [])[i] || [];
    const setAreLayerChannelsLoading = (v) => {
      const newAreLoadingRasterChannnels = [
        ...areLoadingRasterChannnels || []
      ];
      newAreLoadingRasterChannnels[i] = v;
      setAreLoadingRasterChannnels(newAreLoadingRasterChannnels);
    };
    return loader && layerMeta ? /* @__PURE__ */ React62.createElement(Grid8, {
      key: `${dataset}-raster-${index}-${i}`,
      item: true,
      style: { marginTop: "10px" }
    }, /* @__PURE__ */ React62.createElement(LayerController, {
      name: layerMeta.name,
      layer,
      loader,
      theme,
      handleLayerChange: (v) => handleRasterLayerChange(v, i),
      handleLayerRemove: () => handleRasterLayerRemove(i),
      ChannelController,
      shouldShowTransparentColor: isRaster,
      shouldShowDomain: isRaster,
      shouldShowColormap: isRaster,
      disable3d: globalDisable3d || (disable3d || []).indexOf(layerMeta.name) >= 0 || typeof layerIs3DIndex === "number" && layerIs3DIndex !== -1 && layerIs3DIndex !== i,
      disabled: typeof layerIs3DIndex === "number" && layerIs3DIndex !== -1 && layerIs3DIndex !== i,
      disableChannelsIfRgbDetected,
      rasterLayersCallbacks,
      setRasterLayerCallback,
      setViewState: ({
        zoom: newZoom,
        target,
        rotationX: newRotationX,
        rotationOrbit: newRotationOrbit
      }) => {
        setZoom(newZoom);
        setTargetX(target[0]);
        setTargetY(target[1]);
        setTargetZ(target[2]);
        setRotationX(newRotationX);
        setRotationOrbit(newRotationOrbit);
      },
      setAreLayerChannelsLoading,
      areLayerChannelsLoading,
      spatialHeight: componentHeight * (spatialLayout ? spatialLayout.h : 1) / 12,
      spatialWidth: componentWidth * (spatialLayout ? spatialLayout.w : 1) / 12,
      shouldShowRemoveLayerButton: shouldShowImageLayerButton
    })) : null;
  }), shouldShowImageLayerButton ? /* @__PURE__ */ React62.createElement(Grid8, {
    item: true
  }, /* @__PURE__ */ React62.createElement(ImageAddButton_default, {
    imageOptions: imageLayerMeta,
    handleImageAdd
  })) : null));
}));
function LayerControllerSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme,
    title: title16 = "Spatial Layers",
    disable3d,
    globalDisable3d,
    disableChannelsIfRgbDetected,
    enableLayerButtonsWithOneLayer
  } = props;
  const loaders = useLoaders();
  const [
    {
      dataset,
      spatialRasterLayers: rasterLayers,
      spatialCellsLayer: cellsLayer,
      spatialMoleculesLayer: moleculesLayer
    },
    {
      setSpatialRasterLayers: setRasterLayers,
      setSpatialCellsLayer: setCellsLayer,
      setSpatialMoleculesLayer: setMoleculesLayer,
      setSpatialTargetX: setTargetX,
      setSpatialTargetY: setTargetY,
      setSpatialTargetZ: setTargetZ,
      setSpatialRotationX: setRotationX,
      setSpatialRotationOrbit: setRotationOrbit,
      setSpatialZoom: setZoom
    }
  ] = useCoordination(COMPONENT_COORDINATION_TYPES.layerController, coordinationScopes);
  const [
    {
      rasterLayersCallbacks,
      areLoadingRasterChannnels
    },
    {
      setRasterLayersCallbacks,
      setAreLoadingRasterChannnels
    }
  ] = useAuxiliaryCoordination(COMPONENT_COORDINATION_TYPES.layerController, coordinationScopes);
  const [spatialLayout] = useComponentLayout("spatial", ["spatialRasterLayers"], coordinationScopes);
  const layerControllerRef = useRef9();
  const [componentWidth, componentHeight] = useClosestVitessceContainerSize(layerControllerRef);
  const { height: windowHeight, width: windowWidth } = useWindowDimensions();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(LAYER_CONTROLLER_DATA_TYPES);
  useEffect19(() => {
    resetReadyItems();
  }, [loaders, dataset]);
  const [raster, imageLayerLoaders, imageLayerMeta] = useRasterData(loaders, dataset, setItemIsReady, () => {
  }, false, { setSpatialRasterLayers: setRasterLayers }, { spatialRasterLayers: rasterLayers });
  useCellsData(loaders, dataset, setItemIsReady, () => {
  }, false, { setSpatialCellsLayer: setCellsLayer }, { spatialCellsLayer: cellsLayer });
  useMoleculesData(loaders, dataset, setItemIsReady, () => {
  }, false, { setSpatialMoleculesLayer: setMoleculesLayer }, { spatialMoleculesLayer: moleculesLayer });
  const handleImageAdd = useCallback13((index) => __async(this, null, function* () {
    var _a2, _b2, _c, _d, _e;
    const loader = imageLayerLoaders[index];
    const newChannels = yield initializeLayerChannels(loader, (rasterLayers[index] || {}).use3d);
    const newLayer = __spreadProps(__spreadValues({
      index,
      modelMatrix: (_c = (_b2 = (_a2 = imageLayerMeta[index]) == null ? void 0 : _a2.metadata) == null ? void 0 : _b2.transform) == null ? void 0 : _c.matrix
    }, DEFAULT_RASTER_LAYER_PROPS), {
      channels: newChannels,
      type: ((_e = (_d = imageLayerMeta[index]) == null ? void 0 : _d.metadata) == null ? void 0 : _e.isBitmask) ? "bitmask" : "raster"
    });
    const newLayers = [...rasterLayers, newLayer];
    setRasterLayers(newLayers);
  }), [imageLayerLoaders, imageLayerMeta, rasterLayers, setRasterLayers]);
  const handleRasterLayerChange = useCallback13((newLayer, i) => {
    const newLayers = [...rasterLayers];
    newLayers[i] = newLayer;
    setRasterLayers(newLayers);
  }, [rasterLayers, setRasterLayers]);
  const handleRasterLayerRemove = useCallback13((i) => {
    const newLayers = [...rasterLayers];
    newLayers.splice(i, 1);
    setRasterLayers(newLayers);
  }, [rasterLayers, setRasterLayers]);
  const hasNoBitmask = (imageLayerMeta.length ? imageLayerMeta : [{ metadata: { isBitmask: true } }]).every((l) => {
    var _a2;
    return !((_a2 = l == null ? void 0 : l.metadata) == null ? void 0 : _a2.isBitmask);
  });
  const canShowCellVecmask = hasNoBitmask;
  const layerIs3DIndex = (rasterLayers == null ? void 0 : rasterLayers.findIndex) && rasterLayers.findIndex((layer) => layer.use3d);
  return /* @__PURE__ */ React62.createElement(LayerControllerMemoized, {
    ref: layerControllerRef,
    title: title16,
    removeGridComponent,
    theme,
    isReady,
    moleculesLayer,
    dataset,
    setMoleculesLayer,
    cellsLayer,
    canShowCellVecmask,
    setCellsLayer,
    rasterLayers,
    imageLayerLoaders,
    imageLayerMeta,
    rasterLayersCallbacks,
    setRasterLayersCallbacks,
    areLoadingRasterChannnels,
    setAreLoadingRasterChannnels,
    handleRasterLayerChange,
    handleRasterLayerRemove,
    disable3d,
    globalDisable3d,
    layerIs3DIndex,
    disableChannelsIfRgbDetected,
    enableLayerButtonsWithOneLayer,
    setZoom,
    setTargetX,
    setTargetY,
    setTargetZ,
    setRotationX,
    setRotationOrbit,
    componentHeight: componentHeight || windowHeight,
    componentWidth: componentWidth || windowWidth,
    spatialLayout,
    handleImageAdd
  });
}
var LayerControllerSubscriber_default = LayerControllerSubscriber;

// src/components/higlass/HiGlassSubscriber.js
import React64 from "react";

// src/components/higlass/HiGlassLazy.js
import React63, {
  useMemo as useMemo11,
  useEffect as useEffect20,
  useRef as useRef10,
  Suspense,
  useState as useState20
} from "react";
import ReactDOM from "react-dom";
import dynamicImportPolyfill from "dynamic-import-polyfill";
import register from "higlass-register";
import { ZarrMultivecDataFetcher } from "higlass-zarr-datafetchers";
var PIXI_BUNDLE_VERSION = package_default.dependencies["window-pixi"];
var HIGLASS_BUNDLE_VERSION = package_default.dependencies.higlass;
var BUNDLE_FILE_EXT = true ? "js" : "min.js";
var PIXI_BUNDLE_URL = `https://unpkg.com/window-pixi@${PIXI_BUNDLE_VERSION}/dist/pixi.${BUNDLE_FILE_EXT}`;
var HIGLASS_BUNDLE_URL = `https://unpkg.com/higlass@${HIGLASS_BUNDLE_VERSION}/dist/hglib.${BUNDLE_FILE_EXT}`;
dynamicImportPolyfill.initialize();
register({ dataFetcher: ZarrMultivecDataFetcher, config: ZarrMultivecDataFetcher.config }, { pluginType: "dataFetcher" });
var HiGlassComponent = React63.lazy(() => {
  if (!window.React) {
    window.React = React63;
  }
  if (!window.ReactDOM) {
    window.ReactDOM = ReactDOM;
  }
  return new Promise((resolve) => {
    const handleImportError = (e) => {
      console.warn(e);
      resolve(asEsModule(createWarningComponent({
        title: "Could not load HiGlass",
        message: "The HiGlass scripts could not be dynamically imported."
      })));
    };
    __import__(PIXI_BUNDLE_URL).then(() => {
      __import__(HIGLASS_BUNDLE_URL).then(() => {
        resolve(asEsModule(window.hglib.HiGlassComponent));
      }).catch(handleImportError);
    }).catch(handleImportError);
  });
});
var HG_SIZE = 800;
function HiGlassLazy(props) {
  const {
    coordinationScopes,
    theme,
    hgViewConfig: hgViewConfigProp,
    hgOptions: hgOptionsProp,
    genomeSize,
    height
  } = props;
  const [{
    genomicZoomX,
    genomicZoomY,
    genomicTargetX,
    genomicTargetY
  }, {
    setGenomicZoomX,
    setGenomicZoomY,
    setGenomicTargetX,
    setGenomicTargetY
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.higlass, coordinationScopes);
  const [width, computedHeight, containerRef] = useGridItemSize();
  const [hgInstance, setHgInstance] = useState20();
  const isActiveRef = useRef10();
  const hgOptions = useMemo11(() => __spreadProps(__spreadValues({}, hgOptionsProp), {
    theme
  }), [hgOptionsProp, theme]);
  const hgViewConfig = useMemo11(() => {
    const centerX = genomicTargetX;
    const genomesPerUnitX = genomeSize / __pow(2, genomicZoomX);
    const unitX = width / HG_SIZE;
    const initialXDomain = [
      centerX - genomesPerUnitX * unitX / 2,
      centerX + genomesPerUnitX * unitX / 2
    ];
    const centerY = genomicTargetY;
    const genomesPerUnitY = genomeSize / __pow(2, genomicZoomY);
    const unitY = height / HG_SIZE;
    const initialYDomain = [
      centerY - genomesPerUnitY * unitY / 2,
      centerY + genomesPerUnitY * unitY / 2
    ];
    return {
      editable: false,
      zoomFixed: false,
      trackSourceServers: [
        "//higlass.io/api/v1"
      ],
      exportViewUrl: "//higlass.io/api/v1/viewconfs",
      views: [
        __spreadProps(__spreadValues({
          uid: "main"
        }, hgViewConfigProp), {
          initialXDomain,
          initialYDomain
        })
      ],
      zoomLocks: {
        locksByViewUid: {},
        locksDict: {}
      },
      locationLocks: {
        locksByViewUid: {},
        locksDict: {}
      },
      valueScaleLocks: {
        locksByViewUid: {},
        locksDict: {}
      }
    };
  }, [
    genomicTargetX,
    genomeSize,
    genomicZoomX,
    width,
    genomicTargetY,
    genomicZoomY,
    height,
    hgViewConfigProp
  ]);
  useEffect20(() => {
    const handleMouseEnter = () => {
      isActiveRef.current = true;
    };
    const handleMouseLeave = () => {
      isActiveRef.current = false;
    };
    const container = containerRef.current;
    container.addEventListener("mouseenter", handleMouseEnter);
    container.addEventListener("mouseleave", handleMouseLeave);
    return () => {
      container.removeEventListener("mouseenter", handleMouseEnter);
      container.removeEventListener("mouseenter", handleMouseLeave);
    };
  }, [containerRef]);
  useEffect20(() => {
    if (!hgInstance) {
      return () => {
      };
    }
    hgInstance.api.on("viewConfig", (viewConfigString) => {
      if (!isActiveRef.current) {
        return;
      }
      const viewConfig = JSON.parse(viewConfigString);
      const xDomain = viewConfig.views[0].initialXDomain;
      const yDomain = viewConfig.views[0].initialYDomain;
      const nextGenomicZoomX = Math.log2(genomeSize / ((xDomain[1] - xDomain[0]) * (HG_SIZE / width)));
      const nextGenomicZoomY = Math.log2(genomeSize / ((yDomain[1] - yDomain[0]) * (HG_SIZE / height)));
      const nextGenomicTargetX = xDomain[0] + (xDomain[1] - xDomain[0]) / 2;
      const nextGenomicTargetY = yDomain[0] + (yDomain[1] - yDomain[0]) / 2;
      setGenomicZoomX(nextGenomicZoomX);
      setGenomicZoomY(nextGenomicZoomY);
      setGenomicTargetX(nextGenomicTargetX);
      setGenomicTargetY(nextGenomicTargetY);
    });
    return () => hgInstance.api.off("viewConfig");
  }, [
    hgInstance,
    genomeSize,
    width,
    height,
    setGenomicZoomX,
    setGenomicZoomY,
    setGenomicTargetX,
    setGenomicTargetY
  ]);
  return /* @__PURE__ */ React63.createElement("div", {
    className: "higlass-wrapper-parent"
  }, /* @__PURE__ */ React63.createElement("div", {
    className: "higlass-wrapper",
    ref: containerRef,
    style: { height: `${height}px` }
  }, /* @__PURE__ */ React63.createElement(Suspense, {
    fallback: /* @__PURE__ */ React63.createElement("div", null, "Loading...")
  }, /* @__PURE__ */ React63.createElement(HiGlassComponent, {
    ref: setHgInstance,
    zoomFixed: false,
    viewConfig: hgViewConfig,
    options: hgOptions
  }))));
}
HiGlassLazy.defaultProps = {
  hgOptions: {
    bounded: true,
    pixelPreciseMarginPadding: true,
    containerPaddingX: 0,
    containerPaddingY: 0,
    sizeMode: "default"
  },
  genomeSize: 31e8
};

// src/components/higlass/HiGlassSubscriber.js
var HIGLASS_DATA_TYPES = [];
function HiGlassSubscriber(props) {
  const {
    coordinationScopes,
    theme,
    hgViewConfig,
    removeGridComponent
  } = props;
  const [width, height, containerRef] = useGridItemSize();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(HIGLASS_DATA_TYPES);
  const [urls, addUrl, resetUrls] = useUrls();
  return /* @__PURE__ */ React64.createElement("div", {
    className: "higlass-title-wrapper"
  }, /* @__PURE__ */ React64.createElement(TitleInfo, {
    title: "HiGlass",
    removeGridComponent,
    theme,
    isReady,
    urls
  }, /* @__PURE__ */ React64.createElement("div", {
    className: "higlass-lazy-wrapper",
    ref: containerRef
  }, /* @__PURE__ */ React64.createElement(HiGlassLazy, {
    coordinationScopes,
    theme,
    hgViewConfig,
    height
  }))));
}

// src/components/sets/CellSetSizesPlotSubscriber.js
import React67, { useMemo as useMemo13, useEffect as useEffect21 } from "react";

// src/components/sets/CellSetSizesPlot.js
import React66 from "react";
import clamp4 from "lodash/clamp";

// src/components/vega/VegaPlot.js
import React65, { Suspense as Suspense2, useMemo as useMemo12 } from "react";
import { Handler } from "vega-tooltip";

// src/components/vega/ReactVega.js
import { Vega } from "react-vega";

// src/components/vega/VegaPlot.js
var DATASET_NAME = "table";
function isVega(spec) {
  return spec.$schema === "https://vega.github.io/schema/vega/v5.json";
}
function VegaPlot(props) {
  const {
    spec: partialSpec,
    data,
    signalListeners
  } = props;
  const spec = __spreadProps(__spreadValues({}, partialSpec), {
    data: isVega(partialSpec) ? [
      { name: DATASET_NAME },
      ...partialSpec.data
    ] : { name: DATASET_NAME }
  });
  const vegaComponent = useMemo12(() => /* @__PURE__ */ React65.createElement(Vega, {
    spec,
    data: {
      [DATASET_NAME]: data
    },
    signalListeners,
    tooltip: new Handler().call,
    renderer: "canvas",
    scaleFactor: 3
  }), [spec, data, signalListeners]);
  return spec && data && data.length > 0 ? /* @__PURE__ */ React65.createElement(Suspense2, {
    fallback: /* @__PURE__ */ React65.createElement("div", null, "Loading...")
  }, vegaComponent) : null;
}

// src/components/vega/utils.js
var VEGA_THEMES = {
  dark: {
    background: null,
    title: { color: "#fff" },
    style: {
      "guide-label": {
        fill: "#fff"
      },
      "guide-title": {
        fill: "#fff"
      }
    },
    axis: {
      domainColor: "#fff",
      gridColor: "#888",
      tickColor: "#fff"
    }
  },
  light: {
    background: null
  }
};

// src/components/sets/CellSetSizesPlot.js
function CellSetSizesPlot(props) {
  const {
    data: rawData,
    theme,
    width,
    height,
    marginRight = 90,
    marginBottom = 120,
    keyLength = 36
  } = props;
  const data = rawData.map((d) => __spreadProps(__spreadValues({}, d), {
    keyName: d.key + d.name,
    colorString: colorArrayToString(d.color)
  }));
  const colors = {
    domain: data.map((d) => d.key),
    range: data.map((d) => d.colorString)
  };
  const keys = data.map((d) => d.keyName);
  const spec = {
    mark: { type: "bar" },
    encoding: {
      x: {
        field: "keyName",
        type: "nominal",
        axis: { labelExpr: `substring(datum.label, ${keyLength})` },
        title: "Cell Set",
        sort: keys
      },
      y: {
        field: "size",
        type: "quantitative",
        title: "Cell Set Size"
      },
      color: {
        field: "key",
        type: "nominal",
        scale: colors,
        legend: null
      },
      tooltip: {
        field: "size",
        type: "quantitative"
      }
    },
    width: clamp4(width - marginRight, 10, Infinity),
    height: clamp4(height - marginBottom, 10, Infinity),
    config: VEGA_THEMES[theme]
  };
  return /* @__PURE__ */ React66.createElement(VegaPlot, {
    data,
    spec
  });
}

// src/components/sets/CellSetSizesPlotSubscriber.js
var CELL_SET_SIZES_DATA_TYPES = ["cell-sets"];
function CellSetSizesPlotSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme,
    title: title16 = "Cell Set Sizes"
  } = props;
  const loaders = useLoaders();
  const [{
    dataset,
    cellSetSelection,
    cellSetColor,
    additionalCellSets
  }, {
    setCellSetSelection,
    setCellSetColor
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSetSizes, coordinationScopes);
  const [width, height, containerRef] = useGridItemSize();
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(CELL_SET_SIZES_DATA_TYPES);
  useEffect21(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, true, { setCellSetSelection, setCellSetColor }, { cellSetSelection, cellSetColor });
  const mergedCellSets = useMemo13(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const data = useMemo13(() => mergedCellSets && cellSetSelection && cellSetColor ? treeToSetSizesBySetNames(mergedCellSets, cellSetSelection, cellSetColor, theme) : [], [mergedCellSets, cellSetSelection, cellSetColor, theme]);
  return /* @__PURE__ */ React67.createElement(TitleInfo, {
    title: title16,
    removeGridComponent,
    urls,
    theme,
    isReady
  }, /* @__PURE__ */ React67.createElement("div", {
    ref: containerRef,
    className: "vega-container"
  }, /* @__PURE__ */ React67.createElement(CellSetSizesPlot, {
    data,
    theme,
    width,
    height
  })));
}

// src/components/higlass/GenomicProfilesSubscriber.js
import React68, {
  useMemo as useMemo14,
  useEffect as useEffect22
} from "react";
import isEqual13 from "lodash/isEqual";
import { sum as sum2 } from "d3-array";
var GENOMIC_PROFILES_DATA_TYPES = ["genomic-profiles"];
var REFERENCE_TILESETS = {
  hg38: {
    chromosomes: "NyITQvZsS_mOFNlz5C2LJg",
    genes: "P0PLbQMwTYGy-5uPIQid7A"
  },
  hg19: {
    chromosomes: "N12wVGG9SPiTkk03yUayUw",
    genes: "OHJakQICQD6gTD7skx4EWA"
  },
  mm9: {
    chromosomes: "WAVhNHYxQVueq6KulwgWiQ",
    genes: "GUm5aBiLRCyz2PsBea7Yzg"
  },
  mm10: {
    chromosomes: "EtrWT0VtScixmsmwFSd7zg",
    genes: "QDutvmyiSrec5nX4pA5WGQ"
  }
};
function GenomicProfilesSubscriber(props) {
  const {
    coordinationScopes,
    theme,
    removeGridComponent,
    profileTrackUidKey = "path",
    profileTrackNameKey = null,
    higlassServer = "https://higlass.io/api/v1",
    assembly = "hg38",
    title: title16 = "Genomic Profiles"
  } = props;
  const [width, height, containerRef] = useGridItemSize();
  const loaders = useLoaders();
  const [{
    dataset,
    cellSetColor,
    cellSetSelection
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.genomicProfiles, coordinationScopes);
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(GENOMIC_PROFILES_DATA_TYPES);
  const [urls, addUrl, resetUrls] = useUrls();
  const [genomicProfilesAttrs] = useGenomicProfilesData(loaders, dataset, setItemIsReady, addUrl, true);
  const hgViewConfig = useMemo14(() => {
    if (!genomicProfilesAttrs || urls.length !== 1) {
      return null;
    }
    const { url } = urls[0];
    const foregroundColor = theme === "dark" ? "#C0C0C0" : "#000000";
    const backgroundColor = theme === "dark" ? "#000000" : "#f1f1f1";
    const dimColor = theme === "dark" ? "dimgray" : "silver";
    const referenceTracks = [
      {
        type: "horizontal-chromosome-labels",
        server: higlassServer,
        tilesetUid: REFERENCE_TILESETS[assembly].chromosomes,
        uid: "chromosome-labels",
        options: {
          color: foregroundColor,
          fontSize: 12,
          fontIsLeftAligned: false,
          showMousePosition: true,
          mousePositionColor: foregroundColor
        },
        height: 30
      },
      {
        type: "horizontal-gene-annotations",
        server: higlassServer,
        tilesetUid: REFERENCE_TILESETS[assembly].genes,
        uid: "gene-annotations",
        options: {
          name: "Gene Annotations (hg38)",
          fontSize: 10,
          labelPosition: "hidden",
          labelLeftMargin: 0,
          labelRightMargin: 0,
          labelTopMargin: 0,
          labelBottomMargin: 0,
          minHeight: 24,
          geneAnnotationHeight: 16,
          geneLabelPosition: "outside",
          geneStrandSpacing: 4,
          showMousePosition: true,
          mousePositionColor: foregroundColor,
          plusStrandColor: foregroundColor,
          minusStrandColor: foregroundColor,
          labelColor: "black",
          labelBackgroundColor: backgroundColor,
          trackBorderWidth: 0,
          trackBorderColor: "black"
        },
        height: 70
      }
    ];
    const referenceTracksHeightSum = sum2(referenceTracks.map((t) => t.height));
    const profileTracksHeightSum = height - referenceTracksHeightSum - 10;
    const profileTrackHeight = profileTracksHeightSum / genomicProfilesAttrs.row_infos.length;
    const profileTracks = genomicProfilesAttrs.row_infos.map((rowInfo, i) => {
      var _a2;
      const trackUid = rowInfo[profileTrackUidKey];
      const isPath = Array.isArray(trackUid);
      const trackName = profileTrackNameKey ? rowInfo[profileTrackNameKey] : isPath ? trackUid[trackUid.length - 1] : trackUid;
      const setInSelection = isPath ? cellSetSelection == null ? void 0 : cellSetSelection.find((s) => isEqual13(s, trackUid)) : false;
      const setColor = isPath ? (_a2 = cellSetColor == null ? void 0 : cellSetColor.find((s) => isEqual13(s.path, trackUid))) == null ? void 0 : _a2.color : null;
      const trackUidString = isPath ? trackUid.join("__") : trackUid;
      const track = {
        type: "horizontal-bar",
        uid: `bar-track-${trackUidString}`,
        data: {
          type: "zarr-multivec",
          url,
          row: i
        },
        options: {
          name: trackName,
          showMousePosition: true,
          mousePositionColor: foregroundColor,
          labelColor: theme === "dark" ? "white" : "black",
          labelBackgroundColor: theme === "dark" ? "black" : "white",
          labelShowAssembly: false
        },
        height: profileTrackHeight
      };
      if (setColor && setInSelection) {
        const c = setColor;
        track.options.barFillColor = `rgb(${c[0]},${c[1]},${c[2]})`;
      } else {
        track.options.barFillColor = dimColor;
      }
      return track;
    });
    const hgView = {
      tracks: {
        top: [
          ...referenceTracks,
          ...profileTracks
        ],
        left: [],
        center: [],
        right: [],
        bottom: [],
        whole: [],
        gallery: []
      },
      layout: {
        w: 12,
        h: 12,
        x: 0,
        y: 0,
        static: false
      }
    };
    return hgView;
  }, [
    genomicProfilesAttrs,
    urls,
    theme,
    height,
    profileTrackUidKey,
    profileTrackNameKey,
    cellSetSelection,
    cellSetColor,
    higlassServer,
    assembly
  ]);
  useEffect22(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  return /* @__PURE__ */ React68.createElement("div", {
    className: "higlass-title-wrapper"
  }, /* @__PURE__ */ React68.createElement(TitleInfo, {
    title: title16,
    removeGridComponent,
    theme,
    isReady,
    urls
  }, /* @__PURE__ */ React68.createElement("div", {
    className: "higlass-lazy-wrapper",
    ref: containerRef
  }, hgViewConfig ? /* @__PURE__ */ React68.createElement(HiGlassLazy, {
    coordinationScopes,
    theme,
    hgViewConfig,
    height
  }) : null)));
}

// src/components/genes/ExpressionHistogramSubscriber.js
import React70, { useMemo as useMemo15, useEffect as useEffect23 } from "react";
import { sum as sum3 } from "d3-array";

// src/components/genes/ExpressionHistogram.js
import React69 from "react";
import clamp5 from "lodash/clamp";
function ExpressionHistogram(props) {
  const {
    geneSelection,
    data,
    theme,
    width,
    height,
    marginRight = 90,
    marginBottom = 50
  } = props;
  const xTitle = geneSelection && geneSelection.length >= 1 ? "Normalized Expression Value" : "Total Normalized Transcript Count";
  const spec = {
    mark: { type: "bar" },
    encoding: {
      x: {
        field: "value",
        type: "quantitative",
        bin: { maxbins: 50 },
        title: xTitle
      },
      y: {
        type: "quantitative",
        aggregate: "count",
        title: "Number of Cells"
      },
      color: { value: "gray" }
    },
    width: clamp5(width - marginRight, 10, Infinity),
    height: clamp5(height - marginBottom, 10, Infinity),
    config: VEGA_THEMES[theme]
  };
  return /* @__PURE__ */ React69.createElement(VegaPlot, {
    data,
    spec
  });
}

// src/components/genes/ExpressionHistogramSubscriber.js
var EXPRESSION_HISTOGRAM_DATA_TYPES = ["expression-matrix"];
function ExpressionHistogramSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme
  } = props;
  const loaders = useLoaders();
  const [{
    dataset,
    geneSelection
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.expressionHistogram, coordinationScopes);
  const [width, height, containerRef] = useGridItemSize();
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(EXPRESSION_HISTOGRAM_DATA_TYPES);
  useEffect23(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [expressionMatrix] = useExpressionMatrixData(loaders, dataset, setItemIsReady, addUrl, true);
  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);
  const firstGeneSelected = geneSelection && geneSelection.length >= 1 ? geneSelection[0] : null;
  const data = useMemo15(() => {
    if (firstGeneSelected && expressionMatrix && expressionData) {
      return Array.from(expressionData[0]).map((_, index) => {
        const value = expressionData[0][index];
        const normValue = value * 100 / 255;
        return { value: normValue, gene: firstGeneSelected };
      });
    }
    if (expressionMatrix) {
      const numGenes = expressionMatrix.cols.length;
      return expressionMatrix.rows.map((cellId, cellIndex) => {
        const values = expressionMatrix.matrix.subarray(cellIndex * numGenes, (cellIndex + 1) * numGenes);
        const sumValue = sum3(values) * 100 / 255;
        return { value: sumValue, gene: null };
      });
    }
    return null;
  }, [expressionMatrix, firstGeneSelected, expressionData]);
  return /* @__PURE__ */ React70.createElement(TitleInfo, {
    title: `Expression Histogram${firstGeneSelected ? ` (${firstGeneSelected})` : ""}`,
    removeGridComponent,
    urls,
    theme,
    isReady
  }, /* @__PURE__ */ React70.createElement("div", {
    ref: containerRef,
    className: "vega-container"
  }, /* @__PURE__ */ React70.createElement(ExpressionHistogram, {
    geneSelection,
    data,
    theme,
    width,
    height
  })));
}

// src/components/sets/CellSetExpressionPlotSubscriber.js
import React73, { useEffect as useEffect24, useReducer as useReducer2 } from "react";

// src/components/sets/hooks.js
import { useMemo as useMemo16 } from "react";
function useExpressionByCellSet(expressionData, expressionDataAttrs, cellSets, additionalCellSets, geneSelection, cellSetSelection, cellSetColor, useGeneExpressionTransform, theme) {
  const mergedCellSets = useMemo16(() => mergeCellSets(cellSets, additionalCellSets), [cellSets, additionalCellSets]);
  const [expressionArr, expressionMax] = useMemo16(() => {
    if (mergedCellSets && cellSetSelection && geneSelection && geneSelection.length >= 1 && expressionData) {
      const cellObjects = treeToObjectsBySetNames(mergedCellSets, cellSetSelection, cellSetColor, theme);
      const firstGeneSelected = geneSelection[0];
      let exprMax = -Infinity;
      const cellIndices = {};
      for (let i = 0; i < expressionDataAttrs.rows.length; i += 1) {
        cellIndices[expressionDataAttrs.rows[i]] = i;
      }
      const exprValues = cellObjects.map((cell) => {
        const cellIndex = cellIndices[cell.obsId];
        const value = expressionData[0][cellIndex];
        const normValue = value * 100 / 255;
        const transformedValue = useGeneExpressionTransform ? Math.log(1 + normValue) : normValue;
        exprMax = Math.max(transformedValue, exprMax);
        return { value: transformedValue, gene: firstGeneSelected, set: cell.name };
      });
      return [exprValues, exprMax];
    }
    return [null, null];
  }, [
    expressionData,
    expressionDataAttrs,
    geneSelection,
    theme,
    mergedCellSets,
    cellSetSelection,
    cellSetColor,
    useGeneExpressionTransform
  ]);
  const setArr = useMemo16(() => mergedCellSets && cellSetSelection && cellSetColor ? treeToSetSizesBySetNames(mergedCellSets, cellSetSelection, cellSetColor, theme) : [], [mergedCellSets, cellSetSelection, cellSetColor, theme]);
  return [expressionArr, setArr, expressionMax];
}

// src/components/sets/CellSetExpressionPlotOptions.js
import React71 from "react";
import Checkbox6 from "@material-ui/core/Checkbox";
import TableCell5 from "@material-ui/core/TableCell";
import TableRow5 from "@material-ui/core/TableRow";
function CellSetExpressionPlotOptions(props) {
  const { toggleGeneExpressionTransform, useGeneExpressionTransform } = props;
  const classes = useStyles2();
  function handleGeneExpressionTransformChange() {
    toggleGeneExpressionTransform();
  }
  return /* @__PURE__ */ React71.createElement(OptionsContainer, null, /* @__PURE__ */ React71.createElement(TableRow5, null, /* @__PURE__ */ React71.createElement(TableCell5, {
    className: classes.labelCell
  }, "Log Transform"), /* @__PURE__ */ React71.createElement(TableCell5, {
    className: classes.inputCell
  }, /* @__PURE__ */ React71.createElement(Checkbox6, {
    className: classes.checkbox,
    checked: Boolean(useGeneExpressionTransform),
    onChange: handleGeneExpressionTransformChange,
    name: "scatterplot-option-cell-set-labels",
    color: "default"
  }))));
}

// src/components/sets/CellSetExpressionPlot.js
import React72 from "react";
import clamp6 from "lodash/clamp";
function CellSetExpressionPlot(props) {
  const {
    domainMax = 100,
    colors,
    data,
    theme,
    width,
    height,
    marginRight = 90,
    marginBottom,
    useGeneExpressionTransform
  } = props;
  const maxCharactersForLabel = data.reduce((acc, val) => {
    acc = acc === void 0 || val.set.length > acc ? val.set.length : acc;
    return acc;
  }, 0);
  const autoMarginBottom = marginBottom || 30 + Math.sqrt(maxCharactersForLabel / 2) * 30;
  const colorScale = {
    domain: colors.map((d) => d.name),
    range: colors.map((d) => colorArrayToString(d.color))
  };
  const plotWidth = clamp6(width - marginRight, 10, Infinity);
  const plotHeight = clamp6(height - autoMarginBottom, 10, Infinity);
  const numBands = colors.length;
  const bandWidth = plotWidth / numBands;
  const rectColor = theme === "dark" ? "white" : "black";
  const spec = {
    $schema: "https://vega.github.io/schema/vega/v5.json",
    description: "A violin plot showing distributions of expression levels for selected cell sets.",
    width: plotWidth,
    height: plotHeight,
    config: __spreadProps(__spreadValues({}, VEGA_THEMES[theme]), {
      axisBand: {
        bandPosition: 1,
        tickExtra: true,
        tickOffset: 0
      }
    }),
    signals: [
      { name: "bandWidth", value: bandWidth },
      { name: "width", value: plotWidth },
      { name: "height", value: plotHeight },
      { name: "trim", value: true }
    ],
    data: [
      {
        name: "density",
        source: DATASET_NAME,
        transform: [
          {
            type: "kde",
            field: "value",
            groupby: ["set"],
            bandwidth: 0,
            extent: [0, domainMax]
          }
        ]
      },
      {
        name: "stats",
        source: DATASET_NAME,
        transform: [
          {
            type: "aggregate",
            groupby: ["set"],
            fields: ["value", "value", "value"],
            ops: ["q1", "median", "q3"],
            as: ["q1", "median", "q3"]
          }
        ]
      }
    ],
    scales: [
      {
        name: "layout",
        type: "band",
        range: "width",
        domain: { data: DATASET_NAME, field: "set" }
      },
      {
        name: "yscale",
        type: "linear",
        range: "height",
        domain: [0, domainMax]
      },
      {
        name: "wscale",
        type: "linear",
        range: [0, { signal: "bandWidth" }],
        domain: { data: "density", field: "density" }
      },
      {
        name: "wscaleReversed",
        type: "linear",
        reverse: true,
        range: [0, { signal: "bandWidth" }],
        domain: { data: "density", field: "density" }
      },
      __spreadValues({
        name: "color",
        type: "ordinal"
      }, colorScale)
    ],
    axes: [
      {
        orient: "left",
        scale: "yscale",
        zindex: 1,
        title: useGeneExpressionTransform ? ["Log-Transformed", "Normalized Expression Values"] : "Normalized Expression Values"
      },
      {
        orient: "bottom",
        scale: "layout",
        tickCount: 5,
        zindex: 1,
        title: "Cell Set",
        labelAngle: -45,
        labelAlign: "right"
      }
    ],
    marks: [
      {
        type: "group",
        from: {
          facet: {
            data: "density",
            name: "violin",
            groupby: "set"
          }
        },
        encode: {
          enter: {
            xc: { scale: "layout", field: "set", band: 0.5 },
            width: { signal: "bandWidth" },
            height: { signal: "height" }
          }
        },
        data: [
          {
            name: "summary",
            source: "stats",
            transform: [
              {
                type: "filter",
                expr: "datum.set === parent.set"
              }
            ]
          }
        ],
        marks: [
          {
            type: "area",
            orient: "vertical",
            from: { data: "violin" },
            encode: {
              enter: {
                fill: { scale: "color", field: { parent: "set" } }
              },
              update: {
                width: { scale: "wscale", field: "density" },
                xc: { signal: "bandWidth / 2" },
                y2: { scale: "yscale", field: "value" },
                y: { scale: "yscale", value: 0 }
              }
            }
          },
          {
            type: "area",
            orient: "vertical",
            from: { data: "violin" },
            encode: {
              enter: {
                fill: { scale: "color", field: { parent: "set" } }
              },
              update: {
                width: { scale: "wscaleReversed", field: "density" },
                xc: { signal: "bandWidth" },
                y2: { scale: "yscale", field: "value" },
                y: { scale: "yscale", value: 0 }
              }
            }
          },
          {
            type: "rect",
            from: { data: "summary" },
            encode: {
              enter: {
                fill: { value: rectColor },
                width: { value: 2 }
              },
              update: {
                y: { scale: "yscale", field: "q1" },
                y2: { scale: "yscale", field: "q3" },
                xc: { signal: "bandWidth / 2" }
              }
            }
          },
          {
            type: "rect",
            from: { data: "summary" },
            encode: {
              enter: {
                fill: { value: rectColor },
                height: { value: 2 },
                width: { value: 8 }
              },
              update: {
                y: { scale: "yscale", field: "median" },
                xc: { signal: "bandWidth / 2" }
              }
            }
          }
        ]
      }
    ]
  };
  return /* @__PURE__ */ React72.createElement(VegaPlot, {
    data,
    spec
  });
}

// src/components/sets/CellSetExpressionPlotSubscriber.js
var CELL_SET_EXPRESSION_DATA_TYPES = ["cell-sets", "expression-matrix"];
function CellSetExpressionPlotSubscriber(props) {
  const {
    coordinationScopes,
    removeGridComponent,
    theme
  } = props;
  const loaders = useLoaders();
  const [{
    dataset,
    geneSelection,
    geneExpressionTransform,
    cellSetSelection,
    cellSetColor,
    additionalCellSets
  }, {
    setGeneExpressionTransform
  }] = useCoordination(COMPONENT_COORDINATION_TYPES.cellSetExpression, coordinationScopes);
  const [width, height, containerRef] = useGridItemSize();
  const [urls, addUrl, resetUrls] = useUrls();
  const [
    isReady,
    setItemIsReady,
    setItemIsNotReady,
    resetReadyItems
  ] = useReady(CELL_SET_EXPRESSION_DATA_TYPES);
  const [useGeneExpressionTransform, toggleGeneExpressionTransform] = useReducer2((v) => {
    const newValue = !v;
    setGeneExpressionTransform(newValue ? "log1p" : null);
    return newValue;
  }, geneExpressionTransform);
  useEffect24(() => {
    resetUrls();
    resetReadyItems();
  }, [loaders, dataset]);
  const [expressionData] = useGeneSelection(loaders, dataset, setItemIsReady, false, geneSelection, setItemIsNotReady);
  const [attrs] = useExpressionAttrs(loaders, dataset, setItemIsReady, addUrl, false);
  const [cellSets] = useCellSetsData(loaders, dataset, setItemIsReady, addUrl, true);
  const [expressionArr, setArr, expressionMax] = useExpressionByCellSet(expressionData, attrs, cellSets, additionalCellSets, geneSelection, cellSetSelection, cellSetColor, useGeneExpressionTransform, theme);
  const firstGeneSelected = geneSelection && geneSelection.length >= 1 ? geneSelection[0] : null;
  return /* @__PURE__ */ React73.createElement(TitleInfo, {
    title: `Expression by Cell Set${firstGeneSelected ? ` (${firstGeneSelected})` : ""}`,
    removeGridComponent,
    urls,
    theme,
    isReady,
    options: /* @__PURE__ */ React73.createElement(CellSetExpressionPlotOptions, {
      useGeneExpressionTransform,
      toggleGeneExpressionTransform
    })
  }, /* @__PURE__ */ React73.createElement("div", {
    ref: containerRef,
    className: "vega-container"
  }, expressionArr ? /* @__PURE__ */ React73.createElement(CellSetExpressionPlot, {
    domainMax: expressionMax,
    colors: setArr,
    data: expressionArr,
    theme,
    width,
    height,
    useGeneExpressionTransform
  }) : /* @__PURE__ */ React73.createElement("span", null, "Select a gene.")));
}

// src/app/component-registry.js
var registry = {
  description: DescriptionSubscriber,
  status: StatusSubscriber,
  genes: GenesSubscriber,
  cellSets: CellSetsManagerSubscriber,
  scatterplot: ScatterplotSubscriber,
  spatial: SpatialSubscriber,
  heatmap: HeatmapSubscriber,
  layerController: LayerControllerSubscriber_default,
  cellSetSizes: CellSetSizesPlotSubscriber,
  expressionHistogram: ExpressionHistogramSubscriber,
  genomicProfiles: GenomicProfilesSubscriber,
  cellSetExpression: CellSetExpressionPlotSubscriber,
  higlass: HiGlassSubscriber
};
function getComponent(name2) {
  const component = registry[name2];
  if (component === void 0) {
    throw new Error(`Could not find definition for "${name2}" in registry.`);
  }
  return registry[name2];
}

// src/app/view-config-utils.js
function getExistingScopesForCoordinationType(config, coordinationType) {
  var _a2;
  const spaceScopes = Object.keys(((_a2 = config == null ? void 0 : config.coordinationSpace) == null ? void 0 : _a2[coordinationType]) || {});
  const componentScopes = config.layout.map((c) => {
    var _a3;
    return (_a3 = c.coordinationScopes) == null ? void 0 : _a3[coordinationType];
  });
  return Array.from(new Set([...spaceScopes, ...componentScopes]));
}
function coordinateComponentsTogether(config, coordinationType, scopeValue) {
  var _a2;
  const scopeName = getNextScope(getExistingScopesForCoordinationType(config, coordinationType));
  const newConfig = __spreadProps(__spreadValues({}, config), {
    coordinationSpace: __spreadProps(__spreadValues({}, config.coordinationSpace), {
      [coordinationType]: __spreadProps(__spreadValues({}, (_a2 = config == null ? void 0 : config.coordinationSpace) == null ? void 0 : _a2[coordinationType]), {
        [scopeName]: scopeValue
      })
    }),
    layout: config.layout.map((component) => {
      var _a3;
      return __spreadProps(__spreadValues({}, component), {
        coordinationScopes: __spreadValues(__spreadValues({}, component.coordinationScopes), COMPONENT_COORDINATION_TYPES[component.component].includes(coordinationType) && !((_a3 = component.coordinationScopes) == null ? void 0 : _a3[coordinationType]) ? {
          [coordinationType]: scopeName
        } : {})
      });
    })
  });
  return newConfig;
}
function coordinateComponentsIndependent(config, coordinationType, scopeValue) {
  const newConfig = __spreadProps(__spreadValues({}, config), {
    layout: [...config.layout]
  });
  const newScopes = {};
  newConfig.layout.forEach((component, i) => {
    var _a2;
    if (COMPONENT_COORDINATION_TYPES[component.component].includes(coordinationType) && !((_a2 = component.coordinationScopes) == null ? void 0 : _a2[coordinationType])) {
      const scopeName = getNextScope([
        ...getExistingScopesForCoordinationType(config, coordinationType),
        ...Object.keys(newScopes)
      ]);
      newScopes[scopeName] = scopeValue;
      newConfig.layout[i] = __spreadProps(__spreadValues({}, component), {
        coordinationScopes: __spreadProps(__spreadValues({}, component.coordinationScopes), {
          [coordinationType]: scopeName
        })
      });
    }
  });
  newConfig.coordinationSpace = __spreadProps(__spreadValues({}, newConfig.coordinationSpace), {
    [coordinationType]: __spreadValues(__spreadValues({}, newConfig.coordinationSpace[coordinationType]), newScopes)
  });
  return newConfig;
}
function initializeAuto(config) {
  let newConfig = config;
  const { layout, datasets } = newConfig;
  Object.values(COORDINATION_TYPES).forEach((coordinationType) => {
    const requiresCoordination = !layout.every((c) => {
      var _a2;
      return !COMPONENT_COORDINATION_TYPES[c.component].includes(coordinationType) || ((_a2 = c.coordinationScopes) == null ? void 0 : _a2[coordinationType]);
    });
    if (requiresCoordination) {
      let defaultValue = DEFAULT_COORDINATION_VALUES[coordinationType];
      if (coordinationType === "dataset" && datasets.length >= 1) {
        defaultValue = datasets[0].uid;
      }
      if (AUTO_INDEPENDENT_COORDINATION_TYPES.includes(coordinationType)) {
        newConfig = coordinateComponentsIndependent(newConfig, coordinationType, defaultValue);
      } else {
        newConfig = coordinateComponentsTogether(newConfig, coordinationType, defaultValue);
      }
    }
  });
  return newConfig;
}
function initialize(config) {
  if (config.initStrategy === "auto") {
    return initializeAuto(config);
  }
  return config;
}
function upgradeAndValidate(oldConfig) {
  let nextConfig = oldConfig;
  let fromVersion;
  let upgradeFunction;
  let validateFunction;
  do {
    fromVersion = nextConfig.version;
    if (!Object.keys(SCHEMA_HANDLERS).includes(fromVersion)) {
      return [{
        title: "Config validation failed",
        preformatted: "Unknown config version."
      }, false];
    }
    [validateFunction, upgradeFunction] = SCHEMA_HANDLERS[fromVersion];
    const validLegacy = validateFunction(nextConfig);
    if (!validLegacy) {
      const failureReason = JSON.stringify(validateFunction.errors, null, 2);
      return [{
        title: "Config validation failed",
        preformatted: failureReason
      }, false];
    }
    if (upgradeFunction) {
      nextConfig = upgradeFunction(nextConfig);
    }
  } while (upgradeFunction);
  console.groupCollapsed(`\u{1F684} Vitessce (${package_default.version}) view configuration`);
  console.info(`data:,${JSON.stringify(nextConfig)}`);
  console.info(JSON.stringify(nextConfig, null, 2));
  console.groupEnd();
  return [nextConfig, true];
}

// src/app/Vitessce.js
var generateClassName = createGenerateClassName({
  disableGlobal: true
});
function Vitessce(props) {
  const {
    config,
    rowHeight,
    height,
    theme,
    onWarn,
    onConfigChange,
    onLoaderChange,
    validateOnConfigChange = false
  } = props;
  const [configOrWarning, success] = useMemo17(() => {
    if (!config) {
      return [{
        title: "No such dataset",
        unformatted: "The dataset configuration could not be found."
      }, false];
    }
    if (!config.version) {
      return [{
        title: "Missing version",
        unformatted: "The dataset configuration is missing a version, preventing validation."
      }, false];
    }
    const [upgradedConfig, upgradeSuccess] = upgradeAndValidate(config);
    if (upgradeSuccess) {
      const initializedConfig = initialize(upgradedConfig);
      return [initializedConfig, true];
    }
    return [upgradedConfig, false];
  }, [config]);
  useEffect25(() => {
    if (success && !isEqual14(configOrWarning, config) && onConfigChange) {
      onConfigChange(configOrWarning);
    }
  }, [success, config, configOrWarning, onConfigChange]);
  return success ? /* @__PURE__ */ React74.createElement(StylesProvider, {
    generateClassName
  }, /* @__PURE__ */ React74.createElement(ThemeProvider, {
    theme: muiTheme[theme]
  }, /* @__PURE__ */ React74.createElement(ViewConfigProvider, {
    createStore: createViewConfigStore
  }, /* @__PURE__ */ React74.createElement(AuxiliaryProvider, {
    createStore: createAuxiliaryStore
  }, /* @__PURE__ */ React74.createElement(VitessceGrid, {
    config: configOrWarning,
    getComponent,
    rowHeight,
    height,
    theme
  }), /* @__PURE__ */ React74.createElement(CallbackPublisher, {
    onWarn,
    onConfigChange,
    onLoaderChange,
    validateOnConfigChange
  }))))) : /* @__PURE__ */ React74.createElement(Warning, __spreadValues({
    theme
  }, configOrWarning));
}

// src/app/app.js
function AwaitResponse(props) {
  const {
    response,
    theme
  } = props;
  const [isLoading, setIsLoading] = useState21(true);
  const responseRef = useRef11();
  useEffect26(() => {
    response.then((c) => {
      responseRef.current = c;
      setIsLoading(false);
    });
  }, [response]);
  return !isLoading ? React75.createElement(responseRef.current) : /* @__PURE__ */ React75.createElement(Warning, {
    title: "Loading...",
    theme
  });
}
function preformattedDetails(response) {
  return `
    ok: ${response.ok}
    status: ${response.status}
    statusText: ${response.statusText}
    redirected: ${response.redirected}
    type: ${response.type}
    url: ${response.url}`;
}
function checkResponse(response, theme, debug) {
  if (!response.ok) {
    return Promise.resolve(() => /* @__PURE__ */ React75.createElement(Warning, {
      title: "Fetch response not OK",
      preformatted: preformattedDetails(response),
      theme
    }));
  }
  return response.text().then((text) => {
    try {
      const config = JSON.parse(text);
      return Promise.resolve(() => /* @__PURE__ */ React75.createElement(Vitessce, {
        config,
        theme,
        onConfigChange: debug ? console.log : void 0,
        validateOnConfigChange: debug
      }));
    } catch (e) {
      return Promise.resolve(() => /* @__PURE__ */ React75.createElement(Warning, {
        title: "Error parsing JSON",
        preformatted: preformattedDetails(response),
        unformatted: `${e.message}: ${text}`,
        theme
      }));
    }
  });
}
function validateTheme(theme) {
  return ["light", "dark"].includes(theme) ? theme : "dark";
}
function createApp(params) {
  const { rowHeight = null, showBetaHeader = false } = params;
  const urlParams = new URLSearchParams(window.location.search);
  const datasetId = urlParams.get("dataset");
  const debug = urlParams.get("debug") === "true";
  const datasetUrl = urlParams.get("url");
  const showAll = urlParams.get("show") === "all";
  const theme = validateTheme(urlParams.get("theme"));
  if (datasetId) {
    const config = getConfig(datasetId);
    return /* @__PURE__ */ React75.createElement(Vitessce, {
      config,
      rowHeight,
      theme,
      onConfigChange: debug ? console.log : void 0,
      validateOnConfigChange: debug
    });
  }
  if (datasetUrl) {
    const responsePromise = fetch(datasetUrl).then((response) => checkResponse(response, theme, debug)).catch((error) => Promise.resolve(() => /* @__PURE__ */ React75.createElement(Warning, {
      title: "Error fetching",
      unformatted: error.message,
      theme
    })));
    return /* @__PURE__ */ React75.createElement(AwaitResponse, {
      response: responsePromise,
      theme
    });
  }
  const configs2 = listConfigs(showAll);
  return /* @__PURE__ */ React75.createElement(Welcome, {
    configs: configs2,
    theme,
    showBetaHeader
  });
}

// src/app/export-utils.js
import Bowser from "bowser";
import { compressToEncodedURIComponent, decompressFromEncodedURIComponent } from "lz-string";
var CURRENT_VERSION = "0.0.1";
var VITESSCE_CONF_QUERY_STRING = "vitessce_conf";
var VERSION_QUERY_STRING = "vitessce_conf_version";
var LENGTH_QUERY_STRING = "vitessce_conf_length";
function sniffBrowser() {
  const { browser } = Bowser.parse(window.navigator.userAgent);
  return browser.name;
}
var MAX_BROWSER_URL_LENGTHS = {
  Chrome: 32779,
  "Internet Explorer": 2047,
  Edge: 2047,
  Safari: 65e3,
  Firefox: 65e3
};
var CompressedConfLengthError = class {
  constructor(message) {
    this.message = message;
  }
};
function encodeConfInUrl({
  conf,
  onOverMaximumUrlLength = () => {
  }
}) {
  const compressedConf = compressToEncodedURIComponent(JSON.stringify(conf));
  const newParams = `${LENGTH_QUERY_STRING}=${compressedConf.length}&${VERSION_QUERY_STRING}=${CURRENT_VERSION}&${VITESSCE_CONF_QUERY_STRING}=${compressedConf}`;
  const browser = sniffBrowser();
  const maxLength = MAX_BROWSER_URL_LENGTHS[browser];
  if (newParams.length > maxLength) {
    const willWorkOn = Object.entries(MAX_BROWSER_URL_LENGTHS).filter((entry) => entry[1] > newParams.length).map((entry) => entry[0]);
    const message = `Configuration is ${compressedConf.length} characters; max URL for ${browser} is ${maxLength}: it will work on ${willWorkOn.join(", ") || "no browser"}.`;
    console.error(message);
    onOverMaximumUrlLength({ message, willWorkOn });
  }
  return newParams;
}
function decodeURLParamsToConf(queryString) {
  const params = new URLSearchParams(queryString.replace("#", "&"));
  const compressedConfString = params.get(VITESSCE_CONF_QUERY_STRING);
  const expectedConfLength = Number(params.get(LENGTH_QUERY_STRING));
  if (expectedConfLength !== compressedConfString.length) {
    throw new CompressedConfLengthError(`Compressed conf length (${compressedConfString.length}) != expected (${expectedConfLength}). URL truncated?`);
  }
  const version2 = params.get(VERSION_QUERY_STRING);
  if (version2 === CURRENT_VERSION) {
    const conf = JSON.parse(decompressFromEncodedURIComponent(compressedConfString));
    return conf;
  }
  throw new Error("Unrecognized URL Param Version");
}

// src/api/VitessceConfig.js
var VitessceConfigDatasetFile = class {
  constructor(url, dataType, fileType) {
    this.file = {
      url,
      type: dataType,
      fileType
    };
  }
  toJSON() {
    return this.file;
  }
};
var VitessceConfigDataset = class {
  constructor(uid, name2, description2) {
    this.dataset = {
      uid,
      name: name2,
      description: description2,
      files: []
    };
  }
  addFile(url, dataType, fileType) {
    this.dataset.files.push(new VitessceConfigDatasetFile(url, dataType, fileType));
    return this;
  }
  toJSON() {
    return __spreadProps(__spreadValues({}, this.dataset), {
      files: this.dataset.files.map((f) => f.toJSON())
    });
  }
};
var VitessceConfigView = class {
  constructor(component, coordinationScopes, x, y, w, h) {
    this.view = {
      component,
      coordinationScopes,
      x,
      y,
      w,
      h
    };
  }
  useCoordination(...args) {
    const cScopes = args;
    cScopes.forEach((cScope) => {
      this.view.coordinationScopes[cScope.cType] = cScope.cScope;
    });
    return this;
  }
  setXYWH(x, y, w, h) {
    this.view.x = x;
    this.view.y = y;
    this.view.w = w;
    this.view.h = h;
  }
  toJSON() {
    return this.view;
  }
};
var VitessceConfigViewHConcat = class {
  constructor(views) {
    this.views = views;
  }
};
var VitessceConfigViewVConcat = class {
  constructor(views) {
    this.views = views;
  }
};
function hconcat(...views) {
  const vcvhc = new VitessceConfigViewHConcat(views);
  return vcvhc;
}
function vconcat(...views) {
  const vcvvc = new VitessceConfigViewVConcat(views);
  return vcvvc;
}
var VitessceConfigCoordinationScope = class {
  constructor(cType, cScope) {
    this.cType = cType;
    this.cScope = cScope;
    this.cValue = null;
  }
  setValue(cValue) {
    this.cValue = cValue;
    return this;
  }
};
var VitessceConfig = class {
  constructor(name2 = void 0, description2 = void 0) {
    this.config = {
      version: "1.0.0",
      name: name2,
      description: description2,
      datasets: [],
      coordinationSpace: {},
      layout: [],
      initStrategy: "auto"
    };
  }
  addDataset(name2 = void 0, description2 = void 0, options = void 0) {
    const { uid } = options || {};
    const prevDatasetUids = this.config.datasets.map((d) => d.dataset.uid);
    const nextUid = uid || getNextScope(prevDatasetUids);
    const newDataset = new VitessceConfigDataset(nextUid, name2, description2);
    this.config.datasets.push(newDataset);
    const [newScope] = this.addCoordination(COORDINATION_TYPES.DATASET);
    newScope.setValue(nextUid);
    return newDataset;
  }
  addView(dataset, component, options) {
    const {
      x = 0,
      y = 0,
      w = 1,
      h = 1,
      mapping = null
    } = options || {};
    const datasetMatches = this.config.coordinationSpace[COORDINATION_TYPES.DATASET] ? Object.entries(this.config.coordinationSpace[COORDINATION_TYPES.DATASET]).filter(([scopeName, datasetScope2]) => datasetScope2.cValue === dataset.dataset.uid).map(([scopeName]) => scopeName) : [];
    let datasetScope;
    if (datasetMatches.length === 1) {
      [datasetScope] = datasetMatches;
    } else {
      throw new Error("No coordination scope matching the dataset parameter could be found in the coordination space.");
    }
    const coordinationScopes = {
      [COORDINATION_TYPES.DATASET]: datasetScope
    };
    const newView = new VitessceConfigView(component, coordinationScopes, x, y, w, h);
    if (mapping) {
      const [etScope] = this.addCoordination(COORDINATION_TYPES.EMBEDDING_TYPE);
      etScope.setValue(mapping);
      newView.useCoordination(etScope);
    }
    this.config.layout.push(newView);
    return newView;
  }
  addCoordination(...args) {
    const cTypes = args;
    const result = [];
    cTypes.forEach((cType) => {
      const prevScopes = this.config.coordinationSpace[cType] ? Object.keys(this.config.coordinationSpace[cType]) : [];
      const scope = new VitessceConfigCoordinationScope(cType, getNextScope(prevScopes));
      if (!this.config.coordinationSpace[scope.cType]) {
        this.config.coordinationSpace[scope.cType] = {};
      }
      this.config.coordinationSpace[scope.cType][scope.cScope] = scope;
      result.push(scope);
    });
    return result;
  }
  linkViews(views, cTypes, cValues = null) {
    const cScopes = this.addCoordination(...cTypes);
    views.forEach((view) => {
      cScopes.forEach((cScope) => {
        view.useCoordination(cScope);
      });
    });
    if (Array.isArray(cValues) && cValues.length === cTypes.length) {
      cScopes.forEach((cScope, i) => {
        cScope.setValue(cValues[i]);
      });
    }
    return this;
  }
  layout(viewConcat) {
    function layoutAux(obj, xMin, xMax, yMin, yMax) {
      const w = xMax - xMin;
      const h = yMax - yMin;
      if (obj instanceof VitessceConfigView) {
        obj.setXYWH(xMin, yMin, w, h);
      } else if (obj instanceof VitessceConfigViewHConcat) {
        const { views } = obj;
        const numViews = views.length;
        views.forEach((view, i) => {
          layoutAux(view, xMin + w / numViews * i, xMin + w / numViews * (i + 1), yMin, yMax);
        });
      } else if (obj instanceof VitessceConfigViewVConcat) {
        const { views } = obj;
        const numViews = views.length;
        views.forEach((view, i) => {
          layoutAux(view, xMin, xMax, yMin + h / numViews * i, yMin + h / numViews * (i + 1));
        });
      }
    }
    layoutAux(viewConcat, 0, 12, 0, 12);
    return this;
  }
  toJSON() {
    return __spreadProps(__spreadValues({}, this.config), {
      datasets: this.config.datasets.map((d) => d.toJSON()),
      coordinationSpace: fromEntries(Object.entries(this.config.coordinationSpace).map(([cType, cScopes]) => [
        cType,
        fromEntries(Object.entries(cScopes).map(([cScopeName, cScope]) => [
          cScopeName,
          cScope.cValue
        ]))
      ])),
      layout: this.config.layout.map((c) => c.toJSON())
    });
  }
  static fromJSON(config) {
    const { name: name2, description: description2 } = config;
    const vc = new VitessceConfig(name2, description2);
    config.datasets.forEach((d) => {
      const newDataset = vc.addDataset(d.name, d.description, { uid: d.uid });
      d.files.forEach((f) => {
        newDataset.addFile(f.url, f.type, f.fileType);
      });
    });
    Object.keys(config.coordinationSpace).forEach((cType) => {
      if (cType !== COORDINATION_TYPES.DATASET) {
        const cObj = config.coordinationSpace[cType];
        vc.config.coordinationSpace[cType] = {};
        Object.entries(cObj).forEach(([cScopeName, cScopeValue]) => {
          const scope = new VitessceConfigCoordinationScope(cType, cScopeName);
          scope.setValue(cScopeValue);
          vc.config.coordinationSpace[cType][cScopeName] = scope;
        });
      }
    });
    config.layout.forEach((c) => {
      const newView = new VitessceConfigView(c.component, c.coordinationScopes, c.x, c.y, c.w, c.h);
      vc.config.layout.push(newView);
    });
    return vc;
  }
};
export {
  Heatmap_default as Heatmap,
  Scatterplot_default as Scatterplot,
  Spatial_default as Spatial,
  Vitessce,
  VitessceConfig,
  VitessceGrid,
  createApp,
  decodeURLParamsToConf,
  encodeConfInUrl,
  hconcat,
  vconcat
};
//# sourceMappingURL=index.js.map
